{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack e-commerce application for \"IndoSaga Furniture\" - a premium teak wood furniture store. The application features a React frontend with a modern UI built using shadcn/ui components, and an Express.js backend with PostgreSQL database integration using Drizzle ORM. The application includes core e-commerce functionality like product catalog, shopping cart, wishlist, user authentication, and order management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Design System**: Custom color palette with warm, furniture-themed colors (browns, beiges, neutrals)\n- **Component Structure**: Modular components with separation between UI components, pages, and business logic\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Session Management**: Express sessions with PostgreSQL session storage\n- **API Design**: RESTful API endpoints with proper error handling and validation\n- **Development Setup**: Hot reload with Vite integration for full-stack development\n\n## Database Schema\n- **Users**: Authentication and profile management\n- **Products**: Furniture catalog with categories, pricing, and inventory\n- **Categories**: Product categorization system\n- **Cart Items**: Shopping cart functionality with user sessions\n- **Wishlist Items**: User wishlist management\n- **Orders & Order Items**: Order processing and history\n- **Contact Inquiries**: Customer support and inquiries\n- **Sessions**: Server-side session storage\n\n## Authentication & Authorization\n- **Auth0 Integration**: Client-side Auth0 authentication with server session sync\n- **User Management**: User registration, login, and profile management through Auth0\n- **Protected Routes**: Client-side route protection based on authentication status\n- **Session Storage**: Server-side session management for authenticated users\n\n## Key Features\n- **Product Catalog**: Browse products with search, filtering, and categorization\n- **Shopping Cart**: Add/remove items, quantity management, and checkout\n- **Wishlist**: Save favorite items for later\n- **Flash Deals**: Special ₹1 deals with countdown timers\n- **Responsive Design**: Mobile-first design with responsive navigation\n- **Real-time Updates**: Optimistic updates and cache invalidation with React Query\n\n# External Dependencies\n\n## Core Technologies\n- **@neondatabase/serverless**: PostgreSQL serverless database connection\n- **drizzle-orm**: TypeScript ORM for database operations\n- **drizzle-kit**: Database migration and schema management tools\n\n## Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React router\n- **@radix-ui/***: Accessible UI primitives for components\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **date-fns**: Date manipulation utilities\n\n## Backend Libraries\n- **express**: Web application framework\n- **connect-pg-simple**: PostgreSQL session store\n- **zod**: Schema validation\n- **drizzle-zod**: Integration between Drizzle and Zod for validation\n\n## Development Tools\n- **vite**: Build tool and development server\n- **typescript**: Type safety across the application\n- **@replit/vite-plugin-***: Replit-specific development tools\n- **esbuild**: Fast JavaScript bundler for production builds\n\n## UI Components\nThe application uses a comprehensive set of shadcn/ui components including forms, dialogs, navigation, data display, and feedback components, all built on top of Radix UI primitives for accessibility.","size_bytes":4027},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        warmWhite: \"var(--warmWhite)\",\n        beige: \"var(--beige)\",\n        darkBrown: \"var(--darkBrown)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(30px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        slideInLeft: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateX(-50px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        slideInRight: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateX(50px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        slideInDown: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(-30px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        float: {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.8s ease-in\",\n        fadeIn: \"fadeIn 0.8s ease-out\",\n        slideInLeft: \"slideInLeft 0.6s ease-out\",\n        slideInRight: \"slideInRight 0.6s ease-out\",\n        slideInDown: \"slideInDown 0.6s ease-out\",\n        float: \"float 3s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4285},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":386},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { checkAndSeed } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve static files from public directory\napp.use(express.static('public'));\napp.use('/uploads', express.static('public/uploads'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Check and seed database if empty\n  await checkAndSeed();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2305},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport multer from \"multer\";\nimport sharp from \"sharp\";\nimport { storage } from \"./storage\";\nimport { \n  insertProductSchema, \n  insertCategorySchema, \n  insertCartItemSchema,\n  insertWishlistItemSchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertContactInquirySchema,\n  insertUserSchema,\n  insertProductReviewSchema,\n  insertSubcategorySchema,\n  insertProductQuestionSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Razorpay from \"razorpay\";\nimport crypto from \"crypto\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { sendEmail, createAppointmentConfirmationEmail, createSupportTicketConfirmationEmail } from \"./email-service\";\n// import { auth } from \"express-openid-connect\"; // Using client-side Auth0 instead\n\n// Initialize Razorpay conditionally - prefer test keys for development\nlet razorpay: Razorpay | null = null;\nconst keyId = process.env.RAZORPAY_TEST_KEY_ID || process.env.RAZORPAY_KEY_ID;\nconst keySecret = process.env.RAZORPAY_TEST_KEY_SECRET || process.env.RAZORPAY_SECRET;\n\nif (keyId && keySecret) {\n  razorpay = new Razorpay({\n    key_id: keyId,\n    key_secret: keySecret,\n  });\n  console.log(`Razorpay initialized with ${keyId.includes('test') ? 'test' : 'live'} credentials`);\n}\n\n// Auth0 configuration\nconst baseURL = process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}` : 'http://localhost:5000';\nconst auth0Config = {\n  authRequired: false,\n  auth0Logout: true,\n  secret: process.env.AUTH0_CLIENT_SECRET,\n  baseURL: baseURL,\n  clientID: process.env.AUTH0_CLIENT_ID,\n  issuerBaseURL: process.env.AUTH0_DOMAIN ? `https://${process.env.AUTH0_DOMAIN}` : undefined,\n  routes: {\n    logout: '/logout',\n    callback: '/callback'\n  }\n};\n\nconsole.log('Auth0 Config:', {\n  baseURL: auth0Config.baseURL,\n  callbackURL: `${baseURL}/callback`,\n  clientID: auth0Config.clientID ? 'Set' : 'Not set',\n  issuerBaseURL: auth0Config.issuerBaseURL\n});\n\n// Image similarity matching function\nasync function findSimilarProductsByImage(imageBuffer: Buffer) {\n  try {\n    // Extract basic image properties for analysis\n    const image = sharp(imageBuffer);\n    const { width, height, channels } = await image.metadata();\n    \n    // Get dominant colors and basic properties\n    const { dominant } = await image.stats();\n    \n    // Get all products and categories from storage\n    const allProducts = await storage.getProducts({});\n    const allCategories = await storage.getCategories();\n    \n    // Create a category lookup map\n    const categoryMap = new Map();\n    allCategories.forEach(cat => {\n      categoryMap.set(cat.id, cat.name);\n    });\n    \n    // For now, implement a simple similarity algorithm based on:\n    // 1. Product categories (furniture types are visually similar)\n    // 2. Random selection with weighted preferences\n    // 3. Featured products get higher priority\n    \n    // Simulate AI-based categorization based on image properties\n    let detectedCategory = '';\n    const aspectRatio = width && height ? width / height : 1;\n    \n    // Enhanced heuristic based on image properties and available categories\n    const availableCategories = allCategories.map(cat => cat.name);\n    console.log('Available categories:', availableCategories);\n    \n    if (aspectRatio > 1.5) {\n      // Wide images likely to be sofas, dining tables\n      const wideCategories = availableCategories.filter(cat => \n        cat.toLowerCase().includes('sofa') || \n        cat.toLowerCase().includes('dining') ||\n        cat.toLowerCase().includes('table')\n      );\n      detectedCategory = wideCategories.length > 0 ? \n        wideCategories[Math.floor(Math.random() * wideCategories.length)] : \n        availableCategories[0];\n    } else if (aspectRatio < 0.8) {\n      // Tall images likely to be wardrobes, chairs\n      const tallCategories = availableCategories.filter(cat => \n        cat.toLowerCase().includes('wardrobe') || \n        cat.toLowerCase().includes('chair') ||\n        cat.toLowerCase().includes('cabinet')\n      );\n      detectedCategory = tallCategories.length > 0 ? \n        tallCategories[Math.floor(Math.random() * tallCategories.length)] : \n        availableCategories[0];\n    } else {\n      // Square-ish images could be any furniture - try all categories\n      detectedCategory = availableCategories[Math.floor(Math.random() * availableCategories.length)];\n    }\n    \n    console.log(`Detected furniture category: ${detectedCategory} (aspect ratio: ${aspectRatio.toFixed(2)})`);\n    \n    // Filter products by detected category or similar categories\n    let exactMatches = allProducts.filter(product => {\n      const productCategoryName = categoryMap.get(product.categoryId);\n      return productCategoryName === detectedCategory;\n    });\n    \n    let partialMatches = allProducts.filter(product => {\n      const productCategoryName = categoryMap.get(product.categoryId);\n      return productCategoryName && detectedCategory && (\n        productCategoryName.toLowerCase().includes(detectedCategory.toLowerCase()) ||\n        detectedCategory.toLowerCase().includes(productCategoryName.toLowerCase())\n      );\n    });\n    \n    let featuredProducts = allProducts.filter(p => p.featured);\n    \n    // Combine results: exact matches first, then partial matches, then featured products\n    let similarProducts = [\n      ...exactMatches,\n      ...partialMatches.filter(p => !exactMatches.find(ep => ep.id === p.id)),\n      ...featuredProducts.filter(p => !exactMatches.find(ep => ep.id === p.id) && !partialMatches.find(pm => pm.id === p.id))\n    ];\n    \n    // If still no matches, return a diverse selection of all products\n    if (similarProducts.length === 0) {\n      console.log('No category matches found, returning diverse selection');\n      similarProducts = allProducts.slice(0, 8);\n    }\n    \n    console.log(`Found ${exactMatches.length} exact matches, ${partialMatches.length} partial matches, ${featuredProducts.length} featured products`);\n    console.log('Category map:', Array.from(categoryMap.entries()));\n    console.log('Products with categories:', allProducts.slice(0, 3).map(p => ({ id: p.id, name: p.name, categoryId: p.categoryId, categoryName: categoryMap.get(p.categoryId) })));\n    \n    // Sort by relevance (featured first, then by category match, then randomize)\n    similarProducts.sort((a, b) => {\n      // Featured products get highest priority\n      if (a.featured !== b.featured) {\n        return b.featured ? 1 : -1;\n      }\n      \n      // Then prioritize exact category matches\n      const aCategoryName = categoryMap.get(a.categoryId);\n      const bCategoryName = categoryMap.get(b.categoryId);\n      const aExactMatch = aCategoryName === detectedCategory;\n      const bExactMatch = bCategoryName === detectedCategory;\n      \n      if (aExactMatch !== bExactMatch) {\n        return bExactMatch ? 1 : -1;\n      }\n      \n      // Random shuffle for similar products\n      return Math.random() - 0.5;\n    });\n    \n    // Return top 6-8 similar products\n    return similarProducts.slice(0, 8);\n    \n  } catch (error) {\n    console.error('Error in image similarity analysis:', error);\n    // Fallback: return featured products\n    return await storage.getFeaturedProducts();\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Use session middleware for client-side Auth0 integration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-key', \n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false,\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000\n    }\n  }));\n  \n  console.log('Using client-side Auth0 authentication');\n\n  // Configure multer for image uploads\n  const upload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed'));\n      }\n    },\n  });\n\n  // Client-side Auth0 handles authentication - no server routes needed\n\n  // Logout route\n  app.get('/logout', (req, res) => {\n    (req as any).session = null;\n    res.redirect('/');\n  });\n\n  // API logout endpoint for proper session clearing\n  app.post('/api/auth/logout', (req, res) => {\n    try {\n      // Destroy the session completely\n      if ((req as any).session) {\n        (req as any).session.destroy((err: any) => {\n          if (err) {\n            console.error('Session destroy error:', err);\n            return res.status(500).json({ message: 'Logout failed' });\n          }\n          \n          // Clear the session cookie\n          res.clearCookie('connect.sid');\n          res.json({ success: true, message: 'Logged out successfully' });\n        });\n      } else {\n        res.json({ success: true, message: 'No active session' });\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ message: 'Logout failed' });\n    }\n  });\n\n  // Profile route (protected)\n  app.get('/profile', async (req, res) => {\n    const user = (req as any).session?.user;\n    if (!user) {\n      return res.redirect('/login');\n    }\n\n    try {\n      // Check if user exists in database, create if not\n      const [existingUser] = await db.select().from(users).where(eq(users.email, user.email));\n      \n      if (!existingUser && user.email) {\n        // Create new user from session\n        const [newUser] = await db.insert(users).values({\n          id: user.sub || crypto.randomUUID(),\n          email: user.email,\n          name: user.name || '',\n          firstName: user.given_name || '',\n          lastName: user.family_name || '',\n          profileImageUrl: user.picture || '',\n          provider: user.provider || 'demo'\n        }).returning();\n        \n        return res.json(newUser);\n      }\n\n      res.json(existingUser);\n    } catch (error) {\n      console.error('Profile error:', error);\n      res.status(500).json({ message: 'Failed to get profile' });\n    }\n  });\n\n  // Sync Auth0 user with server session\n  app.post('/api/auth/sync', async (req, res) => {\n    try {\n      const { user, localCartItems = [] } = req.body;\n      \n      if (!user || !user.email) {\n        return res.status(400).json({ message: 'Invalid user data' });\n      }\n      \n      // Store user in session\n      (req as any).session.user = {\n        id: user.sub || crypto.randomUUID(),\n        email: user.email,\n        name: user.name || '',\n        firstName: user.given_name || '',\n        lastName: user.family_name || '',\n        profileImageUrl: user.picture || '',\n        provider: 'auth0'\n      };\n      \n      // Check if user exists in database, create if not\n      let existingUser = await db.select().from(users).where(eq(users.email, user.email)).limit(1);\n      let dbUser;\n      \n      if (existingUser.length === 0) {\n        const [newUser] = await db.insert(users).values({\n          id: user.sub || crypto.randomUUID(),\n          email: user.email,\n          name: user.name || '',\n          firstName: user.given_name || '',\n          lastName: user.family_name || '',\n          profileImageUrl: user.picture || '',\n          provider: 'auth0'\n        }).returning();\n        dbUser = newUser;\n      } else {\n        dbUser = existingUser[0];\n      }\n      \n      // Migrate localStorage cart items to authenticated user's cart\n      if (localCartItems.length > 0 && dbUser) {\n        console.log(`Migrating ${localCartItems.length} localStorage cart items to authenticated user`);\n        \n        for (const localItem of localCartItems) {\n          try {\n            // Validate and add each item to the authenticated user's cart\n            const cartData = {\n              userId: dbUser.id,\n              productId: localItem.productId || localItem.id,\n              quantity: localItem.quantity || 1\n            };\n            \n            // Validate the cart item data\n            const validatedCartData = insertCartItemSchema.parse(cartData);\n            await storage.addToCart(validatedCartData);\n            \n            console.log(`Migrated item: ${cartData.productId} (qty: ${cartData.quantity})`);\n          } catch (itemError) {\n            console.error('Error migrating cart item:', itemError, localItem);\n            // Continue with other items even if one fails\n          }\n        }\n        \n        console.log('Cart migration completed');\n      }\n      \n      res.json(dbUser);\n    } catch (error) {\n      console.error('Auth sync error:', error);\n      res.status(500).json({ message: 'Failed to sync authentication' });\n    }\n  });\n\n  // Check authentication status\n  app.get('/api/auth/me', async (req, res) => {\n    try {      \n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Not authenticated' });\n      }\n\n      // Get complete user data from database\n      try {\n        const [dbUser] = await db.select().from(users).where(eq(users.email, user.email)).limit(1);\n        \n        if (dbUser) {\n          // Merge session data with database data\n          const completeUser = {\n            ...user,\n            name: dbUser.name || user.name,\n            phone: dbUser.phone || '',\n            address: dbUser.address || '',\n            firstName: dbUser.firstName || user.given_name,\n            lastName: dbUser.lastName || user.family_name,\n            profileImageUrl: dbUser.profileImageUrl || user.picture\n          };\n          \n          res.json(completeUser);\n        } else {\n          // Return session data if no database record\n          res.json(user);\n        }\n      } catch (dbError) {\n        console.error('Database error in auth/me:', dbError);\n        // Fallback to session data\n        res.json(user);\n      }\n    } catch (error) {\n      console.error('Auth me error:', error);\n      res.status(500).json({ message: 'Authentication error' });\n    }\n  });\n\n  // Update user profile\n  app.put('/api/auth/profile', async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { name, email, phone, address } = req.body;\n      \n      // Update user in database\n      await storage.upsertUser({\n        email: email || user.email,\n        name: name || user.name,\n        phone: phone || '',\n        address: address || '',\n        firstName: user.given_name || '',\n        lastName: user.family_name || '',\n        profileImageUrl: user.picture || '',\n        provider: user.provider || 'auth0'\n      });\n\n      // Update session data\n      (req as any).session.user = {\n        ...user,\n        name: name || user.name,\n        email: email || user.email,\n        phone: phone || '',\n        address: address || ''\n      };\n\n      res.json({ \n        success: true, \n        message: \"Profile updated successfully\",\n        user: (req as any).session.user\n      });\n    } catch (error) {\n      console.error('Profile update error:', error);\n      res.status(500).json({ message: 'Failed to update profile' });\n    }\n  });\n\n  // Categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid category data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create category\" });\n      }\n    }\n  });\n\n  // Subcategories\n  app.get(\"/api/subcategories\", async (req, res) => {\n    try {\n      const { categoryId } = req.query;\n      const subcategories = await storage.getSubcategories(categoryId as string);\n      res.json(subcategories);\n    } catch (error) {\n      console.error(\"Error fetching subcategories:\", error);\n      res.status(500).json({ message: \"Failed to fetch subcategories\" });\n    }\n  });\n\n  app.post(\"/api/subcategories\", async (req, res) => {\n    try {\n      const subcategoryData = insertSubcategorySchema.parse(req.body);\n      const subcategory = await storage.createSubcategory(subcategoryData);\n      res.json(subcategory);\n    } catch (error) {\n      console.error(\"Error creating subcategory:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid subcategory data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create subcategory\" });\n      }\n    }\n  });\n\n  // Products\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const { search, categoryId, subcategoryId, minPrice, maxPrice, featured, isDeal } = req.query;\n      const filters = {\n        search: search as string,\n        categoryId: categoryId as string,\n        subcategoryId: subcategoryId as string,\n        minPrice: minPrice ? Number(minPrice) : undefined,\n        maxPrice: maxPrice ? Number(maxPrice) : undefined,\n        featured: featured === 'true',\n        isDeal: isDeal === 'true',\n      };\n      \n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const products = await storage.getFeaturedProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching featured products:\", error);\n      res.status(500).json({ message: \"Failed to fetch featured products\" });\n    }\n  });\n\n  app.get(\"/api/products/deals\", async (req, res) => {\n    try {\n      const products = await storage.getDealProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching deal products:\", error);\n      res.status(500).json({ message: \"Failed to fetch deal products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create product\" });\n      }\n    }\n  });\n\n  // Image search endpoint\n  app.post(\"/api/products/search-by-image\", upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No image file provided\" });\n      }\n\n      console.log(\"Processing image search request...\");\n      \n      // Process the uploaded image using Sharp for analysis\n      const imageBuffer = req.file.buffer;\n      const imageMetadata = await sharp(imageBuffer).metadata();\n      \n      console.log(\"Image metadata:\", {\n        format: imageMetadata.format,\n        width: imageMetadata.width,\n        height: imageMetadata.height,\n        size: req.file.size\n      });\n\n      // For now, implement a simple similarity search based on product categories and features\n      // In a production system, you'd use AI/ML services like Google Vision API, AWS Rekognition, etc.\n      const similarProducts = await findSimilarProductsByImage(imageBuffer);\n      \n      console.log(`Found ${similarProducts.length} similar products`);\n      res.json(similarProducts);\n    } catch (error) {\n      console.error(\"Error processing image search:\", error);\n      res.status(500).json({ message: \"Failed to process image search\" });\n    }\n  });\n\n  // Cart operations - require authentication for persistent cart\n  app.get(\"/api/cart\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        // Get user from database first\n        const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n        if (dbUser) {\n          const cartItems = await storage.getCartItems(dbUser.id);\n          return res.json(cartItems);\n        }\n      }\n      // Return empty cart for non-authenticated users\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n        if (dbUser) {\n          const cartData = insertCartItemSchema.parse({ ...req.body, userId: dbUser.id });\n          const cartItem = await storage.addToCart(cartData);\n          return res.json(cartItem);\n        }\n      }\n      // For non-authenticated users, return success and let frontend handle localStorage\n      res.json({ success: true, message: \"Item added to cart\" });\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid cart data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to add to cart\" });\n      }\n    }\n  });\n\n  app.put(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        const { quantity } = req.body;\n        const cartItem = await storage.updateCartItem(req.params.id, quantity);\n        if (!cartItem) {\n          return res.status(404).json({ message: \"Cart item not found\" });\n        }\n        return res.json(cartItem);\n      }\n      // For non-authenticated users, return success and let frontend handle localStorage\n      res.json({ success: true, message: \"Cart item updated\" });\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        await storage.removeFromCart(req.params.id);\n        return res.json({ message: \"Item removed from cart\" });\n      }\n      // For non-authenticated users, return success and let frontend handle localStorage\n      res.json({ message: \"Item removed from cart\" });\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  // Wishlist operations - require authentication for persistent wishlist\n  app.get(\"/api/wishlist\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n        if (dbUser) {\n          const wishlistItems = await storage.getWishlistItems(dbUser.id);\n          return res.json(wishlistItems);\n        }\n      }\n      // Return empty wishlist for non-authenticated users\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n        if (dbUser) {\n          const wishlistData = insertWishlistItemSchema.parse({ ...req.body, userId: dbUser.id });\n          const wishlistItem = await storage.addToWishlist(wishlistData);\n          return res.json(wishlistItem);\n        }\n      }\n      // For non-authenticated users, return 401 to trigger frontend localStorage fallback\n      res.status(401).json({ message: \"Authentication required\" });\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid wishlist data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to add to wishlist\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/wishlist/:productId\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (user) {\n        const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n        if (dbUser) {\n          await storage.removeFromWishlist(dbUser.id, req.params.productId);\n          return res.json({ message: \"Item removed from wishlist\" });\n        }\n      }\n      // For non-authenticated users, return 401 to trigger frontend localStorage fallback  \n      res.status(401).json({ message: \"Authentication required\" });\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Protected checkout route - requires authentication\n  app.get(\"/checkout\", (req, res) => {\n    const user = (req as any).session?.user;\n    if (!user) {\n      // Redirect to home page - client-side Auth0 will handle authentication\n      return res.redirect('/?auth=required&returnTo=/checkout');\n    }\n    res.redirect('/?page=checkout');\n  });\n\n  // Helpdesk/Support endpoints  \n  app.post('/api/support/tickets', async (req, res) => {\n    try {\n      const { customerName, customerEmail, customerPhone, subject, message, priority = 'medium' } = req.body;\n      \n      if (!customerName || !customerEmail || !subject || !message) {\n        return res.status(400).json({ message: 'Missing required fields' });\n      }\n\n      // In a real implementation, this would save to a support ticket database\n      const ticketId = `TICKET-${Date.now()}`;\n      \n      const ticketData = {\n        ticketId,\n        customerName,\n        customerEmail,\n        subject: subject,\n        priority\n      };\n      \n      console.log('Support ticket created:', ticketData);\n\n      // Send confirmation email\n      try {\n        const emailParams = createSupportTicketConfirmationEmail(ticketData);\n        const emailSent = await sendEmail(emailParams);\n        \n        if (emailSent) {\n          console.log('Support ticket confirmation email sent to:', customerEmail);\n        } else {\n          console.log('Failed to send support ticket confirmation email');\n        }\n      } catch (emailError) {\n        console.error('Error sending support ticket confirmation email:', emailError);\n        // Don't fail the whole request if email fails\n      }\n\n      res.json({ \n        success: true, \n        ticketId,\n        message: 'Support ticket created successfully'\n      });\n    } catch (error) {\n      console.error('Error creating support ticket:', error);\n      res.status(500).json({ message: 'Failed to create support ticket' });\n    }\n  });\n\n  app.post('/api/helpdesk/chat', async (req, res) => {\n    try {\n      const { message, ticketId } = req.body;\n      const user = (req as any).session?.user;\n      \n      if (!message) {\n        return res.status(400).json({ message: 'Message is required' });\n      }\n\n      // In a real implementation, this would save to chat history and potentially notify support staff\n      const chatMessage = {\n        id: Date.now().toString(),\n        message,\n        sender: 'customer',\n        timestamp: new Date().toISOString(),\n        senderName: user?.name || user?.email || 'Customer'\n      };\n\n      console.log('Chat message sent:', chatMessage);\n\n      res.json(chatMessage);\n    } catch (error) {\n      console.error('Error sending chat message:', error);\n      res.status(500).json({ message: 'Failed to send message' });\n    }\n  });\n\n  app.get('/api/helpdesk/tickets', async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      // In a real implementation, this would fetch from database\n      // For now, return empty array\n      res.json([]);\n    } catch (error) {\n      console.error('Error fetching tickets:', error);\n      res.status(500).json({ message: 'Failed to fetch tickets' });\n    }\n  });\n\n  // Appointment booking endpoints\n  app.post('/api/appointments', async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n\n      const { \n        customerName, \n        customerEmail, \n        customerPhone, \n        appointmentDate, \n        appointmentTime,\n        meetingType = 'virtual_showroom',\n        notes,\n        date,\n        time,\n        type \n      } = req.body;\n\n      // Handle both old and new format\n      const finalDate = date || appointmentDate;\n      const finalTime = time || appointmentTime;\n      const finalType = type || meetingType;\n\n      if (!customerName || !customerEmail || !finalDate || !finalTime) {\n        return res.status(400).json({ message: 'Missing required fields' });\n      }\n\n      const appointmentId = `APT-${Date.now()}`;\n      \n      // In a real implementation, this would save to database\n      const appointment = {\n        id: appointmentId,\n        customerName,\n        customerEmail,\n        customerPhone: customerPhone || '',\n        date: finalDate,\n        time: finalTime,\n        type: finalType,\n        status: 'scheduled',\n        notes: notes || '',\n        createdAt: new Date().toISOString(),\n        userId: user?.id || 'guest'\n      };\n\n      console.log('Appointment booked:', appointment);\n\n      // Send confirmation email\n      try {\n        const emailParams = createAppointmentConfirmationEmail(appointment);\n        const emailSent = await sendEmail(emailParams);\n        \n        if (emailSent) {\n          console.log('Appointment confirmation email sent to:', customerEmail);\n        } else {\n          console.log('Failed to send appointment confirmation email');\n        }\n      } catch (emailError) {\n        console.error('Error sending appointment confirmation email:', emailError);\n        // Don't fail the whole request if email fails\n      }\n\n      res.json(appointment);\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n      res.status(500).json({ message: 'Failed to book appointment' });\n    }\n  });\n\n  app.get('/api/appointments', async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      // In a real implementation, this would fetch from database\n      // For now, return empty array\n      res.json([]);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      res.status(500).json({ message: 'Failed to fetch appointments' });\n    }\n  });\n\n  // Video call endpoints\n  app.post('/api/video-call/start', async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      const { appointmentId } = req.body;\n      \n      // In a real implementation, this would:\n      // 1. Validate the appointment\n      // 2. Generate WebRTC connection details\n      // 3. Notify the shop owner\n      \n      const sessionId = `VIDEO-${Date.now()}`;\n      \n      console.log('Video call started:', {\n        sessionId,\n        appointmentId,\n        customer: user.name || user.email\n      });\n\n      res.json({\n        success: true,\n        sessionId,\n        message: 'Video call session started'\n      });\n    } catch (error) {\n      console.error('Error starting video call:', error);\n      res.status(500).json({ message: 'Failed to start video call' });\n    }\n  });\n\n  // Orders - require authentication\n  \n  // GET orders for authenticated user\n  app.get(\"/api/orders\", async (req, res) => {\n    const user = (req as any).session?.user;\n    if (!user) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    \n    try {\n      const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n      if (!dbUser) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      const orders = await storage.getOrders(dbUser.id);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Get a specific order by ID\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const order = await storage.getOrder(id);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  // POST new order\n  app.post(\"/api/orders\", async (req, res) => {\n    const user = (req as any).session?.user;\n    if (!user) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n    \n    try {\n      const [dbUser] = await db.select().from(users).where(eq(users.email, user?.email || ''));\n      if (!dbUser) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      // Extract order items from request body\n      const { orderItems: orderItemsData, ...orderData } = req.body;\n      \n      // Create the main order\n      const orderToCreate = insertOrderSchema.parse({ ...orderData, userId: dbUser.id });\n      const order = await storage.createOrder(orderToCreate);\n      \n      // Create order items if they exist\n      if (orderItemsData && orderItemsData.length > 0) {\n        const orderItems = orderItemsData.map((item: any) => ({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          price: item.price\n        }));\n        \n        await storage.addOrderItems(orderItems);\n      }\n      \n      // Clear the user's cart after successful order creation\n      await storage.clearCart(dbUser.id);\n      \n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create order\" });\n      }\n    }\n  });\n\n  // Razorpay configuration endpoint\n  app.get(\"/api/payment/config\", (req, res) => {\n    try {\n      const keyId = process.env.RAZORPAY_TEST_KEY_ID || process.env.RAZORPAY_KEY_ID;\n      if (!keyId) {\n        return res.status(500).json({ message: \"Razorpay not configured\" });\n      }\n      res.json({ \n        key: keyId,\n        enabled: !!razorpay \n      });\n    } catch (error) {\n      console.error(\"Error fetching payment config:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment configuration\" });\n    }\n  });\n\n  // Razorpay API routes\n  app.post(\"/api/create-razorpay-order\", async (req, res) => {\n    try {\n      if (!razorpay) {\n        return res.status(500).json({ message: \"Razorpay not configured\" });\n      }\n\n      const { amount, currency = 'INR' } = req.body;\n      \n      const options = {\n        amount: amount * 100, // Razorpay expects amount in paise\n        currency,\n        receipt: `order_${Date.now()}`,\n      };\n\n      const order = await razorpay.orders.create(options);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating Razorpay order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  app.post(\"/api/verify-razorpay-payment\", async (req, res) => {\n    try {\n      const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\n      \n      const sign = razorpay_order_id + \"|\" + razorpay_payment_id;\n      const expectedSign = crypto\n        .createHmac(\"sha256\", process.env.RAZORPAY_KEY_SECRET!)\n        .update(sign.toString())\n        .digest(\"hex\");\n\n      if (razorpay_signature === expectedSign) {\n        res.json({ success: true, message: \"Payment verified successfully\" });\n      } else {\n        res.status(400).json({ success: false, message: \"Invalid signature\" });\n      }\n    } catch (error) {\n      console.error(\"Error verifying payment:\", error);\n      res.status(500).json({ message: \"Payment verification failed\" });\n    }\n  });\n\n  // Contact form\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactData = insertContactInquirySchema.parse(req.body);\n      const inquiry = await storage.createContactInquiry(contactData);\n      \n      // Send email notification to owner\n      try {\n        const { createContactInquiryNotificationEmail, sendEmail } = await import(\"./email-service\");\n        const emailData = createContactInquiryNotificationEmail(inquiry);\n        const emailSent = await sendEmail(emailData);\n        \n        if (emailSent) {\n          console.log(`Email notification sent to owner for inquiry ${inquiry.id}`);\n        } else {\n          console.log(`Email notification failed for inquiry ${inquiry.id} (SendGrid may not be configured)`);\n        }\n      } catch (emailError) {\n        console.error(\"Error sending owner notification email:\", emailError);\n        // Don't fail the API call if email fails - inquiry is still saved\n      }\n      \n      res.json(inquiry);\n    } catch (error) {\n      console.error(\"Error creating contact inquiry:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid contact data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create contact inquiry\" });\n      }\n    }\n  });\n\n  // Product Reviews\n  app.get(\"/api/products/:productId/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getProductReviews(req.params.productId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching product reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch product reviews\" });\n    }\n  });\n\n  // Upload review images\n  app.post(\"/api/products/:productId/reviews/upload-images\", upload.array('images', 5), async (req, res) => {\n    try {\n      const files = req.files as Express.Multer.File[];\n      if (!files || files.length === 0) {\n        return res.status(400).json({ message: \"No images uploaded\" });\n      }\n\n      // Create reviews-images directory if it doesn't exist\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      const uploadsDir = path.join(process.cwd(), 'public', 'uploads', 'reviews');\n      \n      try {\n        await fs.access(uploadsDir);\n      } catch {\n        await fs.mkdir(uploadsDir, { recursive: true });\n      }\n\n      const imageUrls: string[] = [];\n\n      // Save each uploaded image\n      for (const file of files) {\n        const filename = `review_${Date.now()}_${Math.random().toString(36).substring(2, 15)}.${file.mimetype.split('/')[1]}`;\n        const filepath = path.join(uploadsDir, filename);\n        \n        await fs.writeFile(filepath, file.buffer);\n        imageUrls.push(`/uploads/reviews/${filename}`);\n      }\n\n      // Store image metadata in JSON file for backup/reference\n      const metadataFile = path.join(uploadsDir, 'images_metadata.json');\n      let metadata = [];\n      \n      try {\n        const existingMetadata = await fs.readFile(metadataFile, 'utf-8');\n        metadata = JSON.parse(existingMetadata);\n      } catch {\n        // File doesn't exist yet, start with empty array\n      }\n\n      // Add new image metadata\n      metadata.push({\n        productId: req.params.productId,\n        uploadedAt: new Date().toISOString(),\n        images: imageUrls\n      });\n\n      await fs.writeFile(metadataFile, JSON.stringify(metadata, null, 2));\n      \n      res.json({ imageUrls });\n    } catch (error) {\n      console.error(\"Error uploading review images:\", error);\n      res.status(500).json({ message: \"Failed to upload images\" });\n    }\n  });\n\n  app.post(\"/api/products/:productId/reviews\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      const reviewData = insertProductReviewSchema.parse({\n        ...req.body,\n        productId: req.params.productId,\n        userId: user?.id || null,\n      });\n      \n      const review = await storage.createProductReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating product review:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid review data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create product review\" });\n      }\n    }\n  });\n\n  // Product Q&A\n  app.get(\"/api/products/:productId/questions\", async (req, res) => {\n    try {\n      const questions = await storage.getProductQuestions(req.params.productId);\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching product questions:\", error);\n      res.status(500).json({ message: \"Failed to fetch product questions\" });\n    }\n  });\n\n  app.post(\"/api/products/:productId/questions\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      const questionData = insertProductQuestionSchema.parse({\n        ...req.body,\n        productId: req.params.productId,\n        userId: user?.id || null,\n      });\n      \n      const question = await storage.createProductQuestion(questionData);\n      res.json(question);\n    } catch (error) {\n      console.error(\"Error creating product question:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid question data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create product question\" });\n      }\n    }\n  });\n\n  // Update product question (for owners to add answers)\n  app.put(\"/api/products/questions/:questionId\", async (req, res) => {\n    try {\n      const questionData = req.body;\n      const question = await storage.updateProductQuestion(req.params.questionId, {\n        ...questionData,\n        answeredAt: questionData.answer ? new Date() : undefined\n      });\n      \n      if (!question) {\n        return res.status(404).json({ message: \"Question not found\" });\n      }\n      \n      res.json(question);\n    } catch (error) {\n      console.error(\"Error updating product question:\", error);\n      res.status(500).json({ message: \"Failed to update product question\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":43744},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { categories, products, subcategories } from \"@shared/schema\";\nimport { count } from \"drizzle-orm\";\n\nexport async function checkAndSeed() {\n  try {\n    // Check if categories already exist\n    const [categoryCount] = await db.select({ count: count() }).from(categories);\n    \n    if (categoryCount.count > 0) {\n      console.log(`Database already seeded with ${categoryCount.count} categories`);\n      return;\n    }\n    \n    console.log(\"Database is empty, seeding with categories and products...\");\n    await seed();\n  } catch (error) {\n    console.error(\"Error checking/seeding database:\", error);\n  }\n}\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Insert categories\n  const categoryData = [\n    { name: \"Dining Tables\", description: \"Premium teak dining tables for your family\" },\n    { name: \"Chairs\", description: \"Comfortable and elegant teak chairs\" },\n    { name: \"Wardrobes\", description: \"Spacious teak wardrobes for storage\" },\n    { name: \"Beds\", description: \"Luxurious teak beds for ultimate comfort\" },\n    { name: \"Sofas\", description: \"Stylish teak sofas for your living room\" },\n    { name: \"Cabinets\", description: \"Functional teak cabinets for organization\" },\n  ];\n\n  const insertedCategories = await db.insert(categories).values(categoryData).returning();\n  console.log(\"Categories inserted:\", insertedCategories.length);\n\n  // Insert subcategories for each category\n  const subcategoryData = [\n    // Dining Tables subcategories\n    { name: \"4-Seater Tables\", categoryId: insertedCategories[0].id, description: \"Perfect for small families\" },\n    { name: \"6-Seater Tables\", categoryId: insertedCategories[0].id, description: \"Ideal for medium families\" },\n    { name: \"8-Seater Tables\", categoryId: insertedCategories[0].id, description: \"Great for large families\" },\n    { name: \"Round Tables\", categoryId: insertedCategories[0].id, description: \"Classic round dining tables\" },\n    { name: \"Rectangular Tables\", categoryId: insertedCategories[0].id, description: \"Traditional rectangular designs\" },\n\n    // Chairs subcategories\n    { name: \"Dining Chairs\", categoryId: insertedCategories[1].id, description: \"Comfortable dining chairs\" },\n    { name: \"Office Chairs\", categoryId: insertedCategories[1].id, description: \"Ergonomic office chairs\" },\n    { name: \"Lounge Chairs\", categoryId: insertedCategories[1].id, description: \"Relaxing lounge chairs\" },\n    { name: \"Bar Stools\", categoryId: insertedCategories[1].id, description: \"Stylish bar stools\" },\n    { name: \"Rocking Chairs\", categoryId: insertedCategories[1].id, description: \"Traditional rocking chairs\" },\n\n    // Wardrobes subcategories\n    { name: \"2-Door Wardrobes\", categoryId: insertedCategories[2].id, description: \"Compact 2-door designs\" },\n    { name: \"3-Door Wardrobes\", categoryId: insertedCategories[2].id, description: \"Medium 3-door wardrobes\" },\n    { name: \"4-Door Wardrobes\", categoryId: insertedCategories[2].id, description: \"Large 4-door wardrobes\" },\n    { name: \"Walk-in Closets\", categoryId: insertedCategories[2].id, description: \"Luxury walk-in wardrobes\" },\n    { name: \"Kids Wardrobes\", categoryId: insertedCategories[2].id, description: \"Child-friendly designs\" },\n\n    // Beds subcategories\n    { name: \"Single Beds\", categoryId: insertedCategories[3].id, description: \"Compact single beds\" },\n    { name: \"Double Beds\", categoryId: insertedCategories[3].id, description: \"Comfortable double beds\" },\n    { name: \"Queen Size\", categoryId: insertedCategories[3].id, description: \"Spacious queen beds\" },\n    { name: \"King Size\", categoryId: insertedCategories[3].id, description: \"Luxurious king beds\" },\n    { name: \"Storage Beds\", categoryId: insertedCategories[3].id, description: \"Beds with storage\" },\n\n    // Sofas subcategories\n    { name: \"2-Seater Sofas\", categoryId: insertedCategories[4].id, description: \"Compact 2-seater sofas\" },\n    { name: \"3-Seater Sofas\", categoryId: insertedCategories[4].id, description: \"Standard 3-seater sofas\" },\n    { name: \"L-Shaped Sofas\", categoryId: insertedCategories[4].id, description: \"Corner L-shaped sofas\" },\n    { name: \"Sectional Sofas\", categoryId: insertedCategories[4].id, description: \"Modular sectional sofas\" },\n    { name: \"Recliners\", categoryId: insertedCategories[4].id, description: \"Comfortable recliner chairs\" },\n\n    // Cabinets subcategories\n    { name: \"TV Units\", categoryId: insertedCategories[5].id, description: \"Entertainment TV units\" },\n    { name: \"Pooja Ghar\", categoryId: insertedCategories[5].id, description: \"Traditional prayer units\" },\n    { name: \"Storage Cabinets\", categoryId: insertedCategories[5].id, description: \"General storage cabinets\" },\n    { name: \"Display Units\", categoryId: insertedCategories[5].id, description: \"Decorative display cabinets\" },\n    { name: \"Kitchen Cabinets\", categoryId: insertedCategories[5].id, description: \"Kitchen storage solutions\" },\n  ];\n\n  const insertedSubcategories = await db.insert(subcategories).values(subcategoryData).returning();\n  console.log(\"Subcategories inserted:\", insertedSubcategories.length);\n\n  // Insert products using local images\n  const productData = [\n    // Featured Teak Furniture Products\n    {\n      name: \"Royal Maharaja Dining Table\",\n      description: \"Exquisite 8-seater solid teak dining table with hand-carved traditional motifs and brass inlays\",\n      price: \"75000\",\n      originalPrice: \"95000\",\n      categoryId: insertedCategories[0].id,\n      imageUrl: \"/images/dining-table.webp\",\n      featured: true,\n      inStock: true,\n      stock: 3,\n    },\n    {\n      name: \"Premium Teak Chair Set\",\n      description: \"Elegant set of 6 solid teak dining chairs with traditional design and comfortable cushioning\",\n      price: \"48000\",\n      originalPrice: \"62000\",\n      categoryId: insertedCategories[1].id,\n      imageUrl: \"/images/chair-set.jpg\",\n      featured: true,\n      inStock: true,\n      stock: 8,\n    },\n    {\n      name: \"Emperor Teak Wardrobe\",\n      description: \"Magnificent 4-door solid teak wardrobe with mirror, drawers and premium brass fittings\",\n      price: \"85000\",\n      originalPrice: \"110000\",\n      categoryId: insertedCategories[2].id,\n      imageUrl: \"/images/wardrobe.webp\",\n      featured: true,\n      inStock: true,\n      stock: 2,\n    },\n    {\n      name: \"Royal King Size Teak Bed\",\n      description: \"Luxurious king size solid teak bed with storage compartments and intricate headboard design\",\n      price: \"95000\",\n      originalPrice: \"125000\",\n      categoryId: insertedCategories[3].id,\n      imageUrl: \"/images/bed.jpg\",\n      featured: true,\n      inStock: true,\n      stock: 2,\n    },\n    {\n      name: \"Imperial Teak Sofa\",\n      description: \"Elegant solid teak sofa with premium fabric upholstery and traditional design\",\n      price: \"85000\",\n      originalPrice: \"105000\",\n      categoryId: insertedCategories[4].id,\n      imageUrl: \"/images/sofa.jpg\",\n      featured: true,\n      inStock: true,\n      stock: 3,\n    },\n    {\n      name: \"Heritage Teak Pooja Ghar\",\n      description: \"Traditional solid teak pooja mandir with intricate carvings and storage compartments\",\n      price: \"58000\",\n      originalPrice: \"72000\",\n      categoryId: insertedCategories[5].id,\n      imageUrl: \"/images/pooja-ghar.jpg\",\n      featured: true,\n      inStock: true,\n      stock: 5,\n    },\n\n    // ₹1 Deal Products - Flash Sales\n    {\n      name: \"Modern Teak Chairs - Flash Deal\",\n      description: \"Set of 2 modern solid teak chairs with ergonomic design - Limited time ₹1 deal!\",\n      price: \"25000\",\n      originalPrice: \"32000\",\n      dealPrice: \"1\",\n      categoryId: insertedCategories[1].id,\n      imageUrl: \"/images/modern-chairs.webp\",\n      isDeal: true,\n      dealExpiry: new Date(Date.now() + 86400000), // 24 hours from now\n      inStock: true,\n      stock: 15,\n    },\n    {\n      name: \"Teak Temple - ₹1 Deal\",\n      description: \"Beautiful solid teak temple for home worship - Incredible ₹1 flash sale!\",\n      price: \"35000\",\n      originalPrice: \"45000\",\n      dealPrice: \"1\",\n      categoryId: insertedCategories[5].id,\n      imageUrl: \"/images/temple-pooja.jpg\",\n      isDeal: true,\n      dealExpiry: new Date(Date.now() + 86400000), // 24 hours from now\n      inStock: true,\n      stock: 8,\n    },\n    {\n      name: \"Traditional Jhula - Flash Sale\",\n      description: \"Handcrafted solid teak jhula swing for garden or porch - Unbelievable ₹1 deal!\",\n      price: \"45000\",\n      originalPrice: \"58000\",\n      dealPrice: \"1\",\n      categoryId: insertedCategories[4].id,\n      imageUrl: \"/images/jhula.jpg\",\n      isDeal: true,\n      dealExpiry: new Date(Date.now() + 86400000), // 24 hours from now\n      inStock: true,\n      stock: 12,\n    },\n\n    // Regular Teak Furniture Products\n    {\n      name: \"Complete Living Room Set\",\n      description: \"Comprehensive solid teak living room furniture set including sofa, center table, and side tables\",\n      price: \"185000\",\n      originalPrice: \"225000\",\n      categoryId: insertedCategories[4].id,\n      imageUrl: \"/images/living-room-set.jpg\",\n      inStock: true,\n      stock: 2,\n    },\n    {\n      name: \"Classic Teak Dining Table\",\n      description: \"Spacious 6-seater solid teak dining table perfect for family meals and gatherings\",\n      price: \"55000\",\n      originalPrice: \"68000\",\n      categoryId: insertedCategories[0].id,\n      imageUrl: \"/images/dining-table.webp\",\n      inStock: true,\n      stock: 6,\n    },\n    {\n      name: \"Ergonomic Chair Set of 4\",\n      description: \"Set of 4 comfortable solid teak chairs with ergonomic design for dining or office use\",\n      price: \"32000\",\n      originalPrice: \"40000\",\n      categoryId: insertedCategories[1].id,\n      imageUrl: \"/images/chair-set.jpg\",\n      inStock: true,\n      stock: 10,\n    },\n    {\n      name: \"Spacious Teak Wardrobe\",\n      description: \"Large solid teak wardrobe with multiple compartments, hanging space, and mirror\",\n      price: \"72000\",\n      originalPrice: \"88000\",\n      categoryId: insertedCategories[2].id,\n      imageUrl: \"/images/wardrobe.webp\",\n      inStock: true,\n      stock: 4,\n    },\n    {\n      name: \"Queen Size Teak Bed\",\n      description: \"Elegant queen size solid teak bed with modern design and storage options\",\n      price: \"68000\",\n      originalPrice: \"82000\",\n      categoryId: insertedCategories[3].id,\n      imageUrl: \"/images/bed.jpg\",\n      inStock: true,\n      stock: 5,\n    },\n    {\n      name: \"Comfortable Teak Sofa\",\n      description: \"Premium 3-seater solid teak sofa with high-quality fabric upholstery\",\n      price: \"65000\",\n      originalPrice: \"78000\",\n      categoryId: insertedCategories[4].id,\n      imageUrl: \"/images/sofa.jpg\",\n      inStock: true,\n      stock: 7,\n    },\n    {\n      name: \"Traditional Pooja Cabinet\",\n      description: \"Compact solid teak pooja cabinet with traditional carvings and storage\",\n      price: \"38000\",\n      originalPrice: \"48000\",\n      categoryId: insertedCategories[5].id,\n      imageUrl: \"/images/pooja-ghar.jpg\",\n      inStock: true,\n      stock: 12,\n    },\n    {\n      name: \"Modern Designer Chairs\",\n      description: \"Contemporary solid teak chairs with sleek design perfect for modern homes\",\n      price: \"28000\",\n      originalPrice: \"35000\",\n      categoryId: insertedCategories[1].id,\n      imageUrl: \"/images/modern-chairs.webp\",\n      inStock: true,\n      stock: 15,\n    },\n    {\n      name: \"Garden Teak Jhula\",\n      description: \"Beautiful handcrafted solid teak swing perfect for garden or balcony relaxation\",\n      price: \"42000\",\n      originalPrice: \"52000\",\n      categoryId: insertedCategories[4].id,\n      imageUrl: \"/images/jhula.jpg\",\n      inStock: true,\n      stock: 8,\n    },\n    {\n      name: \"Sacred Temple Unit\",\n      description: \"Elegant solid teak temple with intricate religious carvings and multiple shelves\",\n      price: \"48000\",\n      originalPrice: \"58000\",\n      categoryId: insertedCategories[5].id,\n      imageUrl: \"/images/temple-pooja.jpg\",\n      inStock: true,\n      stock: 6,\n    }\n  ];\n\n  const insertedProducts = await db.insert(products).values(productData).returning();\n  console.log(\"Products inserted:\", insertedProducts.length);\n\n  console.log(\"Database seeded successfully!\");\n}\n\n// Removed direct seed() call - use checkAndSeed() instead to prevent duplicates","size_bytes":12348},"server/storage.ts":{"content":"import {\n  users,\n  products,\n  categories,\n  subcategories,\n  cartItems,\n  wishlistItems,\n  orders,\n  orderItems,\n  contactInquiries,\n  productReviews,\n  productQuestions,\n  type User,\n  type UpsertUser,\n  type Product,\n  type InsertProduct,\n  type Category,\n  type InsertCategory,\n  type Subcategory,\n  type InsertSubcategory,\n  type CartItem,\n  type InsertCartItem,\n  type WishlistItem,\n  type InsertWishlistItem,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type ContactInquiry,\n  type InsertContactInquiry,\n  type ProductReview,\n  type InsertProductReview,\n  type ProductQuestion,\n  type InsertProductQuestion,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  createUser(user: User): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Subcategory operations\n  getSubcategories(categoryId?: string): Promise<Subcategory[]>;\n  createSubcategory(subcategory: InsertSubcategory): Promise<Subcategory>;\n  \n  // Product operations\n  getProducts(filters?: {\n    search?: string;\n    categoryId?: string;\n    subcategoryId?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    featured?: boolean;\n    isDeal?: boolean;\n  }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getFeaturedProducts(): Promise<Product[]>;\n  getDealProducts(): Promise<Product[]>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  \n  // Cart operations\n  getCartItems(userId: string): Promise<(CartItem & { product: Product })[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n  \n  // Wishlist operations\n  getWishlistItems(userId: string): Promise<(WishlistItem & { product: Product })[]>;\n  addToWishlist(item: InsertWishlistItem): Promise<WishlistItem>;\n  removeFromWishlist(userId: string, productId: string): Promise<void>;\n  \n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  addOrderItems(orderItems: InsertOrderItem[]): Promise<OrderItem[]>;\n  getOrders(userId: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] })[]>;\n  getOrder(id: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] }) | undefined>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  \n  // Contact operations\n  createContactInquiry(inquiry: InsertContactInquiry): Promise<ContactInquiry>;\n  \n  // Review operations\n  getProductReviews(productId: string): Promise<ProductReview[]>;\n  createProductReview(review: InsertProductReview): Promise<ProductReview>;\n  \n  // Q&A operations\n  getProductQuestions(productId: string): Promise<ProductQuestion[]>;\n  createProductQuestion(question: InsertProductQuestion): Promise<ProductQuestion>;\n  updateProductQuestion(id: string, data: Partial<ProductQuestion>): Promise<ProductQuestion | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async createUser(userData: User): Promise<User> {\n    const [user] = await db.insert(users).values({\n      id: userData.id,\n      email: userData.email,\n      name: userData.name || '',\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      profileImageUrl: userData.profileImageUrl,\n      passwordHash: 'guest',\n      provider: userData.provider,\n    }).returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values([{\n        id: crypto.randomUUID(),\n        ...userData,\n      }])\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(asc(categories.name));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [created] = await db.insert(categories).values(category).returning();\n    return created;\n  }\n\n  // Subcategory operations\n  async getSubcategories(categoryId?: string): Promise<Subcategory[]> {\n    let query = db.select().from(subcategories);\n    if (categoryId) {\n      query = query.where(eq(subcategories.categoryId, categoryId)) as any;\n    }\n    return await query.orderBy(asc(subcategories.name));\n  }\n\n  async createSubcategory(subcategory: InsertSubcategory): Promise<Subcategory> {\n    const [created] = await db.insert(subcategories).values(subcategory).returning();\n    return created;\n  }\n\n  // Product operations\n  async getProducts(filters?: {\n    search?: string;\n    categoryId?: string;\n    subcategoryId?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    featured?: boolean;\n    isDeal?: boolean;\n  }): Promise<Product[]> {\n    let query = db.select().from(products);\n    const conditions = [];\n\n    if (filters?.search) {\n      conditions.push(ilike(products.name, `%${filters.search}%`));\n    }\n    if (filters?.categoryId) {\n      conditions.push(eq(products.categoryId, filters.categoryId));\n    }\n    if (filters?.subcategoryId) {\n      conditions.push(eq(products.subcategoryId, filters.subcategoryId));\n    }\n    if (filters?.minPrice) {\n      conditions.push(sql`${products.price} >= ${filters.minPrice}`);\n    }\n    if (filters?.maxPrice) {\n      conditions.push(sql`${products.price} <= ${filters.maxPrice}`);\n    }\n    if (filters?.featured !== undefined) {\n      conditions.push(eq(products.featured, filters.featured));\n    }\n    if (filters?.isDeal !== undefined) {\n      conditions.push(eq(products.isDeal, filters.isDeal));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    return await query.orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product;\n  }\n\n  async getFeaturedProducts(): Promise<Product[]> {\n    return await db.select().from(products)\n      .where(eq(products.featured, true))\n      .orderBy(desc(products.createdAt))\n      .limit(6);\n  }\n\n  async getDealProducts(): Promise<Product[]> {\n    return await db.select().from(products)\n      .where(and(\n        eq(products.isDeal, true),\n        sql`${products.dealExpiry} > NOW()`\n      ))\n      .orderBy(desc(products.createdAt));\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [created] = await db.insert(products).values(product).returning();\n    return created;\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<(CartItem & { product: Product })[]> {\n    return await db.select({\n      id: cartItems.id,\n      userId: cartItems.userId,\n      productId: cartItems.productId,\n      quantity: cartItems.quantity,\n      createdAt: cartItems.createdAt,\n      product: products,\n    })\n    .from(cartItems)\n    .innerJoin(products, eq(cartItems.productId, products.id))\n    .where(eq(cartItems.userId, userId))\n    .orderBy(desc(cartItems.createdAt));\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists\n    const [existing] = await db.select().from(cartItems)\n      .where(and(\n        eq(cartItems.userId, item.userId),\n        eq(cartItems.productId, item.productId)\n      ));\n\n    if (existing) {\n      // Update quantity\n      const [updated] = await db.update(cartItems)\n        .set({ quantity: (existing.quantity || 0) + (item.quantity || 1) })\n        .where(eq(cartItems.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new item\n      const [created] = await db.insert(cartItems).values(item).returning();\n      return created;\n    }\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const [updated] = await db.update(cartItems)\n      .set({ quantity })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async removeFromCart(id: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.id, id));\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  // Wishlist operations\n  async getWishlistItems(userId: string): Promise<(WishlistItem & { product: Product })[]> {\n    return await db.select({\n      id: wishlistItems.id,\n      userId: wishlistItems.userId,\n      productId: wishlistItems.productId,\n      createdAt: wishlistItems.createdAt,\n      product: products,\n    })\n    .from(wishlistItems)\n    .innerJoin(products, eq(wishlistItems.productId, products.id))\n    .where(eq(wishlistItems.userId, userId))\n    .orderBy(desc(wishlistItems.createdAt));\n  }\n\n  async addToWishlist(item: InsertWishlistItem): Promise<WishlistItem> {\n    // Check if item already exists\n    const [existing] = await db.select().from(wishlistItems)\n      .where(and(\n        eq(wishlistItems.userId, item.userId),\n        eq(wishlistItems.productId, item.productId)\n      ));\n\n    if (existing) {\n      return existing;\n    }\n\n    const [created] = await db.insert(wishlistItems).values(item).returning();\n    return created;\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<void> {\n    await db.delete(wishlistItems)\n      .where(and(\n        eq(wishlistItems.userId, userId),\n        eq(wishlistItems.productId, productId)\n      ));\n  }\n\n  // Order operations\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [created] = await db.insert(orders).values(order).returning();\n    return created;\n  }\n\n  async addOrderItems(orderItemsData: InsertOrderItem[]): Promise<OrderItem[]> {\n    return await db.insert(orderItems).values(orderItemsData).returning();\n  }\n\n  async getOrders(userId: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] })[]> {\n    const userOrders = await db.select().from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n\n    const ordersWithItems = await Promise.all(\n      userOrders.map(async (order) => {\n        const items = await db.select({\n          id: orderItems.id,\n          orderId: orderItems.orderId,\n          productId: orderItems.productId,\n          quantity: orderItems.quantity,\n          price: orderItems.price,\n          createdAt: orderItems.createdAt,\n          product: products,\n        })\n        .from(orderItems)\n        .innerJoin(products, eq(orderItems.productId, products.id))\n        .where(eq(orderItems.orderId, order.id));\n\n        return { ...order, orderItems: items };\n      })\n    );\n\n    return ordersWithItems;\n  }\n\n  async getOrder(id: string): Promise<(Order & { orderItems: (OrderItem & { product: Product })[] }) | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    if (!order) return undefined;\n\n    const items = await db.select({\n      id: orderItems.id,\n      orderId: orderItems.orderId,\n      productId: orderItems.productId,\n      quantity: orderItems.quantity,\n      price: orderItems.price,\n      createdAt: orderItems.createdAt,\n      product: products,\n    })\n    .from(orderItems)\n    .innerJoin(products, eq(orderItems.productId, products.id))\n    .where(eq(orderItems.orderId, order.id));\n\n    return { ...order, orderItems: items };\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const [updated] = await db.update(orders)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Contact operations\n  async createContactInquiry(inquiry: InsertContactInquiry): Promise<ContactInquiry> {\n    const [created] = await db.insert(contactInquiries).values(inquiry).returning();\n    return created;\n  }\n\n  // Review operations\n  async getProductReviews(productId: string): Promise<ProductReview[]> {\n    return await db.select()\n      .from(productReviews)\n      .where(eq(productReviews.productId, productId))\n      .orderBy(desc(productReviews.createdAt));\n  }\n\n  async createProductReview(review: InsertProductReview): Promise<ProductReview> {\n    const [created] = await db.insert(productReviews).values(review).returning();\n    return created;\n  }\n\n  // Q&A operations\n  async getProductQuestions(productId: string): Promise<ProductQuestion[]> {\n    return await db.select()\n      .from(productQuestions)\n      .where(and(\n        eq(productQuestions.productId, productId),\n        eq(productQuestions.isPublic, true)\n      ))\n      .orderBy(desc(productQuestions.createdAt));\n  }\n\n  async createProductQuestion(question: InsertProductQuestion): Promise<ProductQuestion> {\n    const [created] = await db.insert(productQuestions).values(question).returning();\n    return created;\n  }\n\n  async updateProductQuestion(id: string, data: Partial<ProductQuestion>): Promise<ProductQuestion | undefined> {\n    const [updated] = await db.update(productQuestions)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(productQuestions.id, id))\n      .returning();\n    return updated;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13735},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { \n  pgTable, \n  varchar, \n  text, \n  integer, \n  decimal, \n  timestamp, \n  boolean,\n  jsonb,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table with auth fields\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\").unique().notNull(),\n  name: varchar(\"name\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  passwordHash: varchar(\"password_hash\"),\n  provider: varchar(\"provider\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Subcategories table\nexport const subcategories = pgTable(\"subcategories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id).notNull(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  subcategoryId: varchar(\"subcategory_id\").references(() => subcategories.id),\n  imageUrl: varchar(\"image_url\"),\n  images: text(\"images\").array(),\n  inStock: boolean(\"in_stock\").default(true),\n  stock: integer(\"stock\").default(0),\n  featured: boolean(\"featured\").default(false),\n  isDeal: boolean(\"is_deal\").default(false),\n  dealPrice: decimal(\"deal_price\", { precision: 10, scale: 2 }),\n  dealExpiry: timestamp(\"deal_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cart items table\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Wishlist items table\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, processing, shipped, delivered, cancelled\n  paymentId: varchar(\"payment_id\"),\n  paymentStatus: varchar(\"payment_status\").default(\"pending\"),\n  paymentMethod: varchar(\"payment_method\"), // upi, card, netbanking, wallet, qr, cod\n  razorpayOrderId: varchar(\"razorpay_order_id\"),\n  razorpayPaymentId: varchar(\"razorpay_payment_id\"),\n  razorpaySignature: varchar(\"razorpay_signature\"),\n  customerName: varchar(\"customer_name\").notNull(),\n  customerPhone: varchar(\"customer_phone\").notNull(),\n  customerEmail: varchar(\"customer_email\"),\n  shippingAddress: text(\"shipping_address\").notNull(),\n  pincode: varchar(\"pincode\").notNull(),\n  trackingId: varchar(\"tracking_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Support tickets table for helpdesk\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  customerName: varchar(\"customer_name\").notNull(),\n  customerEmail: varchar(\"customer_email\").notNull(),\n  customerPhone: varchar(\"customer_phone\"),\n  subject: varchar(\"subject\").notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\").default(\"open\"), // open, in_progress, resolved, closed\n  priority: varchar(\"priority\").default(\"medium\"), // low, medium, high, urgent\n  assignedTo: varchar(\"assigned_to\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Appointments table for virtual meetings\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  customerName: varchar(\"customer_name\").notNull(),\n  customerEmail: varchar(\"customer_email\").notNull(),\n  customerPhone: varchar(\"customer_phone\").notNull(),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  duration: integer(\"duration\").default(30), // in minutes\n  meetingType: varchar(\"meeting_type\").default(\"virtual_showroom\"), // consultation, virtual_showroom, product_demo\n  status: varchar(\"status\").default(\"scheduled\"), // scheduled, confirmed, in_progress, completed, cancelled\n  meetingLink: varchar(\"meeting_link\"),\n  meetingId: varchar(\"meeting_id\"),\n  notes: text(\"notes\"),\n  reminderSent: boolean(\"reminder_sent\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contact inquiries table\nexport const contactInquiries = pgTable(\"contact_inquiries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\"),\n  inquiryType: varchar(\"inquiry_type\").notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\").default(\"new\"), // new, contacted, resolved\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product reviews table\nexport const productReviews = pgTable(\"product_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  userName: varchar(\"user_name\").notNull(),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\").notNull(),\n  images: text(\"images\").array(),\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product Q&A table\nexport const productQuestions = pgTable(\"product_questions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  userName: varchar(\"user_name\").notNull(),\n  userEmail: varchar(\"user_email\"),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\"),\n  answeredBy: varchar(\"answered_by\"),\n  answeredAt: timestamp(\"answered_at\"),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  cartItems: many(cartItems),\n  wishlistItems: many(wishlistItems),\n  orders: many(orders),\n  reviews: many(productReviews),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n  subcategories: many(subcategories),\n}));\n\nexport const subcategoriesRelations = relations(subcategories, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [subcategories.categoryId],\n    references: [categories.id],\n  }),\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  subcategory: one(subcategories, {\n    fields: [products.subcategoryId],\n    references: [subcategories.id],\n  }),\n  cartItems: many(cartItems),\n  wishlistItems: many(wishlistItems),\n  orderItems: many(orderItems),\n  reviews: many(productReviews),\n  questions: many(productQuestions),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const wishlistItemsRelations = relations(wishlistItems, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlistItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlistItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const productReviewsRelations = relations(productReviews, ({ one }) => ({\n  product: one(products, {\n    fields: [productReviews.productId],\n    references: [products.id],\n  }),\n  user: one(users, {\n    fields: [productReviews.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const productQuestionsRelations = relations(productQuestions, ({ one }) => ({\n  product: one(products, {\n    fields: [productQuestions.productId],\n    references: [products.id],\n  }),\n  user: one(users, {\n    fields: [productQuestions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubcategorySchema = createInsertSchema(subcategories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactInquirySchema = createInsertSchema(contactInquiries).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductReviewSchema = createInsertSchema(productReviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductQuestionSchema = createInsertSchema(productQuestions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Subcategory = typeof subcategories.$inferSelect;\nexport type InsertSubcategory = z.infer<typeof insertSubcategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type ContactInquiry = typeof contactInquiries.$inferSelect;\nexport type InsertContactInquiry = z.infer<typeof insertContactInquirySchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type ProductReview = typeof productReviews.$inferSelect;\nexport type InsertProductReview = z.infer<typeof insertProductReviewSchema>;\nexport type ProductQuestion = typeof productQuestions.$inferSelect;\nexport type InsertProductQuestion = z.infer<typeof insertProductQuestionSchema>;","size_bytes":14435},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState } from \"react\";\nimport Auth0ProviderWrapper from \"@/components/auth0-provider\";\nimport { isAuth0Configured } from \"@/lib/auth0-config\";\nimport { useAuthSync } from \"@/hooks/use-auth-sync\";\n\nimport Navigation from \"@/components/navigation\";\nimport CartModal from \"@/components/cart-modal\";\nimport WishlistModal from \"@/components/wishlist-modal\";\nimport HelpdeskModal from \"@/components/helpdesk-modal\";\nimport AppointmentModal from \"@/components/appointment-modal\";\nimport VideoCallModal from \"@/components/video-call-modal\";\nimport FloatingChatbot from \"@/components/floating-chatbot\";\nimport ScrollToTop from \"@/components/scroll-to-top\";\nimport RouteScrollToTop from \"@/components/route-scroll-to-top\";\nimport AuthRedirectHandler from \"@/components/auth-redirect-handler\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Cart from \"@/pages/cart\";\nimport Wishlist from \"@/pages/wishlist\";\nimport Profile from \"@/pages/profile\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport Deals from \"@/pages/deals\";\nimport Login from \"@/pages/login\";\nimport Callback from \"@/pages/callback\";\n\nimport NotFound from \"@/pages/not-found\";\nimport AddressPage from \"@/pages/address\";\nimport PaymentPage from \"@/pages/payment\";\nimport UPIPaymentPage from \"@/pages/payment-upi\";\nimport CardPaymentPage from \"@/pages/payment-card\";\nimport QRPaymentPage from \"@/pages/payment-qr\";\nimport CODPaymentPage from \"@/pages/payment-cod\";\nimport PaymentSuccessPage from \"@/pages/payment-success\";\nimport OrderSuccessPage from \"@/pages/order-success\";\nimport CheckoutPage from \"@/pages/checkout\";\n\nfunction AppContent() {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [isWishlistOpen, setIsWishlistOpen] = useState(false);\n  const [isHelpdeskOpen, setIsHelpdeskOpen] = useState(false);\n  const [isAppointmentOpen, setIsAppointmentOpen] = useState(false);\n  const [isVideoCallOpen, setIsVideoCallOpen] = useState(false);\n  const [videoCallDetails, setVideoCallDetails] = useState({ appointmentId: \"\", customerName: \"\" });\n  \n  // Sync Auth0 user with server session when available\n  useAuthSync();\n\n  return (\n    <div className=\"min-h-screen bg-warmWhite\">\n      <Navigation \n        onCartClick={() => setIsCartOpen(true)}\n        onWishlistClick={() => setIsWishlistOpen(true)}\n      />\n      \n      <main>\n        <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/products\" component={Products} />\n        <Route path=\"/product/:id\" component={ProductDetail} />\n        <Route path=\"/cart\" component={Cart} />\n        <Route path=\"/wishlist\" component={Wishlist} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/orders\" component={Profile} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/deals\" component={Deals} />\n        \n        {/* Auth Routes */}\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/callback\" component={Callback} />\n        \n        {/* Checkout Flow Routes */}\n        <Route path=\"/checkout\" component={CheckoutPage} />\n        <Route path=\"/address\" component={AddressPage} />\n        <Route path=\"/payment\" component={PaymentPage} />\n        <Route path=\"/payment/upi\" component={UPIPaymentPage} />\n        <Route path=\"/payment/card\" component={CardPaymentPage} />\n        <Route path=\"/payment/qr\" component={QRPaymentPage} />\n        <Route path=\"/payment/cod\" component={CODPaymentPage} />\n        <Route path=\"/payment/success\" component={PaymentSuccessPage} />\n        <Route path=\"/order-success\" component={OrderSuccessPage} />\n        \n        <Route component={NotFound} />\n        </Switch>\n      </main>\n\n      <CartModal \n        isOpen={isCartOpen} \n        onClose={() => setIsCartOpen(false)} \n      />\n      <WishlistModal \n        isOpen={isWishlistOpen} \n        onClose={() => setIsWishlistOpen(false)} \n      />\n      <HelpdeskModal \n        isOpen={isHelpdeskOpen} \n        onClose={() => setIsHelpdeskOpen(false)} \n      />\n      <AppointmentModal \n        isOpen={isAppointmentOpen} \n        onClose={() => setIsAppointmentOpen(false)} \n      />\n      <VideoCallModal \n        isOpen={isVideoCallOpen} \n        onClose={() => setIsVideoCallOpen(false)}\n        appointmentId={videoCallDetails.appointmentId}\n        customerName={videoCallDetails.customerName}\n      />\n      <FloatingChatbot \n        onSupportClick={() => setIsHelpdeskOpen(true)}\n        onBookCallClick={() => setIsAppointmentOpen(true)}\n      />\n      <ScrollToTop />\n      <RouteScrollToTop />\n      <AuthRedirectHandler />\n      \n      <Toaster />\n    </div>\n  );\n}\n\nfunction App() {\n  // Always use Auth0Provider - no more demo mode\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Auth0ProviderWrapper>\n          <AppContent />\n        </Auth0ProviderWrapper>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":5351},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Open+Sans:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Hide scrollbars globally while maintaining scroll functionality */\n* {\n  scrollbar-width: none; /* Firefox */\n  -ms-overflow-style: none; /* IE and Edge */\n}\n\n*::-webkit-scrollbar {\n  display: none; /* Chrome, Safari, Opera */\n}\n\n/* Show full scrollbars for specific sections */\n.modal-content-scroll {\n  scrollbar-width: auto !important; /* Firefox */\n  -ms-overflow-style: scrollbar !important; /* IE and Edge */\n}\n\n.modal-content-scroll::-webkit-scrollbar {\n  display: block !important; /* Chrome, Safari, Opera */\n  width: 12px;\n}\n\n.modal-content-scroll::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 6px;\n}\n\n.modal-content-scroll::-webkit-scrollbar-thumb {\n  background: #c1945a;\n  border-radius: 6px;\n  border: 2px solid #f1f1f1;\n}\n\n.modal-content-scroll::-webkit-scrollbar-thumb:hover {\n  background: #a67c4a;\n}\n\n.modal-button-scroll {\n  scrollbar-width: auto !important; /* Firefox */\n  -ms-overflow-style: scrollbar !important; /* IE and Edge */\n}\n\n.modal-button-scroll::-webkit-scrollbar {\n  display: block !important; /* Chrome, Safari, Opera */\n  width: 8px;\n}\n\n.modal-button-scroll::-webkit-scrollbar-track {\n  background: #f8f9fa;\n  border-radius: 4px;\n}\n\n.modal-button-scroll::-webkit-scrollbar-thumb {\n  background: #d97706;\n  border-radius: 4px;\n}\n\n.modal-button-scroll::-webkit-scrollbar-thumb:hover {\n  background: #b45309;\n}\n\n/* Receipt modal specific scrollbar */\n.receipt-modal-scroll {\n  scrollbar-width: auto !important; /* Firefox */\n  -ms-overflow-style: scrollbar !important; /* IE and Edge */\n}\n\n.receipt-modal-scroll::-webkit-scrollbar {\n  display: block !important; /* Chrome, Safari, Opera */\n  width: 14px;\n}\n\n.receipt-modal-scroll::-webkit-scrollbar-track {\n  background: #f8f9fa;\n  border-radius: 7px;\n}\n\n.receipt-modal-scroll::-webkit-scrollbar-thumb {\n  background: #8B4513;\n  border-radius: 7px;\n  border: 2px solid #f8f9fa;\n}\n\n.receipt-modal-scroll::-webkit-scrollbar-thumb:hover {\n  background: #6d3410;\n}\n\n/* Smooth scrolling for all elements */\n* {\n  scroll-behavior: smooth;\n}\n\n:root {\n  --background: hsl(43, 27%, 97%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(43, 27%, 97%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --popover: hsl(43, 27%, 97%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --primary: hsl(20, 58%, 27%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(42, 39%, 69%);\n  --secondary-foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(43, 15%, 92%);\n  --muted-foreground: hsl(20, 14.3%, 4.1%);\n  --accent: hsl(30, 62%, 56%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(42, 39%, 85%);\n  --input: hsl(42, 39%, 90%);\n  --ring: hsl(20, 58%, 27%);\n  --warmWhite: hsl(43, 27%, 97%);\n  --beige: hsl(60, 9%, 96%);\n  --darkBrown: hsl(20, 14.3%, 4.1%);\n  --chart-1: hsl(20, 58%, 27%);\n  --chart-2: hsl(42, 39%, 69%);\n  --chart-3: hsl(30, 62%, 56%);\n  --chart-4: hsl(20, 14.3%, 4.1%);\n  --chart-5: hsl(0, 84%, 60%);\n  --sidebar: hsl(43, 27%, 97%);\n  --sidebar-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-primary: hsl(20, 58%, 27%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(42, 39%, 85%);\n  --sidebar-accent-foreground: hsl(20, 58%, 27%);\n  --sidebar-border: hsl(42, 39%, 85%);\n  --sidebar-ring: hsl(20, 58%, 27%);\n  --font-sans: 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --font-display: 'Inter', sans-serif;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(20, 14.3%, 4.1%);\n  --foreground: hsl(43, 27%, 97%);\n  --card: hsl(20, 15%, 8%);\n  --card-foreground: hsl(43, 27%, 97%);\n  --popover: hsl(20, 14.3%, 4.1%);\n  --popover-foreground: hsl(43, 27%, 97%);\n  --primary: hsl(30, 62%, 56%);\n  --primary-foreground: hsl(20, 14.3%, 4.1%);\n  --secondary: hsl(20, 15%, 12%);\n  --secondary-foreground: hsl(43, 27%, 97%);\n  --muted: hsl(20, 15%, 12%);\n  --muted-foreground: hsl(42, 39%, 69%);\n  --accent: hsl(20, 58%, 27%);\n  --accent-foreground: hsl(43, 27%, 97%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 15%, 15%);\n  --input: hsl(20, 15%, 12%);\n  --ring: hsl(30, 62%, 56%);\n  --warmWhite: hsl(20, 14.3%, 4.1%);\n  --beige: hsl(20, 15%, 8%);\n  --darkBrown: hsl(43, 27%, 97%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-warmWhite text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .font-display {\n    font-family: var(--font-display);\n  }\n}\n\n@layer components {\n  .wood-texture {\n    background: linear-gradient(135deg, hsl(20, 58%, 27%) 0%, hsl(30, 62%, 56%) 50%, hsl(42, 39%, 69%) 100%);\n  }\n  \n  .hover-lift {\n    transition: all 0.3s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 40px rgba(139, 69, 19, 0.2);\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.8s ease-in;\n  }\n  \n  @keyframes fadeIn {\n    from { \n      opacity: 0; \n      transform: translateY(30px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n  \n  .scroll-smooth {\n    scroll-behavior: smooth;\n  }\n  \n  .video-overlay {\n    background: linear-gradient(135deg, hsla(20, 58%, 27%, 0.3) 0%, hsla(30, 62%, 56%, 0.2) 100%);\n  }\n\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n}\n\n@layer utilities {\n  .text-warmWhite {\n    color: hsl(43, 27%, 97%);\n  }\n  \n  .text-beige {\n    color: hsl(60, 9%, 96%);\n  }\n  \n  .text-darkBrown {\n    color: hsl(20, 14.3%, 4.1%);\n  }\n  \n  .bg-warmWhite {\n    background-color: hsl(43, 27%, 97%);\n  }\n  \n  .bg-beige {\n    background-color: hsl(60, 9%, 96%);\n  }\n  \n  .bg-darkBrown {\n    background-color: hsl(20, 14.3%, 4.1%);\n  }\n  \n  .scrollbar-hide {\n    /* Hide scrollbar for Chrome, Safari and Opera */\n    -webkit-overflow-scrolling: touch;\n    scrollbar-width: none; /* Firefox */\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none; /* Chrome, Safari and Opera */\n  }\n\n  /* Custom scrollbar for modal content */\n  .custom-scrollbar {\n    scrollbar-width: thin; /* Firefox */\n    scrollbar-color: hsl(42, 39%, 69%) hsl(43, 27%, 97%); /* thumb track */\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n    display: block;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: hsl(43, 27%, 97%);\n    border-radius: 4px;\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: hsl(42, 39%, 69%);\n    border-radius: 4px;\n    border: 1px solid hsl(43, 27%, 97%);\n  }\n  \n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: hsl(30, 62%, 56%);\n  }\n\n  /* Safe area inset for mobile devices to prevent content from touching screen edges */\n  .safe-area-inset-bottom {\n    padding-bottom: max(1rem, env(safe-area-inset-bottom));\n  }\n\n  /* Additional mobile touch optimization for very small screens */\n  @media (max-height: 640px) {\n    .modal-mobile-compact {\n      max-height: 70vh !important;\n    }\n  }\n\n  @media (max-height: 568px) {\n    .modal-mobile-compact {\n      max-height: 65vh !important;\n    }\n  }\n\n  /* Ensure buttons are always accessible on mobile */\n  @media (max-width: 640px) {\n    .mobile-button-spacing {\n      margin-bottom: 1.5rem;\n      padding-bottom: 1rem;\n    }\n  }\n}\n","size_bytes":7531},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <App />\n);\n","size_bytes":161},"client/src/components/cart-modal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { X, Minus, Plus, Trash2, CreditCard, Smartphone, Building, Truck, CheckCircle } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Extend Window interface for Razorpay\ndeclare global {\n  interface Window {\n    Razorpay: any;\n    razorpayLoaded: Promise<any>;\n  }\n}\nimport { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\ninterface CartModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function CartModal({ isOpen, onClose }: CartModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n  const [localCartItems, setLocalCartItems] = useState<any[]>([]);\n  const [showCustomerForm, setShowCustomerForm] = useState(false);\n  const [showPaymentOptions, setShowPaymentOptions] = useState(false);\n  const [showOrderConfirm, setShowOrderConfirm] = useState(false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');\n  const [orderDetails, setOrderDetails] = useState<any>(null);\n  const [customerDetails, setCustomerDetails] = useState({\n    name: '',\n    email: '',\n    contact: '',\n    address: '',\n    city: '',\n    district: '',\n    state: '',\n    pincode: ''\n  });\n\n  // Try to get cart from API, fallback to localStorage\n  const { data: apiCartItems = [], isLoading } = useQuery<(CartItem & { product: Product })[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: isOpen,\n    retry: false,\n  });\n\n  // Load local cart items from localStorage and listen for updates\n  useEffect(() => {\n    if (!isOpen) return;\n    \n    const loadLocalCart = () => {\n      const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n      setLocalCartItems(localCart);\n    };\n    \n    // Load initial cart\n    loadLocalCart();\n    \n    // Listen for cart updates\n    window.addEventListener('cartUpdated', loadLocalCart);\n    \n    return () => {\n      window.removeEventListener('cartUpdated', loadLocalCart);\n    };\n  }, [isOpen]);\n\n  // Use API cart if available, otherwise use localStorage cart\n  const cartItems = apiCartItems.length > 0 ? apiCartItems : localCartItems;\n\n  const handleProceedToCheckout = () => {\n    if (cartItems.length === 0) {\n      toast({\n        title: \"Empty Cart\",\n        description: \"Please add items to your cart before checkout.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare cart items for checkout\n    const checkoutItems = cartItems.map((item: any) => ({\n      product: item.product,\n      quantity: item.quantity,\n      price: parseFloat(item.product?.price || 0),\n      total: parseFloat(item.product?.price || 0) * item.quantity\n    }));\n\n    // Store checkout data in localStorage\n    localStorage.setItem('checkoutType', 'cart');\n    localStorage.setItem('checkoutItems', JSON.stringify(checkoutItems));\n\n    // Close cart modal and navigate to checkout\n    onClose();\n    navigate('/checkout');\n  };\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      try {\n        await apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // Update localStorage cart\n          const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n          const itemIndex = localCart.findIndex((item: any) => item.id === id || item.productId === id);\n          if (itemIndex !== -1) {\n            localCart[itemIndex].quantity = quantity;\n            localStorage.setItem('localCart', JSON.stringify(localCart));\n            setLocalCartItems([...localCart]);\n            window.dispatchEvent(new Event('cartUpdated'));\n          }\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      try {\n        await apiRequest(\"DELETE\", `/api/cart/${id}`);\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // Remove from localStorage cart\n          const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n          const updatedCart = localCart.filter((item: any) => item.id !== id && item.productId !== id);\n          localStorage.setItem('localCart', JSON.stringify(updatedCart));\n          setLocalCartItems([...updatedCart]);\n          window.dispatchEvent(new Event('cartUpdated'));\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Item removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async () => {\n      const orderItems = cartItems.map((item) => {\n        const product = item.product;\n        const dealPrice = product?.isDeal && product?.dealPrice ? product.dealPrice : null;\n        const price = dealPrice !== null ? dealPrice : product.price;\n        return {\n          productId: item.productId,\n          quantity: item.quantity,\n          price: price,\n        };\n      });\n\n      const total = cartItems.reduce((sum: number, item) => {\n        const product = item.product;\n        const dealPrice = product?.isDeal && product?.dealPrice ? parseFloat(product.dealPrice) : null;\n        const price = dealPrice !== null ? dealPrice : parseFloat(product.price);\n        return sum + (price * (item.quantity || 0));\n      }, 0);\n\n      // Create Razorpay order\n      const paymentOrder = await apiRequest(\"POST\", \"/api/payment/create-order\", {\n        amount: total,\n        currency: \"INR\",\n      }) as any;\n\n      // Simulate Razorpay payment (in real app, this would open Razorpay modal)\n      const mockPayment = {\n        razorpay_order_id: paymentOrder.id,\n        razorpay_payment_id: `pay_${Date.now()}`,\n        razorpay_signature: \"mock_signature\",\n      };\n\n      // Verify payment\n      const verifyResponse = await apiRequest(\"POST\", \"/api/payment/verify\", mockPayment) as unknown as { success: boolean };\n\n      // Create order\n      const orderResponse = await apiRequest(\"POST\", \"/api/orders\", {\n        total: total.toString(),\n        orderItems,\n        paymentId: mockPayment.razorpay_payment_id,\n        paymentStatus: \"completed\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order placed successfully!\",\n        description: \"Your order has been confirmed and will be processed soon.\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Payment failed\",\n        description: \"There was an error processing your payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate total properly for both API and localStorage cart items\n  const total = cartItems.reduce((sum: number, item) => {\n    // Use deal price if available, otherwise use regular price\n    const product = item.product;\n    const dealPrice = product?.isDeal && product?.dealPrice ? parseFloat(product.dealPrice) : null;\n    const price = dealPrice !== null ? dealPrice : parseFloat(product?.price || item.price || \"0\");\n    const quantity = item.quantity || 1;\n    return sum + (price * quantity);\n  }, 0);\n\n  // Payment method handlers\n  const handlePaymentMethod = (method: string) => {\n    setSelectedPaymentMethod(method);\n    setShowPaymentOptions(false);\n    setShowCustomerForm(true);\n  };\n\n  const handleCustomerFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!customerDetails.name || !customerDetails.email || !customerDetails.contact || !customerDetails.address || !customerDetails.city || !customerDetails.district || !customerDetails.state || !customerDetails.pincode) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowCustomerForm(false);\n    \n    if (selectedPaymentMethod === 'cod') {\n      handleCODOrder();\n    } else {\n      handleDirectRazorpayPayment();\n    }\n  };\n\n  const handleCODOrder = async () => {\n    try {\n      const orderItems = cartItems.map((item: any) => ({\n        productId: item.productId || item.product.id,\n        quantity: item.quantity,\n        price: (() => {\n          const product = item.product;\n          const dealPrice = product?.isDeal && product?.dealPrice ? product.dealPrice : null;\n          return dealPrice !== null ? dealPrice : product.price;\n        })()\n      }));\n\n      const orderData = {\n        customerName: customerDetails.name,\n        customerEmail: customerDetails.email,\n        customerPhone: customerDetails.contact,\n        shippingAddress: `${customerDetails.address}, ${customerDetails.city}, ${customerDetails.district}, ${customerDetails.state} - ${customerDetails.pincode}`,\n        pincode: customerDetails.pincode,\n        paymentMethod: \"cod\",\n        total: total, // No COD charges\n        orderItems: orderItems\n      };\n\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      if (response.ok) {\n        const order = await response.json();\n        setOrderDetails({\n          ...order,\n          paymentMethod: 'cod',\n          customerDetails: {\n            name: customerDetails.name,\n            email: customerDetails.email,\n            contact: customerDetails.contact,\n            address: customerDetails.address,\n            city: customerDetails.city,\n            district: customerDetails.district,\n            state: customerDetails.state,\n            pincode: customerDetails.pincode\n          }\n        });\n        setShowOrderConfirm(true);\n        \n        // Clear cart\n        localStorage.removeItem('localCart');\n        setLocalCartItems([]);\n        window.dispatchEvent(new Event('cartUpdated'));\n        queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n        \n        // Reset form\n        setCustomerDetails({ name: '', email: '', contact: '', address: '', city: '', district: '', state: '', pincode: '' });\n      } else {\n        throw new Error('Failed to create order');\n      }\n    } catch (error) {\n      toast({\n        title: \"Order Failed\",\n        description: \"Unable to place your order. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDirectRazorpayPayment = async () => {\n    console.log('Starting Razorpay payment process...');\n    \n    // Show loading state\n    const loadingToast = toast({\n      title: \"Loading Payment...\",\n      description: \"Please wait while we set up your payment.\",\n    });\n    \n    try {\n      // Create Razorpay order directly\n      const response = await fetch('/api/create-razorpay-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount: total,\n          currency: 'INR'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create payment order');\n      }\n\n      const orderData = await response.json();\n\n      // Dismiss loading toast\n      loadingToast.dismiss();\n      \n      // Use optimized Razorpay loader\n      try {\n        await window.razorpayLoaded;\n        await initializeRazorpay(orderData);\n      } catch (error: any) {\n        console.error('Razorpay SDK error:', error);\n        toast({\n          title: \"Payment System Error\",\n          description: \"Unable to load payment system. Please refresh the page and try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    } catch (error) {\n      console.error('Payment initialization error:', error);\n      loadingToast.dismiss();\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to initialize payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const initializeRazorpay = async (orderData: any) => {\n    let razorpayKey = import.meta.env.VITE_RAZORPAY_KEY_ID;\n    \n    // Fallback: fetch from server if environment variable is not available\n    if (!razorpayKey) {\n      try {\n        const configResponse = await fetch('/api/payment/config');\n        if (configResponse.ok) {\n          const config = await configResponse.json();\n          razorpayKey = config.key;\n        }\n      } catch (error) {\n        console.error('Failed to fetch payment config:', error);\n      }\n    }\n    \n    console.log('Environment check:', {\n      hasViteKey: !!import.meta.env.VITE_RAZORPAY_KEY_ID,\n      hasFallbackKey: !!razorpayKey,\n      keyPrefix: razorpayKey?.substring(0, 12),\n      hasRazorpay: !!window.Razorpay,\n      orderData: orderData\n    });\n    \n    if (!razorpayKey) {\n      toast({\n        title: \"Configuration Error\",\n        description: \"Razorpay key not configured. Please contact support.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!window.Razorpay) {\n      toast({\n        title: \"Payment System Error\",\n        description: \"Razorpay SDK not loaded. Please refresh and try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    console.log('Initializing Razorpay with key:', razorpayKey?.substring(0, 12) + '...');\n    console.log('Order data:', orderData);\n    \n    const options = {\n      key: razorpayKey,\n      amount: orderData.amount,\n      currency: orderData.currency,\n      name: 'IndoSaga Furniture',\n      description: 'Cart Checkout',\n      order_id: orderData.id,\n      prefill: {\n        name: customerDetails.name,\n        email: customerDetails.email,\n        contact: customerDetails.contact,\n      },\n      notes: {\n        address: customerDetails.address,\n        items: cartItems.length\n      },\n      theme: {\n        color: '#D97706'\n      },\n      handler: function (response: any) {\n        handlePaymentSuccess(response);\n      },\n      modal: {\n        ondismiss: function() {\n          // Only show error if payment actually failed/cancelled\n          // Razorpay automatically handles successful payments\n          console.log('Payment modal dismissed');\n        }\n      }\n    };\n\n    try {\n      const rzp = new window.Razorpay(options);\n      \n      rzp.on('payment.failed', function (response: any) {\n        console.error('Payment failed:', response);\n        toast({\n          title: \"Payment Failed\",\n          description: response.error?.description || \"Payment processing failed. Please try again.\",\n          variant: \"destructive\",\n        });\n      });\n      \n      // Add success logging\n      console.log('Opening Razorpay payment modal...');\n      \n      rzp.open();\n      console.log('Razorpay modal opened successfully');\n    } catch (error) {\n      console.error('Error opening Razorpay modal:', error);\n      toast({\n        title: \"Payment Error\",\n        description: \"Unable to open payment modal. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePaymentSuccess = async (paymentData: any) => {\n    try {\n      // Create final order after successful payment\n      const orderItems = cartItems.map((item: any) => ({\n        productId: item.productId || item.product.id,\n        quantity: item.quantity,\n        price: (() => {\n          const product = item.product;\n          const dealPrice = product?.isDeal && product?.dealPrice ? product.dealPrice : null;\n          return dealPrice !== null ? dealPrice : product.price;\n        })()\n      }));\n\n      const orderData = {\n        customerName: customerDetails.name,\n        customerEmail: customerDetails.email,\n        customerPhone: customerDetails.contact,\n        shippingAddress: customerDetails.address,\n        pincode: \"110001\",\n        paymentMethod: \"online\",\n        paymentId: paymentData.razorpay_payment_id,\n        razorpayOrderId: paymentData.razorpay_order_id,\n        razorpayPaymentId: paymentData.razorpay_payment_id,\n        razorpaySignature: paymentData.razorpay_signature,\n        total: total,\n        orderItems: orderItems\n      };\n\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      if (response.ok) {\n        // Clear the cart\n        localStorage.removeItem('localCart');\n        setLocalCartItems([]);\n        window.dispatchEvent(new Event('cartUpdated'));\n        queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n        \n        toast({\n          title: \"Payment Successful!\",\n          description: \"Your order has been placed successfully.\",\n        });\n        \n        // Reset form and close modal\n        setCustomerDetails({ name: '', email: '', contact: '', address: '', city: '', district: '', state: '', pincode: '' });\n        onClose();\n      } else {\n        throw new Error('Failed to create order');\n      }\n    } catch (error) {\n      toast({\n        title: \"Order Creation Failed\",\n        description: \"Payment was successful but order creation failed. Please contact support.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-end\">\n      <div className=\"w-full max-w-md bg-white h-full shadow-2xl transform transition-transform duration-300 flex flex-col\">\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h3 className=\"text-xl font-display font-semibold text-darkBrown\">Shopping Cart</h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            data-testid=\"button-close-cart\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"bg-gray-100 rounded-lg p-4 animate-pulse\">\n                  <div className=\"flex space-x-4\">\n                    <div className=\"w-16 h-16 bg-gray-200 rounded-lg\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 rounded\" />\n                      <div className=\"h-4 bg-gray-200 rounded w-2/3\" />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : cartItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-gray-400 mb-4\">\n                <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5-6m0 0L2 5m5 8h10m-10 0v6a2 2 0 002 2h6a2 2 0 002-2v-6\" />\n                </svg>\n              </div>\n              <h4 className=\"text-lg font-semibold text-gray-700 mb-2\">Your cart is empty</h4>\n              <p className=\"text-gray-500\">Add some beautiful furniture to get started!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\" data-testid=\"cart-items\">\n              {cartItems.map((item: any) => (\n                <div key={item.id || item.productId} className=\"bg-beige rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <img \n                      src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80\"} \n                      alt={item.product?.name}\n                      className=\"w-16 h-16 object-cover rounded-lg\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-darkBrown\" data-testid={`cart-item-name-${item.id || item.productId}`}>\n                        {item.product?.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\" data-testid={`cart-item-price-${item.id || item.productId}`}>\n                        ₹{(() => {\n                          const product = item.product;\n                          const dealPrice = product?.isDeal && product?.dealPrice ? parseFloat(product.dealPrice) : null;\n                          const price = dealPrice !== null ? dealPrice : parseFloat(product?.price || \"0\");\n                          return price.toFixed(2);\n                        })()}\n                      </p>\n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantityMutation.mutate({ \n                            id: item.id || item.productId, \n                            quantity: Math.max(1, item.quantity - 1) \n                          })}\n                          disabled={updateQuantityMutation.isPending || item.quantity <= 1}\n                          className=\"w-8 h-8 p-0\"\n                          data-testid={`button-decrease-quantity-${item.id || item.productId}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"text-sm font-medium min-w-8 text-center\" data-testid={`cart-item-quantity-${item.id || item.productId}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => updateQuantityMutation.mutate({ \n                            id: item.id || item.productId, \n                            quantity: item.quantity + 1 \n                          })}\n                          disabled={updateQuantityMutation.isPending}\n                          className=\"w-8 h-8 p-0\"\n                          data-testid={`button-increase-quantity-${item.id || item.productId}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeItemMutation.mutate(item.id || item.productId)}\n                      disabled={removeItemMutation.isPending}\n                      className=\"text-red-500 hover:text-red-600\"\n                      data-testid={`button-remove-item-${item.id || item.productId}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {cartItems.length > 0 && (\n          <div className=\"border-t p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <span className=\"text-lg font-semibold text-darkBrown\">Total:</span>\n              <span className=\"text-xl font-bold text-primary\" data-testid=\"cart-total\">\n                ₹{total.toFixed(2)}\n              </span>\n            </div>\n            <Button\n              onClick={handleProceedToCheckout}\n              className=\"w-full bg-gradient-to-r from-amber-600 to-orange-700 hover:from-amber-700 hover:to-orange-800 text-white py-3 font-semibold shadow-lg mb-3\"\n              data-testid=\"button-checkout\"\n            >\n              Proceed to Checkout\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"w-full border-primary text-primary hover:bg-primary hover:text-white transition-colors\"\n              data-testid=\"button-continue-shopping\"\n            >\n              Continue Shopping\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n\n    {/* Customer Details Form Modal */}\n    {showCustomerForm && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 z-[60] flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Enter Your Details</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowCustomerForm(false)}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleCustomerFormSubmit} className=\"space-y-4\">\n              <Input\n                placeholder=\"Full Name\"\n                value={customerDetails.name}\n                onChange={(e) => setCustomerDetails({...customerDetails, name: e.target.value})}\n                required\n              />\n              <Input\n                type=\"email\"\n                placeholder=\"Email Address\"\n                value={customerDetails.email}\n                onChange={(e) => setCustomerDetails({...customerDetails, email: e.target.value})}\n                required\n              />\n              <Input\n                type=\"tel\"\n                placeholder=\"Phone Number\"\n                value={customerDetails.contact}\n                onChange={(e) => setCustomerDetails({...customerDetails, contact: e.target.value})}\n                required\n              />\n              <Input\n                placeholder=\"Delivery Address\"\n                value={customerDetails.address}\n                onChange={(e) => setCustomerDetails({...customerDetails, address: e.target.value})}\n                required\n              />\n              <Input\n                placeholder=\"City\"\n                value={customerDetails.city}\n                onChange={(e) => setCustomerDetails({...customerDetails, city: e.target.value})}\n                required\n              />\n              <Input\n                placeholder=\"District\"\n                value={customerDetails.district}\n                onChange={(e) => setCustomerDetails({...customerDetails, district: e.target.value})}\n                required\n              />\n              <Input\n                placeholder=\"State\"\n                value={customerDetails.state}\n                onChange={(e) => setCustomerDetails({...customerDetails, state: e.target.value})}\n                required\n              />\n              <Input\n                placeholder=\"Pincode\"\n                value={customerDetails.pincode}\n                onChange={(e) => setCustomerDetails({...customerDetails, pincode: e.target.value})}\n                required\n              />\n              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                <span className=\"font-semibold\">Total: ₹{total.toFixed(2)}</span>\n              </div>\n              <Button type=\"submit\" className=\"w-full bg-gradient-to-r from-amber-600 to-orange-700 hover:from-amber-700 hover:to-orange-800 text-white font-semibold shadow-lg\">\n                {selectedPaymentMethod === 'cod' ? 'Place COD Order' : 'Pay with Razorpay'}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    )}\n\n    {/* Payment Options Modal */}\n    {showPaymentOptions && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-4 backdrop-blur-sm pt-24\">\n        <Card className=\"w-full max-w-md rounded-2xl shadow-2xl border-0 bg-gradient-to-br from-white via-warmWhite to-white mt-4\">\n          <CardHeader className=\"text-center p-6 border-b\">\n            <Button\n              onClick={() => setShowPaymentOptions(false)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute top-4 right-4 w-8 h-8 p-0 rounded-full hover:bg-gray-100 transition-colors\"\n            >\n              <X className=\"h-4 w-4 text-gray-500\" />\n            </Button>\n            <CardTitle className=\"text-xl text-darkBrown font-display\">Choose Payment Method</CardTitle>\n            <div className=\"mt-4 p-4 bg-gradient-to-r from-amber-100 to-orange-100 rounded-xl\">\n              <div className=\"text-2xl font-bold text-primary\">₹{total.toFixed(2)}</div>\n              <div className=\"text-sm text-gray-600\">Total Amount</div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6 space-y-4\">\n            <div className=\"space-y-3\">\n              {/* UPI Payment */}\n              <Button\n                onClick={() => handlePaymentMethod('upi')}\n                className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100 border border-amber-200 rounded-xl text-left transition-all duration-300\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-amber-500 to-orange-500 rounded-lg flex items-center justify-center\">\n                    <Smartphone className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-darkBrown\">UPI Payment</div>\n                    <div className=\"text-sm text-gray-600\">PhonePe, GooglePay, Paytm</div>\n                  </div>\n                </div>\n                <div className=\"text-xs bg-amber-100 text-amber-700 px-2 py-1 rounded-full font-medium\">Instant</div>\n              </Button>\n\n              {/* Credit/Debit Card */}\n              <Button\n                onClick={() => handlePaymentMethod('card')}\n                className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-orange-50 to-amber-50 hover:from-orange-100 hover:to-amber-100 border border-orange-200 rounded-xl text-left transition-all duration-300\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-orange-500 to-amber-500 rounded-lg flex items-center justify-center\">\n                    <CreditCard className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-darkBrown\">Credit/Debit Card</div>\n                    <div className=\"text-sm text-gray-600\">Visa, MasterCard, RuPay</div>\n                  </div>\n                </div>\n                <div className=\"text-xs bg-orange-100 text-orange-700 px-2 py-1 rounded-full font-medium\">Secure</div>\n              </Button>\n\n              {/* Net Banking */}\n              <Button\n                onClick={() => handlePaymentMethod('netbanking')}\n                className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100 border border-amber-200 rounded-xl text-left transition-all duration-300\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-amber-600 to-orange-600 rounded-lg flex items-center justify-center\">\n                    <Building className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-darkBrown\">Net Banking</div>\n                    <div className=\"text-sm text-gray-600\">All major banks supported</div>\n                  </div>\n                </div>\n                <div className=\"text-xs bg-amber-100 text-amber-700 px-2 py-1 rounded-full font-medium\">Trusted</div>\n              </Button>\n\n              {/* Cash on Delivery */}\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <span className=\"w-full border-t border-gray-200\" />\n                </div>\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-white px-2 text-gray-500\">Or</span>\n                </div>\n              </div>\n              \n              <Button\n                onClick={() => handlePaymentMethod('cod')}\n                className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-orange-50 to-amber-100 hover:from-orange-100 hover:to-amber-200 border border-orange-200 rounded-xl text-left transition-all duration-300\"\n                variant=\"ghost\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-orange-500 to-amber-500 rounded-lg flex items-center justify-center\">\n                    <Truck className=\"h-5 w-5 text-white\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-darkBrown\">Cash on Delivery</div>\n                    <div className=\"text-sm text-gray-600\">Pay when you receive</div>\n                  </div>\n                </div>\n                <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">Free</div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )}\n\n    {/* Order Confirmation Modal */}\n    {showOrderConfirm && orderDetails && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-4 backdrop-blur-sm pt-24\">\n        <Card className=\"w-full max-w-md max-h-[85vh] overflow-hidden rounded-2xl shadow-2xl border-0 bg-gradient-to-br from-white via-warmWhite to-white mt-4\">\n          <CardHeader className=\"text-center p-6 bg-gradient-to-r from-amber-50 to-orange-50 border-b border-amber-100 relative\">\n            <Button\n              onClick={() => {\n                setShowOrderConfirm(false);\n                setOrderDetails(null);\n                onClose();\n              }}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute top-4 right-4 w-8 h-8 p-0 rounded-full hover:bg-gray-100 transition-colors\"\n            >\n              <X className=\"h-4 w-4 text-gray-500\" />\n            </Button>\n            <div className=\"flex flex-col items-center space-y-2\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-xl text-darkBrown font-display\">Order Confirmed!</CardTitle>\n              <p className=\"text-sm text-gray-600\">Your order has been successfully placed</p>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"max-h-[60vh] overflow-y-auto px-6 py-4 space-y-6\">\n              <div className=\"bg-gray-50 rounded-xl p-4 space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Order ID:</span>\n                  <span className=\"font-mono text-sm font-semibold\">{orderDetails.id?.slice(-8)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Payment Method:</span>\n                  <span className=\"text-sm font-medium capitalize\">{orderDetails.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment'}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Total Amount:</span>\n                  <span className=\"text-lg font-bold text-primary\">₹{orderDetails.total}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-darkBrown\">Cart Items:</h4>\n                {cartItems.map((item: any) => (\n                  <div key={item.id || item.productId} className=\"flex items-center space-x-3 p-3 bg-amber-50 rounded-lg border border-amber-200\">\n                    <img \n                      src={item.product?.imageUrl || '/placeholder-furniture.jpg'} \n                      alt={item.product?.name}\n                      className=\"w-12 h-12 object-cover rounded\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{item.product?.name}</div>\n                      <div className=\"text-xs text-gray-600\">Qty: {item.quantity}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-darkBrown\">Delivery Address:</h4>\n                <div className=\"text-sm text-gray-600 bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 p-3 rounded-lg\">\n                  <div className=\"font-medium text-darkBrown\">{orderDetails.customerDetails?.name}</div>\n                  <div>{orderDetails.customerDetails?.address}</div>\n                  <div>{orderDetails.customerDetails?.city}, {orderDetails.customerDetails?.district}</div>\n                  <div>{orderDetails.customerDetails?.state} - {orderDetails.customerDetails?.pincode}</div>\n                  <div>Phone: {orderDetails.customerDetails?.contact}</div>\n                </div>\n              </div>\n              \n              {orderDetails.paymentMethod === 'cod' && (\n                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-orange-800\">\n                    <strong>Cash on Delivery:</strong> Please keep exact change ready. Our delivery partner will contact you before delivery.\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"p-6 pt-4 space-y-3\">\n              <Button \n                onClick={() => {\n                  // Generate and download receipt\n                  const receiptData = {\n                    orderId: orderDetails.id,\n                    customerName: orderDetails.customerDetails?.name,\n                    date: new Date().toLocaleDateString(),\n                    items: cartItems.map((item: any) => ({ \n                      name: item.product?.name, \n                      qty: item.quantity, \n                      price: (() => {\n                        const product = item.product;\n                        const dealPrice = product?.isDeal && product?.dealPrice ? product.dealPrice : null;\n                        return dealPrice !== null ? dealPrice : product.price;\n                      })()\n                    })),\n                    total: orderDetails.total,\n                    paymentMethod: orderDetails.paymentMethod,\n                    address: `${orderDetails.customerDetails?.address}, ${orderDetails.customerDetails?.city}, ${orderDetails.customerDetails?.state} - ${orderDetails.customerDetails?.pincode}`\n                  };\n                  \n                  const receiptText = `\n=======================\n    ORDER RECEIPT\n=======================\nOrder ID: ${receiptData.orderId?.slice(-8)}\nDate: ${receiptData.date}\nCustomer: ${receiptData.customerName}\n\nITEMS:\n${receiptData.items.map(item => `${item.name} x${item.qty} - ₹${item.price}`).join('\\n')}\n\nTotal: ₹${receiptData.total}\nPayment: ${receiptData.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment'}\n\nDelivery Address:\n${receiptData.address}\n\nThank you for shopping with us!\n=======================\n                  `;\n                  \n                  const blob = new Blob([receiptText], { type: 'text/plain' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `receipt-${orderDetails.id?.slice(-8)}.txt`;\n                  a.click();\n                  URL.revokeObjectURL(url);\n                  \n                  toast({\n                    title: \"Receipt Downloaded!\",\n                    description: \"Your order receipt has been downloaded successfully.\",\n                  });\n                }}\n                className=\"w-full h-12 bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 hover:from-amber-700 hover:via-orange-700 hover:to-amber-800 text-white font-semibold shadow-lg rounded-xl border-2 border-amber-200 hover:border-amber-300 transition-all duration-300\"\n              >\n                📥 Download Receipt\n              </Button>\n              <Button \n                onClick={() => {\n                  setShowOrderConfirm(false);\n                  setOrderDetails(null);\n                  onClose();\n                }}\n                className=\"w-full h-12 bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 hover:from-amber-700 hover:via-orange-700 hover:to-amber-800 text-white font-semibold shadow-lg rounded-xl transition-all duration-300\"\n              >\n                Continue Shopping\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )}\n    </>\n  );\n}\n","size_bytes":42126},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Heart, ShoppingCart, User, Menu, X, LogIn, LogOut } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport type { CartItem, WishlistItem } from \"@shared/schema\";\n// Removed problematic image import - using text-based logo instead\n\ninterface NavigationProps {\n  onCartClick: () => void;\n  onWishlistClick: () => void;\n}\n\nexport default function Navigation({ onCartClick, onWishlistClick }: NavigationProps) {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [localCartCount, setLocalCartCount] = useState(0);\n  const [localWishlistCount, setLocalWishlistCount] = useState(0);\n  \n  const { logout } = useAuth0();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n\n  // Get cart count from API\n  const { data: cartItems = [] } = useQuery<CartItem[]>({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n  });\n\n  // Get wishlist count from API\n  const { data: wishlistItems = [] } = useQuery<WishlistItem[]>({\n    queryKey: [\"/api/wishlist\"],\n    retry: false,\n  });\n\n  // Check authentication status\n  const { data: user, isLoading: authLoading } = useQuery<any>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  // Load localStorage counts and listen for updates\n  useEffect(() => {\n    const updateLocalCounts = () => {\n      const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n      const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n      \n      // Remove duplicates from localStorage before counting\n      const uniqueWishlist = localWishlist.filter((item: any, index: number, array: any[]) => \n        array.findIndex((i: any) => i.productId === item.productId) === index\n      );\n      \n      // Update localStorage with deduplicated data\n      if (uniqueWishlist.length !== localWishlist.length) {\n        localStorage.setItem('localWishlist', JSON.stringify(uniqueWishlist));\n      }\n      \n      setLocalCartCount(localCart.length);\n      setLocalWishlistCount(uniqueWishlist.length);\n    };\n\n    // Load initial counts\n    updateLocalCounts();\n\n    // Listen for updates\n    window.addEventListener('cartUpdated', updateLocalCounts);\n    window.addEventListener('wishlistUpdated', updateLocalCounts);\n    window.addEventListener('localWishlistUpdate', updateLocalCounts);\n\n    return () => {\n      window.removeEventListener('cartUpdated', updateLocalCounts);\n      window.removeEventListener('wishlistUpdated', updateLocalCounts);\n      window.removeEventListener('localWishlistUpdate', updateLocalCounts);\n    };\n  }, []);\n\n  // Use API count if available, otherwise use localStorage count\n  const cartCount = cartItems.length > 0 ? cartItems.length : localCartCount;\n  const wishlistCount = wishlistItems.length > 0 ? wishlistItems.length : localWishlistCount;\n\n  // Logout handler function\n  const handleLogout = async () => {\n    try {\n      // Show immediate feedback\n      toast({\n        title: \"Logging out...\",\n        description: \"Please wait while we log you out.\",\n      });\n\n      // First clear all React Query cache immediately\n      queryClient.clear();\n      \n      // Force invalidate specific auth queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.removeQueries({ queryKey: [\"/api/auth/me\"] });\n      \n      // Clear the server session using API\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      // Clear localStorage data\n      localStorage.removeItem('localCart');\n      localStorage.removeItem('localWishlist');\n      \n      // Force reload to ensure all components refresh\n      setTimeout(() => {\n        // Then clear Auth0 session and redirect\n        logout({ \n          logoutParams: {\n            returnTo: window.location.origin\n          }\n        });\n      }, 100);\n      \n    } catch (error) {\n      console.error('Logout error:', error);\n      // If server logout fails, still clear everything\n      queryClient.clear();\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.removeQueries({ queryKey: [\"/api/auth/me\"] });\n      localStorage.removeItem('localCart');\n      localStorage.removeItem('localWishlist');\n      \n      logout({ \n        logoutParams: {\n          returnTo: window.location.origin\n        }\n      });\n    }\n  };\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/products\", label: \"Products\" },\n    { href: \"/deals\", label: \"₹1 Deal\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  return (\n    <nav className=\"bg-gradient-to-r from-white via-warmWhite to-white shadow-2xl sticky top-0 z-40 backdrop-blur-md border-b border-primary/20 animate-fadeIn group\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 via-accent/3 to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n        <div className=\"flex justify-between items-center h-16 sm:h-18 lg:h-20 xl:h-24 relative z-10\">\n          \n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-1 sm:space-x-2 lg:space-x-3 group hover:scale-105 transition-all duration-500 animate-slideInLeft flex-shrink-0\" data-testid=\"link-home\">\n            <div className=\"w-8 h-8 sm:w-9 sm:h-9 lg:w-10 lg:h-10 xl:w-12 xl:h-12 rounded-full overflow-hidden ring-2 ring-primary/30 group-hover:ring-primary/70 transition-all duration-500 shadow-lg group-hover:shadow-primary/30 group-hover:shadow-xl flex-shrink-0\">\n              <img \n                src=\"/indosaga-logo.png\" \n                alt=\"IndoSaga Furniture Logo\" \n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n            <div className=\"flex flex-col justify-center leading-tight\">\n              <div className=\"text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl font-display font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700 animate-slideInLeft drop-shadow-sm whitespace-nowrap\">\n                IndoSaga\n              </div>\n              <div className=\"text-xs sm:text-sm md:text-base lg:text-lg xl:text-xl font-display font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700 animate-slideInLeft drop-shadow-sm whitespace-nowrap\">\n                Furniture\n              </div>\n            </div>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden xl:flex items-center space-x-6 animate-fadeIn flex-shrink-0\">\n            {navLinks.map((link, index) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className={`text-darkBrown hover:text-primary transition-all duration-500 font-semibold relative group px-3 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transform hover:scale-105 shadow-sm hover:shadow-lg hover:shadow-primary/20 text-sm ${\n                  location === link.href ? \"text-primary bg-gradient-to-r from-primary/15 to-accent/15 scale-105 shadow-md\" : \"\"\n                }`}\n                style={{ \n                  animationDelay: `${index * 150}ms`,\n                  animation: `slideInDown 0.8s ease-out ${index * 150}ms both`\n                }}\n                data-testid={`nav-${link.label.toLowerCase().replace(\"₹\", \"\").replace(\" \", \"-\")}`}\n              >\n                <span className=\"relative z-10 group-hover:animate-pulse whitespace-nowrap\">{link.label}</span>\n                <span className={`absolute bottom-0 left-0 w-0 h-1 bg-gradient-to-r from-primary via-accent to-primary transition-all duration-500 group-hover:w-full rounded-full ${\n                  location === link.href ? \"w-full\" : \"\"\n                }`}></span>\n                <span className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl\"></span>\n              </Link>\n            ))}\n          </div>\n          \n          {/* Large Tablet Navigation */}\n          <div className=\"hidden lg:flex xl:hidden items-center space-x-4 animate-fadeIn flex-shrink-0\">\n            {navLinks.map((link, index) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className={`text-darkBrown hover:text-primary transition-all duration-500 font-medium relative group px-2 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transform hover:scale-105 text-sm ${\n                  location === link.href ? \"text-primary bg-gradient-to-r from-primary/15 to-accent/15 scale-105\" : \"\"\n                }`}\n                data-testid={`nav-${link.label.toLowerCase().replace(\"₹\", \"\").replace(\" \", \"-\")}`}\n              >\n                <span className=\"relative z-10 group-hover:animate-pulse whitespace-nowrap\">{link.label}</span>\n                <span className={`absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-primary to-accent transition-all duration-300 group-hover:w-full ${\n                  location === link.href ? \"w-full\" : \"\"\n                }`}></span>\n              </Link>\n            ))}\n          </div>\n          \n          {/* Medium Tablet Navigation */}\n          <div className=\"hidden md:flex lg:hidden items-center space-x-3 animate-fadeIn flex-shrink-0\">\n            {navLinks.slice(0, 4).map((link, index) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className={`text-darkBrown hover:text-primary transition-all duration-500 font-medium relative group px-2 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transform hover:scale-105 text-xs ${\n                  location === link.href ? \"text-primary bg-gradient-to-r from-primary/15 to-accent/15\" : \"\"\n                }`}\n                data-testid={`nav-${link.label.toLowerCase().replace(\"₹\", \"\").replace(\" \", \"-\")}`}\n              >\n                <span className=\"relative z-10 group-hover:animate-pulse whitespace-nowrap\">{link.label}</span>\n              </Link>\n            ))}\n          </div>\n          \n          {/* Small Tablet Navigation */}\n          <div className=\"hidden sm:flex md:hidden items-center space-x-2 animate-fadeIn flex-shrink-0\">\n            {navLinks.slice(0, 3).map((link, index) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className={`text-darkBrown hover:text-primary transition-all duration-500 font-medium relative group px-1 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 text-xs ${\n                  location === link.href ? \"text-primary bg-gradient-to-r from-primary/15 to-accent/15\" : \"\"\n                }`}\n                data-testid={`nav-${link.label.toLowerCase().replace(\"₹\", \"\").replace(\" \", \"-\")}`}\n              >\n                <span className=\"relative z-10 whitespace-nowrap\">{link.label}</span>\n              </Link>\n            ))}\n          </div>\n          \n          {/* Desktop Actions */}\n          <div className=\"hidden xl:flex items-center space-x-4 animate-slideInRight flex-shrink-0\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onWishlistClick}\n              className=\"text-darkBrown hover:text-primary relative group px-3 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-500 transform hover:scale-105 font-medium shadow-sm hover:shadow-lg hover:shadow-primary/20 text-sm\"\n              data-testid=\"button-wishlist\"\n            >\n              <Heart className=\"w-5 h-5 group-hover:animate-pulse\" />\n              <span className=\"group-hover:animate-pulse relative z-10 whitespace-nowrap ml-2\">Wishlist</span>\n              {wishlistCount > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-bold animate-bounce shadow-lg\">\n                  {wishlistCount}\n                </span>\n              )}\n              <span className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl\"></span>\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCartClick}\n              className=\"text-darkBrown hover:text-primary relative group px-3 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-500 transform hover:scale-105 font-medium shadow-sm hover:shadow-lg hover:shadow-primary/20 text-sm\"\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"w-5 h-5 group-hover:animate-pulse\" />\n              <span className=\"group-hover:animate-pulse relative z-10 whitespace-nowrap ml-2\">Cart</span>\n              {cartCount > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-6 h-6 flex items-center justify-center font-bold animate-bounce shadow-lg\">\n                  {cartCount}\n                </span>\n              )}\n              <span className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl\"></span>\n            </Button>\n            {/* Authentication Buttons */}\n            {!authLoading && (\n              user ? (\n                <div className=\"flex items-center space-x-2\">\n                  <Link href=\"/profile\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-darkBrown hover:text-primary group px-3 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-500 transform hover:scale-105 font-medium shadow-sm hover:shadow-lg hover:shadow-primary/20 relative text-sm\"\n                      data-testid=\"button-profile\"\n                    >\n                      {user.picture ? (\n                        <img \n                          src={user.picture} \n                          alt=\"Profile\" \n                          className=\"w-5 h-5 rounded-full group-hover:animate-pulse\" \n                        />\n                      ) : (\n                        <User className=\"w-5 h-5 group-hover:animate-pulse\" />\n                      )}\n                      <span className=\"group-hover:animate-pulse relative z-10 whitespace-nowrap ml-2\">\n                        {user.given_name || user.name?.split(' ')[0] || user.email?.split('@')[0] || 'Profile'}\n                      </span>\n                      <span className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl\"></span>\n                    </Button>\n                  </Link>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleLogout}\n                    className=\"text-darkBrown hover:text-red-600 group px-3 py-2 rounded-lg hover:bg-gradient-to-r hover:from-red-50 hover:to-red-100 transition-all duration-500 transform hover:scale-105 font-medium shadow-sm hover:shadow-lg text-sm\"\n                    data-testid=\"button-logout\"\n                  >\n                    <LogOut className=\"w-5 h-5 group-hover:animate-pulse\" />\n                    <span className=\"group-hover:animate-pulse relative z-10 whitespace-nowrap ml-2\">Logout</span>\n                  </Button>\n                </div>\n              ) : (\n                <a href=\"/login\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-darkBrown hover:text-primary group px-3 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-500 transform hover:scale-105 font-medium shadow-sm hover:shadow-lg hover:shadow-primary/20 relative text-sm\"\n                    data-testid=\"button-login\"\n                  >\n                    <LogIn className=\"w-5 h-5 group-hover:animate-pulse\" />\n                    <span className=\"group-hover:animate-pulse relative z-10 whitespace-nowrap ml-2\">Login</span>\n                    <span className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl\"></span>\n                  </Button>\n                </a>\n              )\n            )}\n          </div>\n          \n          {/* Large Tablet Actions */}\n          <div className=\"hidden lg:flex xl:hidden items-center space-x-3 animate-slideInRight flex-shrink-0\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onWishlistClick}\n              className=\"text-darkBrown hover:text-primary relative group px-2 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 transform hover:scale-105 font-medium text-sm\"\n              data-testid=\"button-wishlist\"\n            >\n              <Heart className=\"w-4 h-4 group-hover:animate-pulse\" />\n              <span className=\"ml-1.5 hidden lg:inline\">Wishlist</span>\n              {wishlistCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold animate-bounce\">\n                  {wishlistCount}\n                </span>\n              )}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCartClick}\n              className=\"text-darkBrown hover:text-primary relative group px-2 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 transform hover:scale-105 font-medium text-sm\"\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"w-4 h-4 group-hover:animate-pulse\" />\n              <span className=\"ml-1.5 hidden lg:inline\">Cart</span>\n              {cartCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold animate-bounce\">\n                  {cartCount}\n                </span>\n              )}\n            </Button>\n            <Link href=\"/profile\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-darkBrown hover:text-primary group px-2 py-2 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 transform hover:scale-105 font-medium text-sm\"\n                data-testid=\"button-profile\"\n              >\n                <User className=\"w-4 h-4 group-hover:animate-pulse\" />\n                <span className=\"ml-1.5 hidden lg:inline\">Profile</span>\n              </Button>\n            </Link>\n          </div>\n          \n          {/* Medium Tablet Actions */}\n          <div className=\"hidden md:flex lg:hidden items-center space-x-2 animate-slideInRight flex-shrink-0\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onWishlistClick}\n              className=\"text-darkBrown hover:text-primary relative group px-2 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 font-medium text-xs\"\n              data-testid=\"button-wishlist\"\n            >\n              <Heart className=\"w-4 h-4\" />\n              {wishlistCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-4 h-4 flex items-center justify-center font-bold text-[8px]\">\n                  {wishlistCount}\n                </span>\n              )}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCartClick}\n              className=\"text-darkBrown hover:text-primary relative group px-2 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 font-medium text-xs\"\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"w-4 h-4\" />\n              {cartCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-4 h-4 flex items-center justify-center font-bold text-[8px]\">\n                  {cartCount}\n                </span>\n              )}\n            </Button>\n            <Link href=\"/profile\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-darkBrown hover:text-primary group px-2 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 font-medium text-xs\"\n                data-testid=\"button-profile\"\n              >\n                <User className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n          </div>\n          \n          {/* Small Tablet Actions */}\n          <div className=\"hidden sm:flex md:hidden items-center space-x-1 animate-slideInRight flex-shrink-0\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onWishlistClick}\n              className=\"text-darkBrown hover:text-primary relative group px-1 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 font-medium text-xs\"\n              data-testid=\"button-wishlist\"\n            >\n              <Heart className=\"w-3 h-3\" />\n              {wishlistCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-3 h-3 flex items-center justify-center font-bold text-[6px]\">\n                  {wishlistCount}\n                </span>\n              )}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onCartClick}\n              className=\"text-darkBrown hover:text-primary relative group px-1 py-1 rounded-lg hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 font-medium text-xs\"\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"w-3 h-3\" />\n              {cartCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-3 h-3 flex items-center justify-center font-bold text-[6px]\">\n                  {cartCount}\n                </span>\n              )}\n            </Button>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"sm:hidden hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10 transition-all duration-300 transform hover:scale-105 p-2\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"sm:hidden bg-gradient-to-r from-white to-warmWhite border-t border-primary/20 py-4 backdrop-blur-sm animate-fadeIn\">\n            <div className=\"flex flex-col space-y-2\">\n              {navLinks.map((link, index) => (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`px-4 py-3 text-darkBrown hover:text-primary transition-all duration-300 rounded-lg mx-2 hover:bg-primary/5 font-medium transform hover:scale-[1.02] hover:shadow-sm ${\n                    location === link.href ? \"text-primary bg-primary/10 scale-[1.02]\" : \"\"\n                  }`}\n                  style={{ \n                    animationDelay: `${index * 100}ms`,\n                    animation: `slideInLeft 0.3s ease-out ${index * 100}ms both`\n                  }}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  data-testid={`mobile-nav-${link.label.toLowerCase().replace(\"₹\", \"\").replace(\" \", \"-\")}`}\n                >\n                  {link.label}\n                </Link>\n              ))}\n              <div className=\"flex items-center justify-center pt-4 border-t border-primary/20 gap-8\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => {\n                    onWishlistClick();\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"flex flex-col items-center space-y-1 text-darkBrown hover:text-primary relative group px-4 py-3 rounded-lg hover:bg-primary/5 transition-all duration-300 font-medium transform hover:scale-105\"\n                  data-testid=\"mobile-button-wishlist\"\n                >\n                  <div className=\"relative\">\n                    <Heart className=\"w-6 h-6 group-hover:animate-pulse\" />\n                    {wishlistCount > 0 && (\n                      <span className=\"absolute -top-2 -right-2 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold animate-bounce shadow-lg\">\n                        {wishlistCount}\n                      </span>\n                    )}\n                  </div>\n                  <span className=\"group-hover:animate-pulse text-sm\">Wishlist</span>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => {\n                    onCartClick();\n                    setIsMobileMenuOpen(false);\n                  }}\n                  className=\"flex flex-col items-center space-y-1 text-darkBrown hover:text-primary relative group px-4 py-3 rounded-lg hover:bg-primary/5 transition-all duration-300 font-medium transform hover:scale-105\"\n                  data-testid=\"mobile-button-cart\"\n                >\n                  <div className=\"relative\">\n                    <ShoppingCart className=\"w-6 h-6 group-hover:animate-pulse\" />\n                    {cartCount > 0 && (\n                      <span className=\"absolute -top-2 -right-2 bg-gradient-to-r from-primary to-accent text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-bold animate-bounce shadow-lg\">\n                        {cartCount}\n                      </span>\n                    )}\n                  </div>\n                  <span className=\"group-hover:animate-pulse text-sm\">Cart</span>\n                </Button>\n                <Link href=\"/profile\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    className=\"flex flex-col items-center space-y-1 text-darkBrown hover:text-primary group px-4 py-3 rounded-lg hover:bg-primary/5 transition-all duration-300 font-medium transform hover:scale-105\"\n                    data-testid=\"mobile-button-profile\"\n                  >\n                    <div className=\"relative\">\n                      <User className=\"w-6 h-6 group-hover:animate-pulse\" />\n                    </div>\n                    <span className=\"group-hover:animate-pulse text-sm\">Profile</span>\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}","size_bytes":28625},"client/src/components/product-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Heart, ShoppingCart, X, CreditCard, Smartphone, Building, Truck, CheckCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Link } from \"wouter\";\nimport RazorpayPaymentModal from \"@/components/razorpay-payment-modal\";\n\nimport type { Product } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product;\n  showDealBadge?: boolean;\n}\n\nexport default function ProductCard({ product, showDealBadge = false }: ProductCardProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { isAuthenticated, user } = useAuth0();\n  const [isInWishlist, setIsInWishlist] = useState(false);\n  const [showCustomerForm, setShowCustomerForm] = useState(false);\n  const [showPaymentOptions, setShowPaymentOptions] = useState(false);\n  const [showOrderConfirm, setShowOrderConfirm] = useState(false);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');\n  const [orderDetails, setOrderDetails] = useState<any>(null);\n  const [customerDetails, setCustomerDetails] = useState({\n    name: '',\n    email: '',\n    contact: '',\n    address: '',\n    city: '',\n    district: '',\n    state: '',\n    pincode: ''\n  });\n\n  // Check for pending actions after authentication\n  useEffect(() => {\n    if (isAuthenticated) {\n      const triggerBuyNow = sessionStorage.getItem('triggerBuyNow');\n      const triggerAddToCart = sessionStorage.getItem('triggerAddToCart');\n      \n      if (triggerBuyNow === 'true') {\n        sessionStorage.removeItem('triggerBuyNow');\n        // Trigger buy now flow - go directly to payment\n        setTimeout(() => {\n          handleDirectToPayment();\n        }, 500); // Small delay to ensure user data is loaded\n      } else if (triggerAddToCart === 'true') {\n        sessionStorage.removeItem('triggerAddToCart');\n        // Trigger add to cart\n        setTimeout(() => {\n          addToCartMutation.mutate();\n        }, 500);\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      // Redirect to login if not authenticated\n      if (!isAuthenticated) {\n        // Store current action in session storage to redirect back after login\n        sessionStorage.setItem('pendingAction', 'add-to-cart');\n        sessionStorage.setItem('pendingProductId', product.id);\n        window.location.href = '/login';\n        return { success: false, redirected: true };\n      }\n\n      // User is authenticated, add to cart normally\n      await apiRequest(\"POST\", \"/api/cart\", { \n        productId: product.id,\n        quantity: 1\n      });\n      return { success: true, localStorage: false };\n    },\n    onSuccess: (result) => {\n      if (result?.redirected) {\n        return; // Don't show toast if redirected to login\n      }\n      \n      if (result && !result.localStorage) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      }\n      // Trigger a window event to notify cart page to refresh\n      window.dispatchEvent(new Event('cartUpdated'));\n      \n      toast({\n        title: \"Added to cart\",\n        description: `${product.name} has been added to your cart.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        if (isInWishlist) {\n          await apiRequest(\"DELETE\", `/api/wishlist/${product.id}`);\n        } else {\n          await apiRequest(\"POST\", \"/api/wishlist\", { \n            productId: product.id\n          });\n        }\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // User not logged in - use local storage for wishlist\n          const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n          \n          if (isInWishlist) {\n            const updatedWishlist = localWishlist.filter((item: any) => item.productId !== product.id);\n            localStorage.setItem('localWishlist', JSON.stringify(updatedWishlist));\n          } else {\n            localWishlist.push({\n              productId: product.id,\n              product: product\n            });\n            localStorage.setItem('localWishlist', JSON.stringify(localWishlist));\n          }\n          \n          // Dispatch custom event to update other components\n          window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      // Also dispatch the custom event to update localStorage-based components\n      window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n      setIsInWishlist(!isInWishlist);\n      toast({\n        title: isInWishlist ? \"Removed from wishlist\" : \"Added to wishlist\",\n        description: `${product.name} has been ${isInWishlist ? \"removed from\" : \"added to\"} your wishlist.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wishlist. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBuyNow = () => {\n    // Redirect to login if not authenticated\n    if (!isAuthenticated) {\n      // Store current action in session storage to redirect back after login\n      sessionStorage.setItem('pendingAction', 'buy-now');\n      sessionStorage.setItem('pendingProductId', product.id);\n      window.location.href = '/login';\n      return;\n    }\n    \n    // Pre-fill user information if available\n    if (user && (!customerDetails.name || !customerDetails.email)) {\n      setCustomerDetails({\n        ...customerDetails,\n        name: user.name || `${user.given_name || ''} ${user.family_name || ''}`.trim(),\n        email: user.email || '',\n      });\n    }\n    \n    // Show customer details form for authenticated users\n    setShowCustomerForm(true);\n  };\n\n  // Handle direct to payment after authentication\n  const handleDirectToPayment = () => {\n    // Pre-fill user information from authenticated user\n    if (user) {\n      const updatedDetails = {\n        name: user.name || `${user.given_name || ''} ${user.family_name || ''}`.trim(),\n        email: user.email || '',\n        contact: '',\n        address: '',\n        city: '',\n        district: '',\n        state: '',\n        pincode: ''\n      };\n      setCustomerDetails(updatedDetails);\n    }\n    \n    // Go directly to payment options\n    setShowPaymentOptions(true);\n  };\n\n  const handleCustomerFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!customerDetails.name || !customerDetails.email || !customerDetails.contact || !customerDetails.address || !customerDetails.city || !customerDetails.district || !customerDetails.state || !customerDetails.pincode) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowCustomerForm(false);\n    // Show payment options modal\n    setShowPaymentOptions(true);\n  };\n\n  const handleDirectRazorpayPayment = async () => {\n    try {\n      // Create Razorpay order directly\n      const response = await fetch('/api/create-razorpay-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount: parseFloat(displayPrice),\n          currency: 'INR'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create payment order');\n      }\n\n      const orderData = await response.json();\n\n      // Load Razorpay script if not already loaded\n      if (!window.Razorpay) {\n        const script = document.createElement('script');\n        script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n        script.onload = () => initializeRazorpay(orderData);\n        document.body.appendChild(script);\n      } else {\n        initializeRazorpay(orderData);\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to initialize payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const initializeRazorpay = (orderData: any) => {\n    const options = {\n      key: import.meta.env.VITE_RAZORPAY_KEY_ID || 'rzp_test_key', // Dynamic Razorpay key\n      amount: orderData.amount,\n      currency: orderData.currency,\n      name: 'IndoSaga Furniture',\n      description: product.name,\n      order_id: orderData.id,\n      prefill: {\n        name: customerDetails.name,\n        email: customerDetails.email,\n        contact: customerDetails.contact,\n      },\n      notes: {\n        address: customerDetails.address,\n        product_id: product.id,\n        product_name: product.name\n      },\n      theme: {\n        color: '#D97706' // Amber-orange color matching logo theme\n      },\n      handler: function (response: any) {\n        handlePaymentSuccess(response);\n      },\n      modal: {\n        ondismiss: function() {\n          console.log('Payment modal dismissed');\n        }\n      }\n    };\n\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  };\n\n  const handlePaymentMethod = (method: string) => {\n    setSelectedPaymentMethod(method);\n    setShowPaymentOptions(false);\n    \n    if (method === 'cod') {\n      handleCODOrder();\n    } else {\n      // Razorpay modal handles its own payment flow\n      // This will be called after successful payment verification\n      handlePaymentSuccess({\n        razorpay_payment_id: 'payment_success',\n        razorpay_order_id: 'order_success',\n        razorpay_signature: 'signature_success',\n        paymentMethod: method\n      });\n    }\n  };\n\n  const handleCODOrder = async () => {\n    try {\n      const orderData = {\n        customerName: customerDetails.name,\n        customerEmail: customerDetails.email,\n        customerPhone: customerDetails.contact,\n        shippingAddress: `${customerDetails.address}, ${customerDetails.city}, ${customerDetails.district}, ${customerDetails.state}`,\n        pincode: customerDetails.pincode,\n        paymentMethod: \"cod\",\n        total: (parseFloat(displayPrice) + 99).toString(), // Add COD fee\n        orderItems: [{\n          productId: product.id,\n          quantity: 1,\n          price: displayPrice\n        }]\n      };\n\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      if (response.ok) {\n        const order = await response.json();\n        setOrderDetails({\n          ...order,\n          paymentMethod: 'cod',\n          product: product,\n          customerDetails: {\n            name: customerDetails.name,\n            email: customerDetails.email,\n            contact: customerDetails.contact,\n            address: customerDetails.address,\n            city: customerDetails.city,\n            district: customerDetails.district,\n            state: customerDetails.state,\n            pincode: customerDetails.pincode\n          }\n        });\n        setShowOrderConfirm(true);\n        // Reset form\n        setCustomerDetails({ name: '', email: '', contact: '', address: '', city: '', district: '', state: '', pincode: '' });\n      } else {\n        throw new Error('Failed to place order');\n      }\n    } catch (error) {\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to place your order. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePaymentSuccess = async (paymentData: any) => {\n    try {\n      // Create final order after successful payment\n      const orderData = {\n        customerName: customerDetails.name,\n        customerEmail: customerDetails.email,\n        customerPhone: customerDetails.contact,\n        shippingAddress: customerDetails.address,\n        pincode: \"110001\",\n        paymentMethod: \"online\",\n        paymentId: paymentData.razorpay_payment_id,\n        razorpayOrderId: paymentData.razorpay_order_id,\n        razorpayPaymentId: paymentData.razorpay_payment_id,\n        razorpaySignature: paymentData.razorpay_signature,\n        total: parseFloat(displayPrice).toString(),\n        orderItems: [{\n          productId: product.id,\n          quantity: 1,\n          price: displayPrice\n        }]\n      };\n\n      const response = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(orderData),\n      });\n\n      if (response.ok) {\n        const order = await response.json();\n        setOrderDetails({\n          ...order,\n          paymentMethod: 'online',\n          product: product,\n          customerDetails: {\n            name: customerDetails.name,\n            email: customerDetails.email,\n            contact: customerDetails.contact,\n            address: customerDetails.address,\n            city: customerDetails.city,\n            district: customerDetails.district,\n            state: customerDetails.state,\n            pincode: customerDetails.pincode\n          }\n        });\n        setShowOrderConfirm(true);\n        // Reset form\n        setCustomerDetails({ name: '', email: '', contact: '', address: '', city: '', district: '', state: '', pincode: '' });\n      } else {\n        throw new Error('Failed to create order');\n      }\n    } catch (error) {\n      toast({\n        title: \"Order Creation Failed\",\n        description: \"Payment was successful but order creation failed. Please contact support.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const displayPrice = product.isDeal && product.dealPrice ? product.dealPrice : product.price;\n  const hasDiscount = product.originalPrice && product.originalPrice !== product.price;\n\n  return (\n    <>\n    <div className=\"bg-white rounded-2xl overflow-hidden shadow-lg hover-lift group relative\">\n      {showDealBadge && product.isDeal && (\n        <div className=\"absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold z-10\">\n          {product.dealPrice === \"1.00\" ? \"₹1 DEAL\" : \"DEAL\"}\n        </div>\n      )}\n      \n      <Link href={`/product/${product.id}`} className=\"block\">\n        <div className=\"aspect-w-16 aspect-h-12 overflow-hidden cursor-pointer\">\n          <img \n            src={product.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\"} \n            alt={product.name}\n            className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n      </Link>\n      \n      <div className=\"p-6\">\n        <Link href={`/product/${product.id}`} className=\"block hover:no-underline\">\n          <h3 className=\"text-xl font-display font-semibold text-darkBrown mb-2 hover:text-primary transition-colors cursor-pointer\" data-testid={`product-name-${product.id}`}>\n            {product.name}\n          </h3>\n        </Link>\n        <p className=\"text-gray-600 mb-4 line-clamp-2\" data-testid={`product-description-${product.id}`}>\n          {product.description || \"No description available\"}\n        </p>\n        \n        <div className=\"flex items-start justify-between mb-4 gap-2\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:space-x-2 flex-1 min-w-0\">\n            <span className=\"text-lg sm:text-2xl font-bold text-primary truncate\" data-testid={`product-price-${product.id}`}>\n              ₹{displayPrice}\n            </span>\n            {hasDiscount && (\n              <span className=\"text-sm sm:text-lg text-gray-500 line-through truncate\" data-testid={`product-original-price-${product.id}`}>\n                ₹{product.originalPrice}\n              </span>\n            )}\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => addToWishlistMutation.mutate()}\n            disabled={addToWishlistMutation.isPending}\n            className={`p-2 flex-shrink-0 ${isInWishlist ? \"text-red-500\" : \"text-gray-400\"} hover:text-red-500`}\n            data-testid={`button-wishlist-${product.id}`}\n          >\n            <Heart className={`h-4 w-4 sm:h-5 sm:w-5 ${isInWishlist ? \"fill-current\" : \"\"}`} />\n          </Button>\n        </div>\n\n        {product.isDeal && product.stock && (\n          <div className=\"text-sm text-gray-600 mb-4\">\n            <span data-testid={`product-stock-${product.id}`}>{product.stock}</span> left\n          </div>\n        )}\n        \n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={() => addToCartMutation.mutate()}\n            disabled={addToCartMutation.isPending}\n            className=\"flex-1 bg-primary text-white hover:bg-opacity-90 transition-opacity\"\n            data-testid={`button-add-to-cart-${product.id}`}\n          >\n            <ShoppingCart className=\"mr-2 h-4 w-4\" />\n            {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n          </Button>\n          <Button\n            onClick={handleBuyNow}\n            disabled={addToCartMutation.isPending}\n            className=\"flex-1 wood-texture text-white hover:opacity-90 transition-opacity\"\n            data-testid={`button-buy-now-${product.id}`}\n          >\n            Buy Now\n          </Button>\n        </div>\n      </div>\n    </div>\n\n    {/* Enhanced Customer Details Form Modal */}\n    {showCustomerForm && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-60 z-[60] flex items-center justify-center p-4 backdrop-blur-sm pt-24\">\n        <Card className=\"w-full max-w-md max-h-[90vh] overflow-hidden rounded-2xl shadow-2xl border-0 bg-gradient-to-br from-white via-warmWhite to-white\">\n          <CardHeader className=\"flex flex-row items-center justify-between p-6 bg-gradient-to-r from-amber-50 to-orange-50 border-b border-amber-100\">\n            <div>\n              <CardTitle className=\"text-xl text-darkBrown font-display\">Enter Your Details</CardTitle>\n              <p className=\"text-sm text-primary mt-1\">Complete your purchase securely</p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowCustomerForm(false)} className=\"hover:bg-amber-100 rounded-full\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"max-h-[60vh] overflow-y-auto px-6 py-4 space-y-4\">\n              <form onSubmit={handleCustomerFormSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-darkBrown\">Full Name *</label>\n                    <Input\n                      placeholder=\"Enter your full name\"\n                      value={customerDetails.name}\n                      onChange={(e) => setCustomerDetails({...customerDetails, name: e.target.value})}\n                      required\n                      className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-darkBrown\">Email Address *</label>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"Enter your email address\"\n                      value={customerDetails.email}\n                      onChange={(e) => setCustomerDetails({...customerDetails, email: e.target.value})}\n                      required\n                      className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-darkBrown\">Phone Number *</label>\n                    <Input\n                      type=\"tel\"\n                      placeholder=\"Enter your phone number\"\n                      value={customerDetails.contact}\n                      onChange={(e) => setCustomerDetails({...customerDetails, contact: e.target.value})}\n                      required\n                      className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-darkBrown\">Delivery Address *</label>\n                    <Input\n                      placeholder=\"Enter your complete delivery address\"\n                      value={customerDetails.address}\n                      onChange={(e) => setCustomerDetails({...customerDetails, address: e.target.value})}\n                      required\n                      className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-darkBrown\">City *</label>\n                      <Input\n                        placeholder=\"City\"\n                        value={customerDetails.city}\n                        onChange={(e) => setCustomerDetails({...customerDetails, city: e.target.value})}\n                        required\n                        className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-darkBrown\">District *</label>\n                      <Input\n                        placeholder=\"District\"\n                        value={customerDetails.district}\n                        onChange={(e) => setCustomerDetails({...customerDetails, district: e.target.value})}\n                        required\n                        className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-darkBrown\">State *</label>\n                      <Input\n                        placeholder=\"State\"\n                        value={customerDetails.state}\n                        onChange={(e) => setCustomerDetails({...customerDetails, state: e.target.value})}\n                        required\n                        className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-medium text-darkBrown\">Pincode *</label>\n                      <Input\n                        placeholder=\"Pincode\"\n                        value={customerDetails.pincode}\n                        onChange={(e) => setCustomerDetails({...customerDetails, pincode: e.target.value})}\n                        required\n                        className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 p-4 rounded-xl border border-amber-100 mt-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-lg font-semibold text-darkBrown\">Total Amount:</span>\n                    <span className=\"text-2xl font-bold text-primary\">₹{displayPrice}</span>\n                  </div>\n                  <p className=\"text-xs text-gray-600 mt-1\">Inclusive of all taxes</p>\n                </div>\n                <div className=\"pt-4 pb-2 space-y-3\">\n                  <Button type=\"submit\" className=\"w-full h-12 bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 hover:from-amber-700 hover:via-orange-700 hover:to-amber-800 text-white font-semibold shadow-lg rounded-xl transition-all duration-300\">\n                    Continue to Payment Options\n                  </Button>\n                  <Button \n                    type=\"button\"\n                    onClick={() => setShowCustomerForm(false)}\n                    className=\"w-full h-12 bg-gradient-to-r from-gray-500 via-gray-600 to-gray-700 hover:from-gray-600 hover:via-gray-700 hover:to-gray-800 text-white font-semibold shadow-lg rounded-xl transition-all duration-300\"\n                    data-testid=\"button-back-customer-form\"\n                  >\n                    ← Back\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    )}\n\n    {/* Payment Options Modal */}\n    <RazorpayPaymentModal\n      isOpen={showPaymentOptions}\n      onClose={() => setShowPaymentOptions(false)}\n      onSelectMethod={handlePaymentMethod}\n      total={parseFloat(displayPrice)}\n      phoneNumber={customerDetails.contact}\n      customerDetails={customerDetails}\n      productDetails={product}\n    />\n\n\n    {/* Order Confirmation Modal */}\n    {showOrderConfirm && orderDetails && (\n      <div className=\"fixed inset-0 bg-black bg-opacity-60 z-[9999] flex items-center justify-center p-1 sm:p-2 md:p-3 lg:p-4 backdrop-blur-sm\">\n        <Card className=\"w-full max-w-[95vw] sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-2xl max-h-[95vh] modal-mobile-compact overflow-hidden rounded-md sm:rounded-lg md:rounded-xl lg:rounded-2xl shadow-2xl border-0 bg-gradient-to-br from-white via-warmWhite to-white relative\" \n              style={{ \n                backgroundImage: 'url(/indosaga-logo.png)', \n                backgroundSize: '120px', \n                backgroundRepeat: 'no-repeat', \n                backgroundPosition: 'center center'\n              }}>\n          <div className=\"absolute inset-0 bg-white bg-opacity-95 rounded-2xl\"></div>\n          <div className=\"relative z-10\">\n          <CardHeader className=\"text-center p-1 sm:p-2 md:p-3 lg:p-4 xl:p-5 bg-gradient-to-r from-amber-50 to-orange-50 border-b border-amber-100 relative\">\n            <Button\n              onClick={() => {\n                setShowOrderConfirm(false);\n                setOrderDetails(null);\n              }}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"absolute top-2 right-2 sm:top-3 sm:right-3 md:top-4 md:right-4 w-6 h-6 sm:w-7 sm:h-7 md:w-8 md:h-8 p-0 rounded-full hover:bg-gray-100 transition-colors\"\n            >\n              <X className=\"h-3 w-3 sm:h-4 sm:w-4 text-gray-500\" />\n            </Button>\n            <div className=\"flex flex-col items-center space-y-0.5 sm:space-y-1 md:space-y-2\">\n              <div className=\"w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14 lg:w-16 lg:h-16 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-5 w-5 sm:h-6 sm:w-6 md:h-7 md:w-7 lg:h-8 lg:w-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-base sm:text-lg md:text-xl text-darkBrown font-display\">Order Confirmed!</CardTitle>\n              <p className=\"text-xs sm:text-sm text-gray-600\">Your order has been successfully placed</p>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0 flex flex-col\">\n            <div className=\"flex-1 overflow-y-auto px-1 sm:px-2 md:px-3 lg:px-4 xl:px-6 py-1 sm:py-2 md:py-3 lg:py-4 xl:py-6 space-y-1 sm:space-y-2 md:space-y-3 lg:space-y-4 modal-content-scroll\" style={{maxHeight: 'calc(95vh - 180px)', margin: '1px'}}>\n              <div className=\"bg-gray-50 rounded-md sm:rounded-lg md:rounded-xl p-1 sm:p-2 md:p-3 lg:p-4 space-y-0.5 sm:space-y-1 md:space-y-2 lg:space-y-3\">\n                <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-1 sm:space-y-0\">\n                  <span className=\"text-xs sm:text-sm text-gray-600\">Order ID:</span>\n                  <span className=\"font-mono text-xs sm:text-sm font-semibold\">{orderDetails.id?.slice(-8)}</span>\n                </div>\n                <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-1 sm:space-y-0\">\n                  <span className=\"text-xs sm:text-sm text-gray-600\">Payment Method:</span>\n                  <span className=\"text-xs sm:text-sm font-medium capitalize\">{orderDetails.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment'}</span>\n                </div>\n                <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-1 sm:space-y-0\">\n                  <span className=\"text-xs sm:text-sm text-gray-600\">Total Amount:</span>\n                  <span className=\"text-base sm:text-lg font-bold text-primary\">₹{orderDetails.total}</span>\n                </div>\n              </div>\n              \n              <div className=\"space-y-1 sm:space-y-2 md:space-y-3\">\n                <h4 className=\"font-semibold text-xs sm:text-sm md:text-base text-darkBrown\">Product Details:</h4>\n                <div className=\"flex items-center space-x-1 sm:space-x-2 md:space-x-3 p-1 sm:p-2 md:p-3 bg-amber-50 rounded-md sm:rounded-lg border border-amber-200\">\n                  <img \n                    src={product.imageUrl || '/placeholder-furniture.jpg'} \n                    alt={product.name}\n                    className=\"w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 object-cover rounded\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-xs sm:text-sm\">{product.name}</div>\n                    <div className=\"text-xs text-gray-600\">Qty: 1</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-1 sm:space-y-2 md:space-y-3\">\n                <h4 className=\"font-semibold text-xs sm:text-sm md:text-base text-darkBrown\">Delivery Address:</h4>\n                <div className=\"text-xs sm:text-sm text-gray-600 bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 p-1 sm:p-2 md:p-3 rounded-md sm:rounded-lg\">\n                  <div className=\"font-medium text-darkBrown\">{orderDetails.customerDetails?.name || customerDetails.name}</div>\n                  <div>{orderDetails.customerDetails?.address || customerDetails.address}</div>\n                  <div>{(orderDetails.customerDetails?.city || customerDetails.city)}, {(orderDetails.customerDetails?.district || customerDetails.district)}</div>\n                  <div>{(orderDetails.customerDetails?.state || customerDetails.state)} - {(orderDetails.customerDetails?.pincode || customerDetails.pincode)}</div>\n                  <div>Phone: {orderDetails.customerDetails?.contact || customerDetails.contact}</div>\n                </div>\n              </div>\n              \n              {orderDetails.paymentMethod === 'cod' && (\n                <div className=\"bg-orange-50 border border-orange-200 rounded-md sm:rounded-lg p-1 sm:p-2 md:p-3 lg:p-4\">\n                  <div className=\"text-xs sm:text-sm text-orange-800\">\n                    <strong>Cash on Delivery:</strong> Please keep exact change ready. Our delivery partner will contact you before delivery.\n                  </div>\n                </div>\n              )}\n              \n              {/* Product Care Instructions */}\n              <div className=\"space-y-1 sm:space-y-2 md:space-y-3\">\n                <h4 className=\"font-semibold text-xs sm:text-sm md:text-base text-darkBrown\">📋 Product Care & Instructions:</h4>\n                <div className=\"bg-blue-50 border border-blue-200 rounded-md sm:rounded-lg p-1 sm:p-2 md:p-3 lg:p-4 space-y-0.5 sm:space-y-1 md:space-y-2\">\n                  <div className=\"text-xs sm:text-sm text-blue-800\">\n                    <div className=\"mb-1 sm:mb-2\"><strong>🌿 Teak Wood Care:</strong></div>\n                    <ul className=\"space-y-1 ml-2 sm:ml-4\">\n                      <li>• Clean with dry/damp cloth regularly</li>\n                      <li>• Apply teak oil every 6 months for longevity</li>\n                      <li>• Avoid direct sunlight and moisture</li>\n                      <li>• Use coasters to prevent water marks</li>\n                    </ul>\n                  </div>\n                </div>\n                <div className=\"bg-green-50 border border-green-200 rounded-md sm:rounded-lg p-1 sm:p-2 md:p-3 lg:p-4 space-y-0.5 sm:space-y-1 md:space-y-2\">\n                  <div className=\"text-xs sm:text-sm text-green-800\">\n                    <div className=\"mb-1 sm:mb-2\"><strong>📦 Delivery & Assembly:</strong></div>\n                    <ul className=\"space-y-1 ml-2 sm:ml-4\">\n                      <li>• Free delivery within 7-14 working days</li>\n                      <li>• Professional assembly service available</li>\n                      <li>• Check items upon delivery</li>\n                      <li>• 30-day return policy available</li>\n                    </ul>\n                  </div>\n                </div>\n                <div className=\"bg-amber-50 border border-amber-200 rounded-md sm:rounded-lg p-1 sm:p-2 md:p-3 lg:p-4 space-y-0.5 sm:space-y-1 md:space-y-2\">\n                  <div className=\"text-xs sm:text-sm text-amber-800\">\n                    <div className=\"mb-1 sm:mb-2\"><strong>🛡️ Warranty & Support:</strong></div>\n                    <ul className=\"space-y-1 ml-2 sm:ml-4\">\n                      <li>• 2-year warranty on manufacturing defects</li>\n                      <li>• 24/7 customer support: +91 98765 43210</li>\n                      <li>• WhatsApp support available</li>\n                      <li>• Email: support@indosaga.com</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-2 sm:p-3 md:p-4 lg:p-5 space-y-2 sm:space-y-3 border-t border-gray-100 bg-white rounded-b-lg sm:rounded-b-xl md:rounded-b-2xl flex-shrink-0 safe-area-inset-bottom mobile-button-spacing overflow-y-auto modal-button-scroll min-h-[120px] max-h-[150px]\">\n              <Button \n                onClick={() => {\n                  // Generate and download receipt\n                  const receiptData = {\n                    orderId: orderDetails.id,\n                    customerName: orderDetails.customerDetails?.name || customerDetails.name,\n                    date: new Date().toLocaleDateString(),\n                    items: [{ name: product.name, qty: 1, price: displayPrice }],\n                    total: orderDetails.total,\n                    paymentMethod: orderDetails.paymentMethod,\n                    address: `${orderDetails.customerDetails?.address || customerDetails.address}, ${orderDetails.customerDetails?.city || customerDetails.city}, ${orderDetails.customerDetails?.state || customerDetails.state} - ${orderDetails.customerDetails?.pincode || customerDetails.pincode}`\n                  };\n                  \n                  const receiptText = `\n=======================================\n    🏺 INDOSAGA FURNITURE 🏺\n      Premium Teak Wood Specialist\n        📧 ORDER RECEIPT 📧\n=======================================\n\n📅 Date: ${receiptData.date}\n🆔 Order ID: ${receiptData.orderId?.slice(-8)}\n👤 Customer: ${receiptData.customerName}\n\n📦 PRODUCT DETAILS:\n${receiptData.items.map(item => `${item.name} x${item.qty} - ₹${item.price}`).join('\\n')}\n\n💰 PAYMENT SUMMARY:\nSubtotal: ₹${receiptData.total}\nDelivery: FREE (Premium Service)\nExtra Charges: NONE\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nTotal Amount: ₹${receiptData.total}\nPayment Method: ${receiptData.paymentMethod === 'cod' ? '💵 Cash on Delivery' : '💳 Online Payment'}\n\n🏠 DELIVERY ADDRESS:\n${receiptData.address}\n\n📋 PRODUCT CARE INSTRUCTIONS:\n🌿 TEAK WOOD CARE:\n• Clean with dry/damp cloth regularly\n• Apply teak oil every 6 months\n• Avoid direct sunlight and moisture\n• Use coasters to prevent water marks\n\n📦 DELIVERY & ASSEMBLY:\n• Free delivery within 7-14 working days\n• Professional assembly service available\n• Check items upon delivery\n• 30-day return policy available\n\n🛡️ WARRANTY & SUPPORT:\n• 2-year warranty on manufacturing defects\n• 24/7 customer support: +91 98765 43210\n• WhatsApp support available\n• Email: support@indosaga.com\n\n🌟 Thank you for choosing IndoSaga! 🌟\n🌐 Website: www.indosaga.com\n📱 WhatsApp: +91 98765 43210\n📧 Email: support@indosaga.com\n\n=======================================\n        Premium Teak Wood Furniture\n     🏺 IndoSaga - Crafting Excellence 🏺\n=======================================\n                  `;\n                  \n                  const blob = new Blob([receiptText], { type: 'text/plain' });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `receipt-${orderDetails.id?.slice(-8)}.txt`;\n                  a.click();\n                  URL.revokeObjectURL(url);\n                  \n                  toast({\n                    title: \"Receipt Downloaded!\",\n                    description: \"Your order receipt has been downloaded successfully.\",\n                  });\n                }}\n                className=\"w-full h-10 sm:h-11 md:h-12 text-xs sm:text-sm md:text-base bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 hover:from-amber-700 hover:via-orange-700 hover:to-amber-800 text-white font-semibold shadow-lg rounded-lg sm:rounded-xl border-2 border-amber-200 hover:border-amber-300 transition-all duration-300\"\n              >\n                📥 Download Receipt\n              </Button>\n              <Button \n                onClick={() => {\n                  setShowOrderConfirm(false);\n                  setOrderDetails(null);\n                  // Navigate to profile orders section\n                  window.location.href = '/profile#orders';\n                }}\n                className=\"w-full h-10 sm:h-11 md:h-12 text-xs sm:text-sm md:text-base bg-gradient-to-r from-green-600 via-emerald-600 to-green-700 hover:from-green-700 hover:via-emerald-700 hover:to-green-800 text-white font-semibold shadow-lg rounded-lg sm:rounded-xl border-2 border-green-200 hover:border-green-300 transition-all duration-300\"\n                data-testid=\"button-view-order-history\"\n              >\n                📋 View Order Details\n              </Button>\n            </div>\n          </CardContent>\n          </div>\n        </Card>\n      </div>\n    )}\n\n    </>\n  );\n}\n","size_bytes":39475},"client/src/components/scroll-to-top.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowUp } from \"lucide-react\";\n\nexport default function ScrollToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.pageYOffset > 300) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", toggleVisibility);\n\n    return () => window.removeEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <Button\n      onClick={scrollToTop}\n      className=\"fixed bottom-4 right-4 md:right-8 w-12 h-12 wood-texture rounded-full shadow-lg flex items-center justify-center text-white hover:opacity-90 transition-opacity z-40\"\n      data-testid=\"button-scroll-to-top\"\n    >\n      <ArrowUp className=\"h-5 w-5\" />\n    </Button>\n  );\n}\n","size_bytes":1042},"client/src/components/wishlist-modal.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { X, Heart, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport type { WishlistItem, Product } from \"@shared/schema\";\n\ninterface WishlistModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function WishlistModal({ isOpen, onClose }: WishlistModalProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [localWishlistItems, setLocalWishlistItems] = useState<any[]>([]);\n\n  // Load local wishlist items from localStorage\n  useEffect(() => {\n    if (isOpen) {\n      const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n      setLocalWishlistItems(localWishlist);\n    }\n  }, [isOpen]);\n\n  // Listen for localStorage changes\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n      setLocalWishlistItems(localWishlist);\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Custom event for same-tab localStorage updates\n    window.addEventListener('localWishlistUpdate', handleStorageChange);\n    \n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('localWishlistUpdate', handleStorageChange);\n    };\n  }, []);\n\n  const { data: apiWishlistItems = [], isLoading } = useQuery<(WishlistItem & { product: Product })[]>({\n    queryKey: [\"/api/wishlist\"],\n    enabled: isOpen,\n  });\n\n  // Combine API and localStorage wishlist items, avoiding duplicates\n  const combinedWishlistItems = apiWishlistItems.length > 0 ? apiWishlistItems : localWishlistItems;\n  \n  // Remove duplicates based on productId to avoid key conflicts\n  const uniqueWishlistItems = combinedWishlistItems.filter((item, index, array) => \n    array.findIndex(i => i.productId === item.productId) === index\n  );\n  \n  const wishlistItems = uniqueWishlistItems;\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      try {\n        await apiRequest(\"DELETE\", `/api/wishlist/${productId}`);\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // User not logged in - use local storage for wishlist\n          const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n          const updatedWishlist = localWishlist.filter((item: any) => item.productId !== productId);\n          localStorage.setItem('localWishlist', JSON.stringify(updatedWishlist));\n          \n          // Dispatch custom event to update other components\n          window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      // Also dispatch the custom event to update localStorage-based components\n      window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n      toast({\n        title: \"Removed from wishlist\",\n        description: \"Item has been removed from your wishlist.\",\n      });\n    },\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"POST\", \"/api/cart\", { \n        productId,\n        quantity: 1\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to cart\",\n        description: \"Item has been moved to your cart.\",\n      });\n    },\n  });\n\n  const handleBuyNow = (productId: string) => {\n    addToCartMutation.mutate(productId);\n    setTimeout(() => {\n      onClose();\n      window.location.href = \"/cart\";\n    }, 1000);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-end\">\n      <div className=\"w-full max-w-md bg-white h-full shadow-2xl transform transition-transform duration-300 flex flex-col\">\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h3 className=\"text-xl font-display font-semibold text-darkBrown\">Wishlist</h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            data-testid=\"button-close-wishlist\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"bg-gray-100 rounded-lg p-4 animate-pulse\">\n                  <div className=\"flex space-x-4\">\n                    <div className=\"w-16 h-16 bg-gray-200 rounded-lg\" />\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 rounded\" />\n                      <div className=\"h-4 bg-gray-200 rounded w-2/3\" />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : wishlistItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-gray-400 mb-4\">\n                <Heart className=\"w-16 h-16 mx-auto\" />\n              </div>\n              <h4 className=\"text-lg font-semibold text-gray-700 mb-2\">Your wishlist is empty</h4>\n              <p className=\"text-gray-500\">Save items you love to buy them later!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\" data-testid=\"wishlist-items\">\n              {wishlistItems.map((item: any, index: number) => (\n                <div key={item.id || item.productId || index} className=\"bg-beige rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-4 mb-3\">\n                    <img \n                      src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80\"} \n                      alt={item.product?.name}\n                      className=\"w-16 h-16 object-cover rounded-lg\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-semibold text-darkBrown\" data-testid={`wishlist-item-name-${item.id}`}>\n                        {item.product?.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\" data-testid={`wishlist-item-price-${item.id}`}>\n                        ₹{item.product?.price}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFromWishlistMutation.mutate(item.productId)}\n                      disabled={removeFromWishlistMutation.isPending}\n                      className=\"text-red-500 hover:text-red-600 hover:bg-red-50\"\n                      data-testid={`button-remove-wishlist-${item.id}`}\n                      title=\"Remove from wishlist\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      onClick={() => addToCartMutation.mutate(item.productId)}\n                      disabled={addToCartMutation.isPending}\n                      className=\"flex-1 bg-primary text-white text-sm py-2 hover:bg-opacity-90 transition-opacity\"\n                      data-testid={`button-move-to-cart-${item.id}`}\n                    >\n                      <ShoppingCart className=\"mr-2 h-3 w-3\" />\n                      {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n                    </Button>\n                    <Button\n                      onClick={() => handleBuyNow(item.productId)}\n                      disabled={addToCartMutation.isPending}\n                      className=\"flex-1 wood-texture text-white text-sm py-2 hover:opacity-90 transition-opacity\"\n                      data-testid={`button-buy-now-wishlist-${item.id}`}\n                    >\n                      Buy Now\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8595},"client/src/hooks/use-auth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useUserData() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":261},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth-utils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Leaf, Gem, Award, Users, Clock } from \"lucide-react\";\nimport handCarvedImage from \"@assets/Hand-Carved-Furniture-2_1756879424815.jpg\";\n\n// Custom hook for counting animation\nconst useCountingAnimation = (targetValue: number, isVisible: boolean, duration: number = 2000) => {\n  const [currentValue, setCurrentValue] = useState(0);\n  \n  useEffect(() => {\n    if (!isVisible) return;\n    \n    const startTime = Date.now();\n    const startValue = 0;\n    \n    const updateCount = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Easing function for smooth animation\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      const newValue = Math.floor(startValue + (targetValue - startValue) * easeOutQuart);\n      \n      setCurrentValue(newValue);\n      \n      if (progress < 1) {\n        requestAnimationFrame(updateCount);\n      } else {\n        setCurrentValue(targetValue);\n      }\n    };\n    \n    requestAnimationFrame(updateCount);\n  }, [targetValue, isVisible, duration]);\n  \n  return currentValue;\n};\n\n// Custom hook for intersection observer\nconst useIntersectionObserver = (threshold: number = 0.3) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const elementRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      },\n      { threshold }\n    );\n    \n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n    \n    return () => {\n      if (elementRef.current) {\n        observer.unobserve(elementRef.current);\n      }\n    };\n  }, [threshold]);\n  \n  return { isVisible, elementRef };\n};\n\nexport default function About() {\n  // Intersection observer for statistics animation\n  const { isVisible, elementRef } = useIntersectionObserver(0.3);\n  \n  // Animated counting values for statistics\n  const animatedTrees = useCountingAnimation(10000, isVisible, 2500);\n  const animatedPercentage = useCountingAnimation(100, isVisible, 2000);\n  const animatedYears = useCountingAnimation(50, isVisible, 1800);\n\n  const advantages = [\n    {\n      icon: Shield,\n      title: \"Durability\",\n      description: \"Natural oils make IndoSaga wood resistant to insects, decay, and weather conditions, ensuring your furniture lasts for generations.\"\n    },\n    {\n      icon: Leaf,\n      title: \"Sustainability\", \n      description: \"We source our wood from responsibly managed forests with proper certifications, supporting environmental conservation.\"\n    },\n    {\n      icon: Gem,\n      title: \"Beauty\",\n      description: \"Unique grain patterns and rich color that develops character over time, making each piece truly one-of-a-kind.\"\n    },\n    {\n      icon: Award,\n      title: \"Craftsmanship\",\n      description: \"Handcrafted by master artisans with decades of experience, ensuring exceptional quality in every detail.\"\n    },\n    {\n      icon: Users,\n      title: \"Heritage\",\n      description: \"Three generations of furniture-making expertise passed down through our family, preserving traditional techniques.\"\n    },\n    {\n      icon: Clock,\n      title: \"Timeless\",\n      description: \"Classic designs that never go out of style, making your investment valuable for years to come.\"\n    }\n  ];\n\n  const milestones = [\n    { year: \"1965\", event: \"Founded by master craftsman Raghunath Sharma\" },\n    { year: \"1982\", event: \"Expanded to modern showroom in Mumbai\" },\n    { year: \"1995\", event: \"Introduced sustainable sourcing practices\" },\n    { year: \"2010\", event: \"Third generation joins the family business\" },\n    { year: \"2020\", event: \"Launched online presence and nationwide delivery\" },\n    { year: \"2024\", event: \"50,000+ happy customers and counting\" }\n  ];\n\n  return (\n    <div className=\"py-20 bg-gradient-to-br from-primary/10 via-accent/10 to-warmWhite min-h-screen relative overflow-hidden\">\n      {/* Background Decorative Elements */}\n      <div className=\"absolute top-20 left-10 w-40 h-40 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-10 animate-pulse\"></div>\n      <div className=\"absolute top-60 right-20 w-32 h-32 bg-gradient-to-br from-accent/20 to-primary/15 rounded-full opacity-10 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n      <div className=\"absolute bottom-40 left-1/4 w-24 h-24 bg-gradient-to-br from-accent/25 to-primary/10 rounded-full opacity-10 animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      <div className=\"absolute bottom-60 right-1/3 w-36 h-36 bg-gradient-to-br from-primary/25 to-accent/20 rounded-full opacity-10 animate-pulse\" style={{ animationDelay: '3s' }}></div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-20 animate-slideInUp\">\n          <div className=\"inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-8 py-3 mb-8 shadow-lg animate-slideInDown\">\n            <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-accent rounded-full mr-4 animate-pulse\"></div>\n            <span className=\"text-primary font-bold text-lg\">Heritage & Craftsmanship</span>\n          </div>\n          <h1 className=\"text-5xl md:text-7xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-8 animate-slideInUp\">\n            The Heritage of IndoSaga Wood\n          </h1>\n          <p className=\"text-2xl text-gray-700 max-w-4xl mx-auto leading-relaxed animate-slideInUp\" style={{ animationDelay: '0.3s' }}>\n            For over three generations, we have been crafting premium furniture from the finest IndoSaga (Teak) wood. \n            Our legacy began in 1965 when our founder discovered the exceptional qualities of this remarkable timber.\n          </p>\n        </div>\n\n        {/* Story Section */}\n        <div className=\"bg-gradient-to-r from-white via-warmWhite to-white rounded-3xl shadow-2xl p-12 mb-20 relative overflow-hidden group animate-slideInUp\" style={{ animationDelay: '0.5s' }}>\n          <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-10 group-hover:opacity-20 transition-opacity duration-500\"></div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center relative z-10\">\n            <div className=\"animate-slideInLeft\">\n              <div className=\"inline-flex items-center bg-gradient-to-r from-primary/20 to-accent/20 rounded-full px-6 py-2 mb-6 shadow-lg\">\n                <span className=\"text-primary font-bold text-sm\">Our Heritage</span>\n              </div>\n              <h2 className=\"text-4xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-8\">Our Story</h2>\n              <div className=\"space-y-6 text-lg text-gray-700 leading-relaxed\">\n                <p className=\"animate-slideInUp\" style={{ animationDelay: '0.7s' }}>\n                  <span className=\"text-2xl font-bold text-accent float-left mr-2\">I</span>ndoSaga Furniture was born from a passion for preserving the ancient art of woodworking. \n                  Our founder, master craftsman <span className=\"font-semibold text-primary\">Raghunath Sharma</span>, started with a simple vision: to create \n                  furniture that would be treasured for generations.\n                </p>\n                <p className=\"animate-slideInUp\" style={{ animationDelay: '0.9s' }}>\n                  What began as a small workshop in Mumbai has grown into one of India's most trusted \n                  names in premium teak furniture. Yet, we've never lost sight of our core values: \n                  <span className=\"font-semibold text-primary\"> quality, craftsmanship, and sustainability</span>.\n                </p>\n                <p className=\"animate-slideInUp\" style={{ animationDelay: '1.1s' }}>\n                  Today, we continue to honor traditional techniques while embracing modern innovations, \n                  ensuring that every piece of IndoSaga furniture tells a story of excellence.\n                </p>\n              </div>\n              \n              <div className=\"mt-10 space-y-5\">\n                {[\n                  \"100% Natural IndoSaga Wood\",\n                  \"Handcrafted by Master Artisans\", \n                  \"Lifetime Warranty\",\n                  \"Sustainable Sourcing\"\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center space-x-4 group/item animate-slideInRight\" style={{ animationDelay: `${1.3 + (index * 0.1)}s` }}>\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center shadow-lg group-hover/item:shadow-xl transition-all duration-300 group-hover/item:scale-110\">\n                      <svg className=\"w-5 h-5 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                        <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                      </svg>\n                    </div>\n                    <span className=\"text-gray-700 font-semibold text-lg group-hover/item:text-primary transition-colors duration-300\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"animate-slideInRight\" style={{ animationDelay: '0.6s' }}>\n              <div className=\"relative group/image\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary to-accent rounded-3xl blur-lg opacity-30 group-hover/image:opacity-50 transition-opacity duration-500\"></div>\n                <img \n                  src={handCarvedImage} \n                  alt=\"Master craftsman hand-carving IndoSaga furniture with traditional tools\" \n                  className=\"relative rounded-3xl shadow-2xl w-full h-96 object-cover transform transition-all duration-500 group-hover/image:scale-105 group-hover/image:shadow-3xl\"\n                />\n                {/* Clean Border Effect Only */}\n                <div className=\"absolute inset-0 rounded-3xl ring-4 ring-accent/30 ring-opacity-50 group-hover/image:ring-opacity-100 transition-all duration-500\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Why Choose IndoSaga Wood */}\n        <div className=\"mb-24 animate-slideInUp\" style={{ animationDelay: '1.5s' }}>\n          <div className=\"text-center mb-16\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-8 py-3 mb-6 shadow-lg animate-slideInDown\" style={{ animationDelay: '1.6s' }}>\n              <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-accent rounded-full mr-4 animate-pulse\"></div>\n              <span className=\"text-primary font-bold text-lg\">Premium Quality</span>\n            </div>\n            <h2 className=\"text-5xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-6 animate-slideInUp\" style={{ animationDelay: '1.7s' }}>Why Choose IndoSaga Wood?</h2>\n            <p className=\"text-2xl text-gray-700 max-w-3xl mx-auto leading-relaxed animate-slideInUp\" style={{ animationDelay: '1.8s' }}>Discover the exceptional qualities that make IndoSaga the premium choice for discerning homeowners</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n            {advantages.map((advantage, index) => (\n              <Card key={index} className=\"group border-0 shadow-xl hover:shadow-3xl transition-all duration-500 bg-gradient-to-br from-white via-warmWhite to-accent/5 relative overflow-hidden animate-slideInUp\" style={{ animationDelay: `${2 + (index * 0.1)}s` }}>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-amber-50/50 to-orange-50/50 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-amber-200 to-orange-200 rounded-full opacity-10 group-hover:opacity-30 transition-opacity duration-500 transform translate-x-6 -translate-y-6\"></div>\n                \n                <CardContent className=\"p-10 text-center relative z-10\">\n                  <div className=\"w-20 h-20 bg-gradient-to-br from-primary to-accent rounded-full mx-auto mb-8 flex items-center justify-center shadow-lg group-hover:shadow-2xl transition-all duration-500 group-hover:scale-110 group-hover:rotate-12\">\n                    <advantage.icon className=\"h-10 w-10 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-display font-bold text-primary mb-6 group-hover:text-primary/80 transition-colors duration-300\">\n                    {advantage.title}\n                  </h3>\n                  <p className=\"text-gray-600 leading-relaxed text-lg group-hover:text-gray-700 transition-colors duration-300\">\n                    {advantage.description}\n                  </p>\n                  \n                  <div className=\"mt-6 w-full h-1 bg-gradient-to-r from-primary/20 to-accent/20 rounded-full overflow-hidden\">\n                    <div className=\"w-0 h-full bg-gradient-to-r from-primary to-accent rounded-full group-hover:w-full transition-all duration-1000 ease-out\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Our Journey */}\n        <div className=\"mb-24 animate-slideInUp\" style={{ animationDelay: '2.5s' }}>\n          <div className=\"text-center mb-16\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-8 py-3 mb-6 shadow-lg animate-slideInDown\" style={{ animationDelay: '2.6s' }}>\n              <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-accent rounded-full mr-4 animate-pulse\"></div>\n              <span className=\"text-primary font-bold text-lg\">Legacy Timeline</span>\n            </div>\n            <h2 className=\"text-5xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-6 animate-slideInUp\" style={{ animationDelay: '2.7s' }}>Our Journey</h2>\n            <p className=\"text-2xl text-gray-700 max-w-3xl mx-auto leading-relaxed animate-slideInUp\" style={{ animationDelay: '2.8s' }}>Milestones that shaped our legacy of excellence and innovation</p>\n          </div>\n          \n          <div className=\"max-w-5xl mx-auto relative\">\n            {/* Timeline Line */}\n            <div className=\"absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-primary via-accent to-primary rounded-full opacity-30\"></div>\n            \n            <div className=\"space-y-12\">\n              {milestones.map((milestone, index) => (\n                <div key={index} className={`flex items-center ${index % 2 === 0 ? 'flex-row' : 'flex-row-reverse'} group animate-slideInUp`} style={{ animationDelay: `${3 + (index * 0.2)}s` }}>\n                  <div className=\"flex-1 px-8\">\n                    <div className={`bg-gradient-to-br from-white via-warmWhite to-accent/5 rounded-2xl p-8 shadow-xl group-hover:shadow-3xl transition-all duration-500 relative overflow-hidden ${index % 2 === 0 ? 'text-right' : 'text-left'}`}>\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-amber-50/30 to-orange-50/30 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                      <div className={`absolute ${index % 2 === 0 ? 'top-0 left-0' : 'top-0 right-0'} w-16 h-16 bg-gradient-to-br from-amber-200 to-orange-200 rounded-full opacity-10 group-hover:opacity-30 transition-opacity duration-500 transform ${index % 2 === 0 ? '-translate-x-4 -translate-y-4' : 'translate-x-4 -translate-y-4'}`}></div>\n                      \n                      <div className=\"relative z-10\">\n                        <h3 className=\"text-2xl font-bold text-primary mb-4\">{milestone.year}</h3>\n                        <p className=\"text-gray-700 font-medium text-lg leading-relaxed\">{milestone.event}</p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Center Circle */}\n                  <div className=\"flex-shrink-0 relative z-10\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full shadow-lg flex items-center justify-center group-hover:scale-125 transition-transform duration-500\">\n                      <div className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center\">\n                        <div className=\"w-4 h-4 bg-gradient-to-br from-primary to-accent rounded-full animate-pulse\"></div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex-1 px-8\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Sustainability Section */}\n        <Card className=\"bg-gradient-to-br from-accent/10 via-warmWhite to-primary/5 border-0 shadow-3xl relative overflow-hidden animate-slideInUp\" style={{ animationDelay: '4s' }}>\n          <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-accent/10 opacity-50\"></div>\n          <div className=\"absolute top-0 left-0 w-40 h-40 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-20 transform -translate-x-16 -translate-y-16\"></div>\n          <div className=\"absolute bottom-0 right-0 w-32 h-32 bg-gradient-to-br from-accent/20 to-primary/15 rounded-full opacity-20 transform translate-x-12 translate-y-12\"></div>\n          \n          <CardContent className=\"p-16 text-center relative z-10\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"inline-flex items-center bg-gradient-to-r from-green-100 to-accent/10 rounded-full px-8 py-3 mb-8 shadow-lg animate-slideInDown\" style={{ animationDelay: '4.1s' }}>\n                <div className=\"w-4 h-4 bg-gradient-to-r from-green-500 to-amber-500 rounded-full mr-4 animate-pulse\"></div>\n                <span className=\"text-green-800 font-bold text-lg\">Eco-Friendly</span>\n              </div>\n              \n              <div className=\"w-24 h-24 bg-gradient-to-br from-green-500 to-amber-500 rounded-full mx-auto mb-8 flex items-center justify-center shadow-2xl animate-bounce\" style={{ animationDelay: '4.2s' }}>\n                <Leaf className=\"h-12 w-12 text-white\" />\n              </div>\n              \n              <h2 className=\"text-5xl font-display font-bold bg-gradient-to-r from-green-700 via-amber-700 to-orange-700 bg-clip-text text-transparent mb-8 animate-slideInUp\" style={{ animationDelay: '4.3s' }}>\n                Committed to Sustainability\n              </h2>\n              \n              <p className=\"text-2xl text-gray-700 mb-12 leading-relaxed animate-slideInUp\" style={{ animationDelay: '4.4s' }}>\n                We believe in responsible forestry and sustainable practices. All our IndoSaga wood is sourced \n                from certified plantations where trees are replanted to ensure environmental balance. \n                Every purchase supports reforestation efforts and helps preserve our planet's natural resources.\n              </p>\n              \n              <div ref={elementRef} className=\"grid grid-cols-1 md:grid-cols-3 gap-10\">\n                {[\n                  { number: animatedTrees, suffix: \"+\", label: \"Trees Replanted\", delay: '4.5s', color: \"from-green-600 to-emerald-600\", bgColor: \"from-green-50 to-emerald-50\", accentColor: \"bg-green-500\" },\n                  { number: animatedPercentage, suffix: \"%\", label: \"Certified Wood\", delay: '4.7s', color: \"from-amber-600 to-orange-600\", bgColor: \"from-amber-50 to-orange-50\", accentColor: \"bg-amber-500\" },\n                  { number: animatedYears, suffix: \"+\", label: \"Years Experience\", delay: '4.9s', color: \"from-orange-600 to-red-600\", bgColor: \"from-orange-50 to-red-50\", accentColor: \"bg-orange-500\" }\n                ].map((stat, index) => (\n                  <div key={index} className=\"text-center group animate-slideInUp animate-bounce hover:animate-none\" style={{ animationDelay: stat.delay, animationDuration: `${2 + index * 0.3}s` }}>\n                    <div className=\"bg-gradient-to-br from-white to-amber-50 rounded-2xl p-8 shadow-lg group-hover:shadow-2xl transition-all duration-500 group-hover:scale-105 group-hover:rotate-2 hover:-translate-y-2 relative overflow-hidden animate-pulse hover:animate-none\">\n                      {/* Enhanced Glow Effects */}\n                      <div className={`absolute inset-0 bg-gradient-to-r ${stat.bgColor} opacity-0 group-hover:opacity-100 transition-opacity duration-500`}></div>\n                      <div className={`absolute -inset-1 bg-gradient-to-r ${stat.color} rounded-2xl opacity-20 group-hover:opacity-40 blur-sm transition-all duration-500`}></div>\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-white/30 via-transparent to-white/30 opacity-0 group-hover:opacity-60 animate-pulse transition-all duration-700\"></div>\n                      \n                      {/* Floating Decorative Elements */}\n                      <div className={`absolute -top-3 -right-3 w-8 h-8 ${stat.accentColor} rounded-full animate-bounce group-hover:animate-spin group-hover:scale-125 transition-all duration-500 opacity-70`} style={{ animationDelay: `${index * 0.2}s` }}></div>\n                      <div className=\"absolute -bottom-3 -left-3 w-6 h-6 bg-gradient-to-r from-amber-400 to-orange-400 rounded-full animate-ping opacity-40 group-hover:opacity-80\"></div>\n                      <div className={`absolute top-1/2 -left-2 w-4 h-4 ${stat.accentColor} rounded-full animate-pulse opacity-30 group-hover:opacity-60`} style={{ animationDelay: `${index * 0.4}s` }}></div>\n                      <div className={`absolute top-2 right-2 w-3 h-3 ${stat.accentColor} rounded-full animate-ping opacity-20 group-hover:opacity-50`} style={{ animationDelay: `${index * 0.6}s` }}></div>\n                      \n                      <div className=\"relative z-10\">\n                        <div className={`text-5xl font-bold text-transparent bg-gradient-to-r ${stat.color} bg-clip-text mb-4 group-hover:scale-110 transition-transform duration-300 animate-pulse`}>\n                          {stat.number.toLocaleString()}{stat.suffix}\n                        </div>\n                        <div className=\"text-gray-600 font-semibold text-lg group-hover:text-gray-800 transition-colors duration-300\">{stat.label}</div>\n                      </div>\n                      \n                      {/* Background Pattern */}\n                      <div className=\"absolute inset-0 opacity-5 group-hover:opacity-10 transition-opacity duration-500\">\n                        <div className=\"absolute top-4 left-4 w-8 h-8 border-2 border-current rounded-full animate-spin\" style={{ animationDuration: '8s' }}></div>\n                        <div className=\"absolute bottom-4 right-4 w-6 h-6 border-2 border-current rounded-full animate-spin\" style={{ animationDuration: '6s', animationDirection: 'reverse' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24052},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\n// Removed problematic image import - using text-based logo instead\n\ninterface AuthProps {\n  onAuth: () => void;\n}\n\nexport default function Auth({ onAuth }: AuthProps) {\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const { login } = useAuth();\n  const [, navigate] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    const formData = new FormData(e.currentTarget);\n    const email = formData.get('email') as string;\n    const password = formData.get('password') as string;\n    const name = formData.get('name') as string;\n\n    try {\n      const endpoint = isLogin ? '/api/auth/login' : '/api/auth/register';\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          email,\n          password,\n          ...(name && { firstName: name.split(' ')[0], lastName: name.split(' ').slice(1).join(' ') })\n        }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        login(userData);\n        toast({\n          title: isLogin ? \"Welcome back!\" : \"Account created!\",\n          description: isLogin ? \"You have been logged in successfully.\" : \"Your account has been created and you are now logged in.\",\n        });\n        onAuth();\n        // Redirect to home page after successful login\n        navigate('/');\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Authentication failed\",\n          description: error.message || \"Please check your credentials and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection error\",\n        description: \"Unable to connect to the server. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleOAuthLogin = (provider: string) => {\n    window.location.href = `/api/auth/${provider}`;\n  };\n\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-2 sm:p-4 overflow-y-auto\">\n      <Card className=\"w-full max-w-md mx-auto animate-fade-in my-4 sm:my-8\">\n        <CardContent className=\"p-4 sm:p-8 max-h-[90vh] overflow-y-auto\">\n          <div className=\"text-center mb-6 sm:mb-8\">\n            <div className=\"w-16 h-16 sm:w-20 sm:h-20 mx-auto mb-3 sm:mb-4 rounded-full overflow-hidden bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n              <span className=\"text-white font-bold text-lg sm:text-xl\">IS</span>\n            </div>\n            <h1 className=\"text-2xl sm:text-3xl font-display font-bold text-darkBrown\">IndoSaga Furniture</h1>\n            <p className=\"text-sm sm:text-base text-gray-600 mt-2\">Premium Teak Wood Collection</p>\n          </div>\n          \n          <div className=\"space-y-3 sm:space-y-4\">\n            <h2 className=\"text-lg sm:text-xl font-display font-semibold text-darkBrown\">\n              {isLogin ? \"Welcome Back\" : \"Create Account\"}\n            </h2>\n            \n            {/* OAuth Login Buttons */}\n            <div className=\"space-y-2 sm:space-y-3\">\n              <Button \n                onClick={() => handleOAuthLogin('google')}\n                variant=\"outline\"\n                className=\"w-full border-gray-300 hover:bg-gray-50 transition-colors py-2.5 sm:py-3 text-sm sm:text-base\"\n                data-testid=\"button-google-login\"\n              >\n                <svg className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" viewBox=\"0 0 24 24\">\n                  <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Continue with Google\n              </Button>\n              \n              <Button \n                onClick={() => handleOAuthLogin('facebook')}\n                variant=\"outline\"\n                className=\"w-full border-gray-300 hover:bg-gray-50 transition-colors py-2.5 sm:py-3 text-sm sm:text-base\"\n                data-testid=\"button-facebook-login\"\n              >\n                <svg className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" fill=\"#1877F2\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                </svg>\n                Continue with Facebook\n              </Button>\n\n              <Button \n                onClick={() => handleOAuthLogin('github')}\n                variant=\"outline\"\n                className=\"w-full border-gray-300 hover:bg-gray-50 transition-colors py-2.5 sm:py-3 text-sm sm:text-base\"\n                data-testid=\"button-github-login\"\n              >\n                <svg className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" fill=\"#181717\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/>\n                </svg>\n                Continue with GitHub\n              </Button>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-300\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or continue with email</span>\n              </div>\n            </div>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-3 sm:space-y-4\">\n              {!isLogin && (\n                <Input\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Full name\"\n                  required\n                  data-testid=\"input-fullname\"\n                  className=\"border-secondary focus:ring-primary py-2.5 sm:py-3 text-sm sm:text-base\"\n                />\n              )}\n              <Input\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Email address\"\n                required\n                data-testid=\"input-email\"\n                className=\"border-secondary focus:ring-primary py-2.5 sm:py-3 text-sm sm:text-base\"\n              />\n              <Input\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                required\n                data-testid=\"input-password\"\n                className=\"border-secondary focus:ring-primary py-2.5 sm:py-3 text-sm sm:text-base\"\n              />\n              <Button \n                type=\"submit\" \n                className=\"w-full wood-texture hover:opacity-90 py-2.5 sm:py-3 text-sm sm:text-base\"\n                disabled={isLoading}\n                data-testid={isLogin ? \"button-login\" : \"button-signup\"}\n              >\n                {isLoading ? \"Loading...\" : (isLogin ? \"Sign In\" : \"Create Account\")}\n              </Button>\n            </form>\n            \n            <p className=\"text-center text-gray-600 text-sm sm:text-base\">\n              {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\n              <button \n                className=\"text-primary font-semibold hover:underline\"\n                onClick={() => setIsLogin(!isLogin)}\n                data-testid={isLogin ? \"link-signup\" : \"link-login\"}\n              >\n                {isLogin ? \"Sign up\" : \"Sign in\"}\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9395},"client/src/pages/cart.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Minus, Plus, Trash2, ShoppingBag, CreditCard } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport { useState, useEffect } from \"react\";\n\nexport default function Cart() {\n  const [location, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { isAuthenticated, user } = useAuth0();\n  const [localCartItems, setLocalCartItems] = useState<any[]>([]);\n\n  // Try to get cart from API, fallback to localStorage\n  const { data: apiCartItems = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/cart\"],\n    retry: false, // Don't retry on auth failure\n  });\n\n  // Load local cart items from localStorage and listen for updates\n  useEffect(() => {\n    const loadLocalCart = () => {\n      const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n      setLocalCartItems(localCart);\n    };\n    \n    // Load initial cart\n    loadLocalCart();\n    \n    // Listen for cart updates\n    window.addEventListener('cartUpdated', loadLocalCart);\n    \n    return () => {\n      window.removeEventListener('cartUpdated', loadLocalCart);\n    };\n  }, []);\n\n  // Use API cart if available, otherwise use localStorage cart\n  const cartItems = apiCartItems.length > 0 ? apiCartItems : localCartItems;\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      try {\n        await apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // Update localStorage cart\n          const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n          const itemIndex = localCart.findIndex((item: any) => item.id === id || item.productId === id);\n          if (itemIndex !== -1) {\n            localCart[itemIndex].quantity = quantity;\n            localStorage.setItem('localCart', JSON.stringify(localCart));\n            setLocalCartItems([...localCart]);\n            window.dispatchEvent(new Event('cartUpdated'));\n          }\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      try {\n        await apiRequest(\"DELETE\", `/api/cart/${id}`);\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // Remove from localStorage cart\n          const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');\n          const updatedCart = localCart.filter((item: any) => item.id !== id && item.productId !== id);\n          localStorage.setItem('localCart', JSON.stringify(updatedCart));\n          setLocalCartItems([...updatedCart]);\n          window.dispatchEvent(new Event('cartUpdated'));\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Item removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n    },\n  });\n\n  const handleCheckout = () => {\n    // Redirect to login if not authenticated\n    if (!isAuthenticated) {\n      sessionStorage.setItem('pendingAction', 'checkout');\n      navigate('/login');\n      return;\n    }\n    \n    // Store cart data for checkout and redirect to address form\n    const checkoutItems = cartItems.map((item: any) => ({\n      product: item.product,\n      quantity: item.quantity,\n      price: parseFloat(item.product?.price || \"0\"),\n      total: parseFloat(item.product?.price || \"0\") * item.quantity\n    }));\n    \n    localStorage.setItem('checkoutItems', JSON.stringify(checkoutItems));\n    localStorage.removeItem('checkoutAddress'); // Clear any existing address\n    localStorage.setItem('checkoutType', 'cart');\n    \n    navigate('/address');\n  };\n\n  const total = (cartItems as any[]).reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n  );\n\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  if (isLoading) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\" />\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-2xl p-6 mb-6\">\n                    <div className=\"flex space-x-4\">\n                      <div className=\"w-24 h-24 bg-gray-200 rounded-lg\" />\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-6 bg-gray-200 rounded\" />\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3\" />\n                        <div className=\"h-4 bg-gray-200 rounded w-1/3\" />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"bg-white rounded-2xl p-6 h-fit\">\n                <div className=\"space-y-4\">\n                  <div className=\"h-6 bg-gray-200 rounded\" />\n                  <div className=\"h-4 bg-gray-200 rounded\" />\n                  <div className=\"h-4 bg-gray-200 rounded\" />\n                  <div className=\"h-12 bg-gray-200 rounded\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">Shopping Cart</h1>\n          <p className=\"text-gray-600\">Review your items and proceed to checkout</p>\n        </div>\n\n        {cartItems.length === 0 ? (\n          <Card className=\"text-center py-16\">\n            <CardContent>\n              <div className=\"text-gray-400 mb-6\">\n                <ShoppingBag className=\"w-24 h-24 mx-auto\" />\n              </div>\n              <h3 className=\"text-2xl font-display font-semibold text-darkBrown mb-4\">Your cart is empty</h3>\n              <p className=\"text-gray-600 mb-8\">Looks like you haven't added any furniture to your cart yet.</p>\n              <Link href=\"/products\">\n                <Button className=\"wood-texture text-white px-8 py-3\" data-testid=\"button-continue-shopping\">\n                  Continue Shopping\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-6\" data-testid=\"cart-items-list\">\n              {(cartItems as any[]).map((item: any) => (\n                <Card key={item.id || item.productId} className=\"overflow-hidden\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex flex-col sm:flex-row gap-4\">\n                      <div className=\"w-full sm:w-32 h-32 overflow-hidden rounded-lg\">\n                        <img \n                          src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\"} \n                          alt={item.product?.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-display font-semibold text-darkBrown mb-2\" data-testid={`cart-item-name-${item.id}`}>\n                          {item.product?.name}\n                        </h3>\n                        <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                          {item.product?.description}\n                        </p>\n                        \n                        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                          <div className=\"flex items-center space-x-4\">\n                            <span className=\"text-2xl font-bold text-primary\" data-testid={`cart-item-price-${item.id}`}>\n                              ₹{item.product?.price}\n                            </span>\n                            \n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateQuantityMutation.mutate({ \n                                  id: item.id || item.productId, \n                                  quantity: Math.max(1, item.quantity - 1) \n                                })}\n                                disabled={updateQuantityMutation.isPending || item.quantity <= 1}\n                                className=\"w-8 h-8 p-0\"\n                                data-testid={`button-decrease-quantity-${item.id || item.productId}`}\n                              >\n                                <Minus className=\"h-3 w-3\" />\n                              </Button>\n                              <span className=\"text-lg font-medium min-w-8 text-center\" data-testid={`cart-item-quantity-${item.id || item.productId}`}>\n                                {item.quantity}\n                              </span>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => updateQuantityMutation.mutate({ \n                                  id: item.id || item.productId, \n                                  quantity: item.quantity + 1 \n                                })}\n                                disabled={updateQuantityMutation.isPending}\n                                className=\"w-8 h-8 p-0\"\n                                data-testid={`button-increase-quantity-${item.id || item.productId}`}\n                              >\n                                <Plus className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-4\">\n                            <span className=\"text-lg font-semibold text-darkBrown\" data-testid={`cart-item-total-${item.id}`}>\n                              ₹{(parseFloat(item.product?.price || \"0\") * item.quantity).toFixed(2)}\n                            </span>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeItemMutation.mutate(item.id || item.productId)}\n                              disabled={removeItemMutation.isPending}\n                              className=\"text-red-500 hover:text-red-600\"\n                              data-testid={`button-remove-item-${item.id || item.productId}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"sticky top-24\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl font-display text-darkBrown\">Order Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Subtotal ({(cartItems as any[]).length} items)</span>\n                    <span data-testid=\"cart-subtotal\">₹{total.toFixed(2)}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Shipping</span>\n                    <span data-testid=\"cart-shipping\">\n                      {shipping === 0 ? \"Free\" : `₹${shipping}`}\n                    </span>\n                  </div>\n                  \n                  {shipping === 0 && (\n                    <div className=\"text-sm text-green-600 bg-green-50 p-3 rounded-lg\">\n                      🎉 You've qualified for free shipping!\n                    </div>\n                  )}\n                  \n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between text-lg font-semibold text-darkBrown\">\n                      <span>Total</span>\n                      <span data-testid=\"cart-total\">₹{finalTotal.toFixed(2)}</span>\n                    </div>\n                  </div>\n                  \n                  <Button\n                    onClick={handleCheckout}\n                    className=\"w-full wood-texture text-white py-3 font-semibold hover:opacity-90 transition-opacity mt-6\"\n                    data-testid=\"button-proceed-to-checkout\"\n                  >\n                    <CreditCard className=\"mr-2 h-5 w-5\" />\n                    Proceed to Checkout\n                  </Button>\n                  \n                  <div className=\"text-center text-sm text-gray-500\">\n                    Secure payment powered by Razorpay\n                  </div>\n                  \n                  <Link href=\"/products\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full border-primary text-primary hover:bg-primary hover:text-white transition-colors\"\n                      data-testid=\"button-continue-shopping-summary\"\n                    >\n                      Continue Shopping\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14746},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { MapPin, Phone, Mail, Clock } from \"lucide-react\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    inquiryType: \"\",\n    message: \"\"\n  });\n\n  const submitInquiryMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      await apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Inquiry sent successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setFormData({\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        phone: \"\",\n        inquiryType: \"\",\n        message: \"\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error sending inquiry\",\n        description: \"Please try again or contact us directly.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.firstName || !formData.lastName || !formData.email || !formData.inquiryType || !formData.message) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    submitInquiryMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"py-10 sm:py-20 bg-gradient-to-br from-warmWhite via-beige to-primary/5 min-h-screen relative overflow-hidden\">\n      {/* Background Decorative Elements */}\n      <div className=\"absolute top-20 left-10 w-40 h-40 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-30 animate-pulse\"></div>\n      <div className=\"absolute top-60 right-20 w-32 h-32 bg-gradient-to-br from-accent/20 to-secondary/20 rounded-full opacity-30 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n      <div className=\"absolute bottom-40 left-1/4 w-28 h-28 bg-gradient-to-br from-secondary/20 to-primary/20 rounded-full opacity-30 animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      <div className=\"absolute bottom-60 right-1/3 w-36 h-36 bg-gradient-to-br from-primary/25 to-accent/25 rounded-full opacity-30 animate-pulse\" style={{ animationDelay: '3s' }}></div>\n      <div className=\"absolute top-1/2 left-20 w-24 h-24 bg-gradient-to-br from-accent/25 to-secondary/25 rounded-full opacity-30 animate-bounce\" style={{ animationDelay: '4s' }}></div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        <div className=\"text-center mb-10 sm:mb-20 animate-slideInUp\">\n          <div className=\"inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-4 sm:px-8 py-2 sm:py-3 mb-4 sm:mb-8 shadow-lg animate-slideInDown\">\n            <div className=\"w-3 h-3 sm:w-4 sm:h-4 bg-gradient-to-r from-primary to-accent rounded-full mr-2 sm:mr-4 animate-pulse\"></div>\n            <span className=\"text-primary font-bold text-sm sm:text-lg\">Contact Us</span>\n          </div>\n          <h1 className=\"text-4xl sm:text-6xl md:text-7xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-4 sm:mb-8 animate-slideInUp\">\n            Get in Touch\n          </h1>\n          <p className=\"text-lg sm:text-2xl text-gray-700 max-w-3xl mx-auto leading-relaxed animate-slideInUp px-4\" style={{ animationDelay: '0.3s' }}>\n            Visit our showroom or send us your requirements - We're here to help create your dream furniture\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16 items-stretch\">\n          {/* Contact Information */}\n          <div className=\"animate-slideInLeft h-full\" style={{ animationDelay: '0.5s' }}>\n            <Card className=\"bg-gradient-to-br from-white via-warmWhite to-accent/5 shadow-2xl border-0 relative overflow-hidden group hover:shadow-3xl transition-all duration-500 h-full flex flex-col\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-10 group-hover:opacity-20 transition-opacity duration-500\"></div>\n              \n              <CardHeader className=\"relative z-10 pb-8\">\n                <div className=\"inline-flex items-center bg-gradient-to-r from-primary/15 to-accent/15 rounded-full px-6 py-2 mb-4 shadow-lg animate-bounce\" style={{ animationDelay: '0.7s' }}>\n                  <span className=\"text-primary font-bold text-sm\">Showroom Info</span>\n                </div>\n                <CardTitle className=\"text-3xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent\">Visit Our Showroom</CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-8 relative z-10 flex-1\">\n                <div className=\"space-y-8\">\n                  {[\n                    {\n                      icon: MapPin,\n                      title: \"Address\",\n                      content: \"123 Furniture Street, Craftsman District\\nMumbai, Maharashtra 400001\",\n                      testId: \"contact-address\",\n                      delay: '0.9s'\n                    },\n                    {\n                      icon: Phone,\n                      title: \"Phone\",\n                      content: \"+91 98765 43210\\n+91 98765 43211\",\n                      testId: \"contact-phone\",\n                      delay: '1.1s'\n                    },\n                    {\n                      icon: Mail,\n                      title: \"Email\",\n                      content: \"info@sagwanfurniture.com\\norders@sagwanfurniture.com\",\n                      testId: \"contact-email\",\n                      delay: '1.3s'\n                    },\n                    {\n                      icon: Clock,\n                      title: \"Hours\",\n                      content: \"Mon - Sat: 10:00 AM - 8:00 PM\\nSunday: 11:00 AM - 6:00 PM\",\n                      testId: \"contact-hours\",\n                      delay: '1.5s'\n                    }\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-start space-x-6 group/item animate-slideInRight\" style={{ animationDelay: item.delay }}>\n                      <div className=\"w-14 h-14 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center shadow-lg group-hover/item:shadow-2xl transition-all duration-500 group-hover/item:scale-110 group-hover/item:rotate-12 flex-shrink-0\">\n                        <item.icon className=\"h-7 w-7 text-white\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h4 className=\"text-xl font-bold text-primary mb-3 group-hover/item:text-primary/80 transition-colors duration-300\">{item.title}</h4>\n                        <p className=\"text-gray-600 text-lg leading-relaxed whitespace-pre-line group-hover/item:text-gray-700 transition-colors duration-300\" data-testid={item.testId}>\n                          {item.content}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Enhanced Map Placeholder */}\n                <div className=\"mt-12 animate-fadeInUp\" style={{ animationDelay: '1.7s' }}>\n                  <div className=\"relative group/map\">\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-primary to-accent rounded-3xl blur-lg opacity-30 group-hover/map:opacity-50 transition-opacity duration-500\"></div>\n                    <div className=\"relative w-full h-64 bg-gradient-to-br from-gray-100 to-accent/10 rounded-3xl flex items-center justify-center shadow-lg hover:shadow-2xl transition-all duration-500 cursor-pointer group-hover/map:scale-105 overflow-hidden\">\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-accent/10 opacity-0 group-hover/map:opacity-100 transition-opacity duration-500\"></div>\n                      <div className=\"text-center relative z-10\">\n                        <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg group-hover/map:animate-bounce\">\n                          <MapPin className=\"h-8 w-8 text-white\" />\n                        </div>\n                        <p className=\"text-primary font-bold text-lg mb-2\">Interactive Google Map</p>\n                        <p className=\"text-primary/80 text-sm\">123 Furniture Street, Mumbai</p>\n                        <div className=\"mt-4 inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-4 py-2 shadow-sm\">\n                          <span className=\"text-primary font-medium text-sm\">Click to view directions</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Inquiry Form */}\n          <div className=\"animate-slideInRight h-full\" style={{ animationDelay: '0.6s' }}>\n            <Card className=\"bg-gradient-to-br from-white via-warmWhite to-accent/5 shadow-2xl border-0 relative overflow-hidden group hover:shadow-3xl transition-all duration-500 h-full flex flex-col\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <div className=\"absolute top-0 left-0 w-28 h-28 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-30 group-hover:opacity-50 transition-opacity duration-500 transform -translate-x-10 -translate-y-10\"></div>\n              \n              <CardHeader className=\"relative z-10 pb-8\">\n                <div className=\"inline-flex items-center bg-gradient-to-r from-primary/15 to-accent/15 rounded-full px-6 py-2 mb-4 shadow-lg animate-bounce\" style={{ animationDelay: '0.8s' }}>\n                  <span className=\"text-primary font-bold text-sm\">Contact Form</span>\n                </div>\n                <CardTitle className=\"text-3xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent\">Send us an Inquiry</CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"relative z-10 flex-1 px-4 sm:px-6\">\n                <form onSubmit={handleSubmit} className=\"space-y-4 sm:space-y-8\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 animate-slideInUp\" style={{ animationDelay: '1s' }}>\n                    <div className=\"group\">\n                      <label className=\"block text-sm sm:text-lg font-semibold text-primary mb-2 sm:mb-3 group-focus-within:text-accent transition-colors duration-300\">\n                        First Name *\n                      </label>\n                      <Input\n                        type=\"text\"\n                        value={formData.firstName}\n                        onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                        className=\"py-3 sm:py-4 border-2 border-secondary focus:border-primary focus:ring-primary/20 rounded-2xl bg-gradient-to-r from-primary/5 to-accent/5 text-darkBrown placeholder-primary/60 font-medium shadow-sm hover:shadow-md transition-all duration-300 text-sm sm:text-lg\"\n                        placeholder=\"Enter your first name\"\n                        required\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div className=\"group\">\n                      <label className=\"block text-sm sm:text-lg font-semibold text-primary mb-2 sm:mb-3 group-focus-within:text-accent transition-colors duration-300\">\n                        Last Name *\n                      </label>\n                      <Input\n                        type=\"text\"\n                        value={formData.lastName}\n                        onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                        className=\"py-3 sm:py-4 border-2 border-secondary focus:border-primary focus:ring-primary/20 rounded-2xl bg-gradient-to-r from-primary/5 to-accent/5 text-darkBrown placeholder-primary/60 font-medium shadow-sm hover:shadow-md transition-all duration-300 text-sm sm:text-lg\"\n                        placeholder=\"Enter your last name\"\n                        required\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"group animate-slideInUp\" style={{ animationDelay: '1.2s' }}>\n                    <label className=\"block text-sm sm:text-lg font-semibold text-primary mb-2 sm:mb-3 group-focus-within:text-accent transition-colors duration-300\">\n                      Email Address *\n                    </label>\n                    <Input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      className=\"py-3 sm:py-4 border-2 border-secondary focus:border-primary focus:ring-primary/20 rounded-2xl bg-gradient-to-r from-primary/5 to-accent/5 text-darkBrown placeholder-primary/60 font-medium shadow-sm hover:shadow-md transition-all duration-300 text-sm sm:text-lg\"\n                      placeholder=\"Enter your email address\"\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  \n                  <div className=\"group animate-slideInUp\" style={{ animationDelay: '1.4s' }}>\n                    <label className=\"block text-lg font-semibold text-primary mb-3 group-focus-within:text-accent transition-colors duration-300\">\n                      Phone Number\n                    </label>\n                    <Input\n                      type=\"tel\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                      className=\"py-4 border-2 border-secondary focus:border-primary focus:ring-primary/20 rounded-2xl bg-gradient-to-r from-primary/5 to-accent/5 text-darkBrown placeholder-primary/60 font-medium shadow-sm hover:shadow-md transition-all duration-300 text-lg\"\n                      placeholder=\"Enter your phone number\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  \n                  <div className=\"group animate-slideInUp\" style={{ animationDelay: '1.6s' }}>\n                    <label className=\"block text-lg font-semibold text-primary mb-3 group-focus-within:text-accent transition-colors duration-300\">\n                      Inquiry Type *\n                    </label>\n                    <Select \n                      value={formData.inquiryType} \n                      onValueChange={(value) => handleInputChange(\"inquiryType\", value)}\n                      required\n                    >\n                      <SelectTrigger className=\"py-4 border-2 border-secondary focus:ring-primary/20 rounded-2xl bg-gradient-to-r from-primary/5 to-accent/5 text-darkBrown font-medium shadow-sm hover:shadow-md transition-all duration-300 hover:border-primary text-lg\" data-testid=\"select-inquiry-type\">\n                        <SelectValue placeholder=\"Select inquiry type\" className=\"text-primary/60\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"rounded-xl border-secondary shadow-xl bg-gradient-to-br from-white to-primary/5\">\n                        <SelectItem value=\"product-inquiry\" className=\"font-medium text-lg hover:bg-primary/5\">Product Inquiry</SelectItem>\n                        <SelectItem value=\"custom-order\" className=\"font-medium text-lg hover:bg-primary/5\">Custom Order</SelectItem>\n                        <SelectItem value=\"bulk-order\" className=\"font-medium text-lg hover:bg-primary/5\">Bulk Order</SelectItem>\n                        <SelectItem value=\"general-question\" className=\"font-medium text-lg hover:bg-primary/5\">General Question</SelectItem>\n                        <SelectItem value=\"complaint\" className=\"font-medium text-lg hover:bg-primary/5\">Complaint</SelectItem>\n                        <SelectItem value=\"feedback\" className=\"font-medium text-lg hover:bg-primary/5\">Feedback</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"group animate-slideInUp\" style={{ animationDelay: '1.8s' }}>\n                    <label className=\"block text-lg font-semibold text-primary mb-3 group-focus-within:text-accent transition-colors duration-300\">\n                      Message *\n                    </label>\n                    <Textarea\n                      rows={5}\n                      value={formData.message}\n                      onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                      className=\"py-4 border-2 border-secondary focus:border-primary focus:ring-primary/20 rounded-2xl bg-gradient-to-r from-primary/5 to-accent/5 text-darkBrown placeholder-primary/60 font-medium shadow-sm hover:shadow-md transition-all duration-300 resize-none text-lg\"\n                      placeholder=\"Tell us about your furniture requirements and how we can help you...\"\n                      required\n                      data-testid=\"textarea-message\"\n                    />\n                  </div>\n                  \n                  <div className=\"animate-slideInUp\" style={{ animationDelay: '2s' }}>\n                    <Button\n                      type=\"submit\"\n                      disabled={submitInquiryMutation.isPending}\n                      className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white py-6 font-bold text-xl rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:scale-105 relative overflow-hidden group/btn\"\n                      data-testid=\"button-submit-inquiry\"\n                    >\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-accent to-primary opacity-0 group-hover/btn:opacity-100 transition-opacity duration-500\"></div>\n                      <span className=\"relative z-10 flex items-center justify-center\">\n                        {submitInquiryMutation.isPending ? (\n                          <>\n                            <div className=\"w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin mr-3\"></div>\n                            Sending...\n                          </>\n                        ) : (\n                          <>\n                            Send Inquiry\n                            <div className=\"ml-3 w-6 h-6 bg-white rounded-full flex items-center justify-center group-hover/btn:animate-bounce\">\n                              <Mail className=\"h-3 w-3 text-primary\" />\n                            </div>\n                          </>\n                        )}\n                      </span>\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Additional Information */}\n        <div className=\"mt-24 animate-slideInUp\" style={{ animationDelay: '2.2s' }}>\n          <div className=\"text-center mb-12\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-8 py-3 mb-6 shadow-lg animate-slideInDown\" style={{ animationDelay: '2.3s' }}>\n              <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-accent rounded-full mr-4 animate-pulse\"></div>\n              <span className=\"text-primary font-bold text-lg\">Why Choose Us</span>\n            </div>\n            <h2 className=\"text-4xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-4 animate-slideInUp\" style={{ animationDelay: '2.4s' }}>Experience Excellence</h2>\n            <p className=\"text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed animate-slideInUp\" style={{ animationDelay: '2.5s' }}>Discover what makes IndoSaga Furniture your perfect partner for premium teak furniture</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10\">\n            {[\n              {\n                icon: Phone,\n                title: \"Quick Response\",\n                description: \"We respond to all inquiries within 24 hours with detailed information\",\n                delay: '2.6s',\n                color: \"from-green-500 to-emerald-500\"\n              },\n              {\n                icon: MapPin,\n                title: \"Free Consultation\",\n                description: \"Visit our showroom for personalized guidance and expert advice\",\n                delay: '2.8s',\n                color: \"from-blue-500 to-cyan-500\"\n              },\n              {\n                icon: Mail,\n                title: \"Custom Orders\",\n                description: \"Bespoke furniture tailored to your exact needs and specifications\",\n                delay: '3s',\n                color: \"from-purple-500 to-pink-500\"\n              }\n            ].map((item, index) => (\n              <Card key={index} className=\"group text-center bg-gradient-to-br from-white via-warmWhite to-primary/5 border-0 shadow-xl hover:shadow-3xl transition-all duration-500 relative overflow-hidden transform hover:scale-105 animate-slideInUp\" style={{ animationDelay: item.delay }}>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-30 group-hover:opacity-50 transition-opacity duration-500 transform translate-x-6 -translate-y-6\"></div>\n                \n                <CardContent className=\"p-10 relative z-10\">\n                  <div className={`w-20 h-20 bg-gradient-to-br ${item.color} rounded-full mx-auto mb-8 flex items-center justify-center shadow-lg group-hover:shadow-2xl transition-all duration-500 group-hover:scale-125 group-hover:rotate-12`}>\n                    <item.icon className=\"h-10 w-10 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-display font-bold text-primary mb-6 group-hover:text-accent transition-colors duration-300\">\n                    {item.title}\n                  </h3>\n                  <p className=\"text-gray-600 leading-relaxed text-lg group-hover:text-gray-700 transition-colors duration-300\">\n                    {item.description}\n                  </p>\n                  \n                  <div className=\"mt-8 w-full h-1 bg-gradient-to-r from-primary/20 to-accent/20 rounded-full overflow-hidden\">\n                    <div className=\"w-0 h-full bg-gradient-to-r from-primary to-accent rounded-full group-hover:w-full transition-all duration-1000 ease-out\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":24238},"client/src/pages/deals.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport ProductCard from \"@/components/product-card\";\n\n// Custom hook for counting animation\nconst useCountingAnimation = (targetValue: number, isVisible: boolean, duration: number = 2000) => {\n  const [currentValue, setCurrentValue] = useState(0);\n  \n  useEffect(() => {\n    if (!isVisible) return;\n    \n    const startTime = Date.now();\n    const startValue = 0;\n    \n    const updateCount = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Easing function for smooth animation\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      const newValue = Math.floor(startValue + (targetValue - startValue) * easeOutQuart);\n      \n      setCurrentValue(newValue);\n      \n      if (progress < 1) {\n        requestAnimationFrame(updateCount);\n      } else {\n        setCurrentValue(targetValue);\n      }\n    };\n    \n    requestAnimationFrame(updateCount);\n  }, [targetValue, isVisible, duration]);\n  \n  return currentValue;\n};\n\n// Custom hook for intersection observer\nconst useIntersectionObserver = (threshold: number = 0.3) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const elementRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n        }\n      },\n      { threshold }\n    );\n    \n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n    \n    return () => {\n      if (elementRef.current) {\n        observer.unobserve(elementRef.current);\n      }\n    };\n  }, [threshold]);\n  \n  return { isVisible, elementRef };\n};\n\nexport default function Deals() {\n  const [timeLeft, setTimeLeft] = useState({\n    hours: 1,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  const { data: dealProducts = [], isLoading } = useQuery({\n    queryKey: [\"/api/products/deals\"],\n  });\n\n  // Intersection observer for timer animation\n  const { isVisible, elementRef } = useIntersectionObserver(0.3);\n  \n  // Animated counting values\n  const animatedHours = useCountingAnimation(timeLeft.hours, isVisible, 1500);\n  const animatedMinutes = useCountingAnimation(timeLeft.minutes, isVisible, 1800);\n  const animatedSeconds = useCountingAnimation(timeLeft.seconds, isVisible, 2100);\n\n  // Countdown timer - updates every second (normal speed)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        let { hours, minutes, seconds } = prev;\n        \n        if (seconds > 0) {\n          seconds--;\n        } else if (minutes > 0) {\n          minutes--;\n          seconds = 59;\n        } else if (hours > 0) {\n          hours--;\n          minutes = 59;\n          seconds = 59;\n        } else {\n          // Timer reached zero, reset or handle end state\n          return { hours: 0, minutes: 0, seconds: 0 };\n        }\n        \n        return { hours, minutes, seconds };\n      });\n    }, 1000); // 1000ms = 1 second (normal speed)\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"py-20 bg-gradient-to-br from-primary/10 via-accent/10 to-warmWhite min-h-screen relative overflow-hidden\">\n      {/* Background Decorative Elements */}\n      <div className=\"absolute top-10 left-10 w-40 h-40 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-10 animate-bounce\" style={{ animationDuration: '3s' }}></div>\n      <div className=\"absolute top-20 right-20 w-32 h-32 bg-gradient-to-br from-accent/20 to-primary/15 rounded-full opacity-15 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n      <div className=\"absolute bottom-20 left-20 w-28 h-28 bg-gradient-to-br from-accent/25 to-primary/10 rounded-full opacity-12 animate-ping\" style={{ animationDelay: '2s', animationDuration: '2s' }}></div>\n      <div className=\"absolute bottom-40 right-10 w-36 h-36 bg-gradient-to-br from-primary/15 to-accent/20 rounded-full opacity-8 animate-bounce\" style={{ animationDelay: '1.5s', animationDuration: '4s' }}></div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        <div className=\"text-center mb-16 animate-fadeInUp\">\n          {/* Flash Sale Badge */}\n          <div className=\"inline-flex items-center bg-gradient-to-r from-primary to-accent text-white rounded-full px-8 py-3 mb-8 shadow-2xl animate-slideInDown transform hover:scale-105 transition-transform duration-300\">\n            <div className=\"w-4 h-4 bg-white rounded-full mr-3 animate-ping\"></div>\n            <span className=\"font-bold text-lg\">🔥 FLASH SALE LIVE NOW!</span>\n            <div className=\"w-4 h-4 bg-white rounded-full ml-3 animate-ping\"></div>\n          </div>\n          \n          <h1 className=\"text-6xl font-display font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent mb-6 animate-slideInUp\" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.1)' }}>\n            ₹1 Flash Deals\n          </h1>\n          <p className=\"text-2xl text-gray-700 max-w-2xl mx-auto leading-relaxed animate-slideInUp font-medium\" style={{ animationDelay: '0.2s' }}>\n            🚨 Limited time offers - Grab them before they're gone! 🚨\n          </p>\n          \n          {/* Enhanced Timer */}\n          <div ref={elementRef} className=\"flex justify-center space-x-6 mt-12 animate-slideInUp\" style={{ animationDelay: '0.4s' }}>\n            <div className=\"bg-gradient-to-r from-primary to-accent text-white rounded-2xl p-6 shadow-2xl relative overflow-hidden group hover:scale-110 hover:rotate-1 transition-all duration-500 animate-pulse hover:animate-none hover:shadow-accent/50 hover:shadow-2xl animate-bounce\" style={{ animationDuration: '2s', animationDelay: '0.1s' }}>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-accent/30 via-transparent to-primary/30 opacity-0 group-hover:opacity-50 animate-pulse transition-all duration-700\"></div>\n              <div className=\"absolute -inset-1 bg-gradient-to-r from-primary via-accent to-primary rounded-2xl opacity-20 group-hover:opacity-60 blur-sm transition-all duration-500\"></div>\n              <div className=\"relative z-10\">\n                <div className=\"text-4xl font-bold animate-pulse\" data-testid=\"timer-hours\">\n                  {animatedHours.toString().padStart(2, '0')}\n                </div>\n                <div className=\"text-sm font-semibold mt-2\">HOURS</div>\n              </div>\n              <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-accent rounded-full animate-bounce group-hover:animate-spin group-hover:scale-125 transition-all duration-500\"></div>\n              <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-primary/80 rounded-full animate-ping opacity-40 group-hover:opacity-80\"></div>\n            </div>\n            \n            <div className=\"bg-gradient-to-r from-primary to-accent text-white rounded-2xl p-6 shadow-2xl relative overflow-hidden group hover:scale-110 hover:-rotate-1 transition-all duration-500 animate-pulse hover:animate-none hover:shadow-primary/50 hover:shadow-2xl animate-bounce\" style={{ animationDuration: '2.2s', animationDelay: '0.3s' }}>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <div className=\"absolute inset-0 bg-gradient-to-l from-primary/30 via-transparent to-accent/30 opacity-0 group-hover:opacity-50 animate-pulse transition-all duration-700\"></div>\n              <div className=\"absolute -inset-1 bg-gradient-to-l from-accent via-primary to-accent rounded-2xl opacity-20 group-hover:opacity-60 blur-sm transition-all duration-500\"></div>\n              <div className=\"relative z-10\">\n                <div className=\"text-4xl font-bold animate-pulse\" data-testid=\"timer-minutes\">\n                  {animatedMinutes.toString().padStart(2, '0')}\n                </div>\n                <div className=\"text-sm font-semibold mt-2\">MINUTES</div>\n              </div>\n              <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-primary rounded-full animate-bounce group-hover:animate-spin group-hover:scale-125 transition-all duration-500\" style={{ animationDelay: '0.5s' }}></div>\n              <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-accent/80 rounded-full animate-ping opacity-40 group-hover:opacity-80\"></div>\n            </div>\n            \n            <div className=\"bg-gradient-to-r from-primary to-accent text-white rounded-2xl p-6 shadow-2xl relative overflow-hidden group hover:scale-110 hover:rotate-2 transition-all duration-500 animate-pulse hover:animate-none hover:shadow-accent/50 hover:shadow-2xl animate-bounce\" style={{ animationDuration: '1.8s', animationDelay: '0.5s' }}>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-primary/30 via-accent/30 to-primary/30 opacity-0 group-hover:opacity-50 animate-pulse transition-all duration-700\"></div>\n              <div className=\"absolute -inset-1 bg-gradient-to-r from-accent via-primary to-accent rounded-2xl opacity-20 group-hover:opacity-60 blur-sm transition-all duration-500\"></div>\n              <div className=\"relative z-10\">\n                <div className=\"text-4xl font-bold animate-pulse\" data-testid=\"timer-seconds\">\n                  {animatedSeconds.toString().padStart(2, '0')}\n                </div>\n                <div className=\"text-sm font-semibold mt-2\">SECONDS</div>\n              </div>\n              <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-accent rounded-full animate-bounce group-hover:animate-spin group-hover:scale-125 transition-all duration-500\" style={{ animationDelay: '1s' }}></div>\n              <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-primary/80 rounded-full animate-ping opacity-40 group-hover:opacity-80\"></div>\n            </div>\n          </div>\n          \n          {/* Urgency Message */}\n          <div className=\"mt-8 animate-fadeInUp\" style={{ animationDelay: '0.6s' }}>\n            <div className=\"inline-flex items-center bg-gradient-to-r from-primary/10 to-accent/10 rounded-full px-6 py-3 shadow-lg border-2 border-accent/30 animate-pulse\">\n              <span className=\"text-primary font-bold text-lg\">⚡ Only while stocks last! ⚡</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Deal Products Section */}\n        <div className=\"relative\">\n          <div className=\"text-center mb-12 animate-fadeInUp\" style={{ animationDelay: '0.8s' }}>\n            <div className=\"inline-flex items-center bg-gradient-to-r from-primary/20 to-accent/20 rounded-full px-8 py-3 mb-6 shadow-xl border border-accent/30\">\n              <span className=\"text-primary font-bold text-lg\">\n                🔥 {dealProducts.length} INCREDIBLE DEALS AVAILABLE 🔥\n              </span>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"bg-gradient-to-br from-white to-primary/5 rounded-3xl p-8 animate-pulse shadow-2xl border border-accent/20 relative overflow-hidden\" style={{ animationDelay: `${i * 150}ms` }}>\n                  <div className=\"absolute top-0 left-0 bg-gradient-to-r from-primary to-accent text-white px-4 py-2 text-xs font-bold rounded-br-2xl\">\n                    ₹1 DEAL\n                  </div>\n                  <div className=\"w-full h-64 bg-gradient-to-br from-primary/20 to-accent/20 rounded-2xl mb-6 opacity-40\" />\n                  <div className=\"h-8 bg-gradient-to-r from-primary/20 to-accent/20 rounded-xl mb-4 opacity-40\" />\n                  <div className=\"h-6 bg-gradient-to-r from-accent/20 to-primary/15 rounded-lg mb-6 opacity-40\" />\n                  <div className=\"flex space-x-3\">\n                    <div className=\"h-14 bg-gradient-to-r from-primary/20 to-accent/20 rounded-2xl flex-1 opacity-40\" />\n                    <div className=\"h-14 bg-gradient-to-r from-accent/20 to-primary/20 rounded-2xl flex-1 opacity-40\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : dealProducts.length === 0 ? (\n            <div className=\"text-center py-20 animate-fadeInUp\">\n              <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-3xl p-16 max-w-lg mx-auto shadow-2xl border border-accent/30 relative overflow-hidden\">\n                <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-20 transform rotate-45\"></div>\n                <div className=\"w-32 h-32 bg-gradient-to-br from-primary to-accent rounded-full mx-auto mb-8 flex items-center justify-center animate-bounce relative z-10\">\n                  <svg className=\"w-16 h-16 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-3xl font-display font-bold text-primary mb-6\">No Active Flash Deals</h3>\n                <p className=\"text-primary/80 text-lg leading-relaxed\">Amazing ₹1 deals are coming soon! Check back in a few hours for unbeatable offers.</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10\" data-testid=\"deals-grid\">\n              {dealProducts.map((product: any, index: number) => (\n                <div \n                  key={product.id} \n                  className=\"animate-slideInUp relative group h-full\" \n                  style={{ \n                    animationDelay: `${1 + (index * 0.15)}s`,\n                    animationFillMode: 'both'\n                  }}\n                >\n                  {/* Enhanced Deal Glow Effect */}\n                  <div className=\"absolute -inset-2 bg-gradient-to-r from-primary via-accent to-primary/80 rounded-3xl opacity-20 group-hover:opacity-40 transition-opacity duration-500 animate-pulse\"></div>\n                  <div className=\"relative h-full\">\n                    <ProductCard product={product} showDealBadge={true} />\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Enhanced Deal Terms */}\n        <div className=\"mt-20 relative animate-fadeInUp\" style={{ animationDelay: '1.5s' }}>\n          <div className=\"bg-gradient-to-br from-white via-accent/5 to-primary/5 rounded-3xl p-10 shadow-2xl border border-accent/30 relative overflow-hidden\">\n            <div className=\"absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-primary via-accent to-primary\"></div>\n            <div className=\"absolute top-4 right-4 w-16 h-16 bg-gradient-to-br from-primary/20 to-accent/20 rounded-full opacity-20\"></div>\n            <div className=\"absolute bottom-4 left-4 w-12 h-12 bg-gradient-to-br from-accent/20 to-primary/15 rounded-full opacity-15\"></div>\n            \n            <div className=\"relative z-10\">\n              <div className=\"flex items-center mb-8\">\n                <div className=\"w-3 h-3 bg-gradient-to-r from-primary to-accent rounded-full mr-4 animate-pulse\"></div>\n                <h3 className=\"text-3xl font-display font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent\">Deal Terms & Conditions</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <ul className=\"space-y-4\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mr-4 mt-2 flex-shrink-0 animate-pulse\"></div>\n                    <span className=\"text-gray-700 font-medium\">Limited time offer valid only for the countdown duration</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full mr-4 mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n                    <span className=\"text-gray-700 font-medium\">Limited stock available - first come, first served</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-accent/80 rounded-full mr-4 mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n                    <span className=\"text-gray-700 font-medium\">Deal price applicable only during the flash sale period</span>\n                  </li>\n                </ul>\n                \n                <ul className=\"space-y-4\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mr-4 mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '0.6s' }}></div>\n                    <span className=\"text-gray-700 font-medium\">Standard shipping charges apply</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-accent rounded-full mr-4 mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '0.8s' }}></div>\n                    <span className=\"text-gray-700 font-medium\">Cannot be combined with other offers</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-2 h-2 bg-accent/80 rounded-full mr-4 mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n                    <span className=\"text-gray-700 font-medium\">Products sold as-is with manufacturer warranty</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18293},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport ProductCard from \"@/components/product-card\";\nimport AuthTestButton from \"@/components/auth-test-button\";\nimport { Link } from \"wouter\";\nimport { ArrowRight, Star, Users, Award, Truck, Shield, Clock, CheckCircle, Bed, Armchair, Table, Archive, Sofa, Shirt, X, Calendar, Video, Headphones } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport type { Product, Category } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Import real furniture images for hero slideshow\nimport bedImage from \"@assets/bed_1756872247840.jpg\";\nimport diningTableImage from \"@assets/DAiningTable_1756872247841.webp\";\nimport jhulaImage from \"@assets/Jhula_1756872247842.jpg\";\nimport poojaGharImage from \"@assets/pojaGhar1_1756872247843.jpg\";\nimport sofaImage from \"@assets/Sofa1_1756872247844.jpg\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showAppointmentSuccess, setShowAppointmentSuccess] = useState(false);\n  const [appointmentSuccessData, setAppointmentSuccessData] = useState<any>(null);\n  const [showTicketSuccess, setShowTicketSuccess] = useState(false);\n  const [ticketSuccessData, setTicketSuccessData] = useState<any>(null);\n  \n  const { data: featuredProducts = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products/featured\"],\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Check for success notifications on page load\n  useEffect(() => {\n    const appointmentSuccess = sessionStorage.getItem('appointmentSuccess');\n    if (appointmentSuccess) {\n      try {\n        const successData = JSON.parse(appointmentSuccess);\n        setAppointmentSuccessData(successData);\n        setShowAppointmentSuccess(true);\n        sessionStorage.removeItem('appointmentSuccess');\n      } catch (error) {\n        console.error('Error parsing appointment success data:', error);\n      }\n    }\n\n    const ticketSuccess = sessionStorage.getItem('ticketSuccess');\n    if (ticketSuccess) {\n      try {\n        const successData = JSON.parse(ticketSuccess);\n        setTicketSuccessData(successData);\n        setShowTicketSuccess(true);\n        sessionStorage.removeItem('ticketSuccess');\n      } catch (error) {\n        console.error('Error parsing ticket success data:', error);\n      }\n    }\n  }, []);\n\n  // Slideshow images for hero section - Premium Teak Wood Furniture\n  const heroImages = [\n    bedImage,        // Premium teak wood bed\n    diningTableImage, // Beautiful dining table set\n    jhulaImage,      // Traditional wooden jhula\n    sofaImage        // Premium teak wood sofa set\n  ];\n\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [currentTestimonialIndex, setCurrentTestimonialIndex] = useState(0);\n\n  // Category icon mapping\n  const getCategoryIcon = (categoryName: string) => {\n    const name = categoryName.toLowerCase();\n    if (name.includes('bed')) return Bed;\n    if (name.includes('chair') || name.includes('seating')) return Armchair;\n    if (name.includes('dining') || name.includes('table')) return Table;\n    if (name.includes('cabinet') || name.includes('wardrobe')) return Archive;\n    if (name.includes('sofa')) return Sofa;\n    return Shirt; // Default icon\n  };\n\n  // Handle category click\n  const handleCategoryClick = (categoryId: string, categoryName: string) => {\n    setLocation(`/products?category=${categoryId}&categoryName=${encodeURIComponent(categoryName)}`);\n  };\n\n  // Customer testimonials data\n  const testimonials = [\n    {\n      name: \"Rajesh Kumar\",\n      location: \"Mumbai\",\n      initials: \"RK\",\n      rating: 5,\n      review: \"Absolutely stunning dining table! The teak wood quality is exceptional and the craftsmanship is top-notch. It's been 3 years and it still looks brand new.\"\n    },\n    {\n      name: \"Priya Sharma\",\n      location: \"Delhi\",\n      initials: \"PS\",\n      rating: 5,\n      review: \"Got the entire bedroom set from IndoSaga. The finish is beautiful and delivery was prompt. Excellent customer service throughout the process!\"\n    },\n    {\n      name: \"Amit Mehta\",\n      location: \"Bangalore\",\n      initials: \"AM\",\n      rating: 5,\n      review: \"Love my new sofa set! The teak frame is solid and the upholstery is premium quality. Worth every penny spent. Highly recommended!\"\n    },\n    {\n      name: \"Sneha Patel\",\n      location: \"Ahmedabad\",\n      initials: \"SP\",\n      rating: 5,\n      review: \"The wardrobe is magnificent! Perfect craftsmanship and the teak wood has a beautiful natural grain. Installation was seamless and professional.\"\n    },\n    {\n      name: \"Vikram Singh\",\n      location: \"Pune\",\n      initials: \"VS\",\n      rating: 5,\n      review: \"Ordered a complete office setup including desk and chairs. The quality exceeded my expectations. Each piece is a work of art!\"\n    },\n    {\n      name: \"Kavita Reddy\",\n      location: \"Hyderabad\",\n      initials: \"KR\",\n      rating: 5,\n      review: \"Our entire living room was transformed with IndoSaga furniture. The TV unit and coffee table are absolutely gorgeous. Lifetime investment!\"\n    },\n    {\n      name: \"Arjun Nair\",\n      location: \"Chennai\",\n      initials: \"AN\",\n      rating: 5,\n      review: \"The bed frame is incredibly sturdy and beautiful. The headboard design is unique and the storage compartments are very practical. Love it!\"\n    },\n    {\n      name: \"Deepika Joshi\",\n      location: \"Kolkata\",\n      initials: \"DJ\",\n      rating: 5,\n      review: \"Fantastic dining chair set! The cushioning is comfortable and the teak finish matches perfectly with our table. Great value for money.\"\n    }\n  ];\n\n  // Auto-advance slideshow\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentImageIndex((prev) => (prev + 1) % heroImages.length);\n    }, 5000); // Change image every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [heroImages.length]);\n\n  // Auto-advance testimonials carousel\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTestimonialIndex((prev) => (prev + 1) % testimonials.length);\n    }, 4000); // Change testimonial every 4 seconds\n\n    return () => clearInterval(interval);\n  }, [testimonials.length]);\n\n  const scrollToProducts = () => {\n    document.getElementById(\"featured-products\")?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <main className=\"bg-warmWhite\">\n      {/* Hero Section */}\n      <section className=\"relative h-screen flex items-center justify-start overflow-hidden\">\n        {/* Slideshow Background Images */}\n        {heroImages.map((image, index) => (\n          <div\n            key={index}\n            className={`absolute inset-0 transition-opacity duration-1000 ${\n              index === currentImageIndex ? 'opacity-100' : 'opacity-0'\n            }`}\n            style={{\n              backgroundImage: `url(${image})`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center center',\n              backgroundRepeat: 'no-repeat',\n              backgroundColor: '#8B4513' // Fallback brown color if image doesn't load\n            }}\n          />\n        ))}\n        <div className=\"absolute inset-0 bg-black/40\" style={{ backdropFilter: 'blur(0.5px)' }} />\n        \n        {/* Slideshow Navigation Dots */}\n        <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-3 z-20\">\n          {heroImages.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => setCurrentImageIndex(index)}\n              className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                index === currentImageIndex \n                  ? 'bg-white scale-125' \n                  : 'bg-white/50 hover:bg-white/75'\n              }`}\n              aria-label={`Go to slide ${index + 1}`}\n            />\n          ))}\n        </div>\n        \n        <div className=\"relative z-10 text-left text-white px-8 md:px-16 animate-fade-in max-w-4xl\">\n          {/* Premium Badge */}\n          <div className=\"inline-flex items-center bg-white/20 backdrop-blur-md rounded-full px-4 py-2 mb-6\">\n            <Award className=\"h-4 w-4 text-yellow-300 mr-2\" />\n            <span className=\"text-sm font-medium\">Premium Teak Wood Collection</span>\n          </div>\n          \n          <h1 className=\"text-5xl md:text-7xl font-display font-bold mb-6 leading-tight\" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.5)' }}>\n            Premium <span className=\"text-orange-400\">IndoSaga</span><br />\n            <span className=\"text-4xl md:text-5xl text-amber-200\">Furniture</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl mb-8 max-w-2xl leading-relaxed\" style={{ textShadow: '1px 1px 2px rgba(0,0,0,0.5)' }}>\n            Discover the timeless beauty of handcrafted teak wood furniture that lasts generations. \n            <span className=\"text-amber-200 font-semibold\"> Over 50 years of excellence.</span>\n          </p>\n          \n          {/* Action Buttons */}\n          <div className=\"flex flex-col sm:flex-row justify-start gap-4 mb-8\">\n            <Button\n              onClick={scrollToProducts}\n              className=\"wood-texture text-white px-8 py-4 rounded-lg font-semibold hover:opacity-90 transition-all hover-lift shadow-xl\"\n              data-testid=\"button-explore-collection\"\n            >\n              Explore Collection\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n            <Link href=\"/deals\">\n              <Button\n                className=\"bg-red-600 hover:bg-red-700 text-white px-8 py-4 rounded-lg font-semibold transition-all hover-lift shadow-xl\"\n                data-testid=\"button-flash-deals\"\n              >\n                ₹1 Flash Deals\n                <Star className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n            <AuthTestButton />\n          </div>\n          \n          {/* Quick Stats */}\n          <div className=\"flex flex-wrap gap-6 text-sm\">\n            <div className=\"flex items-center bg-white/10 backdrop-blur-md rounded-lg px-3 py-2\">\n              <Users className=\"h-4 w-4 mr-2 text-green-300\" />\n              <span>50,000+ Happy Customers</span>\n            </div>\n            <div className=\"flex items-center bg-white/10 backdrop-blur-md rounded-lg px-3 py-2\">\n              <Star className=\"h-4 w-4 mr-2 text-yellow-300\" />\n              <span>4.9★ Rating</span>\n            </div>\n            <div className=\"flex items-center bg-white/10 backdrop-blur-md rounded-lg px-3 py-2\">\n              <Truck className=\"h-4 w-4 mr-2 text-blue-300\" />\n              <span>Free Delivery</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Explore More Furniture Range Section - Redesigned */}\n      <section className=\"py-16 bg-gradient-to-br from-warmWhite via-amber-50 to-beige relative overflow-hidden\">\n        {/* Background Decorative Elements */}\n        <div className=\"absolute top-10 left-10 w-40 h-40 bg-gradient-to-br from-amber-300/20 to-orange-300/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute bottom-10 right-10 w-32 h-32 bg-gradient-to-br from-orange-300/20 to-red-300/20 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '2s' }}></div>\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center mb-12 animate-fade-in\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-amber-100 to-orange-100 rounded-full px-6 py-2 mb-6 shadow-lg\">\n              <div className=\"w-3 h-3 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full mr-3 animate-pulse\"></div>\n              <span className=\"text-amber-800 font-semibold text-sm\">Furniture Collection</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-4\">\n              Explore Our Furniture Range\n            </h2>\n            <p className=\"text-xl text-gray-700 max-w-2xl mx-auto\">\n              Discover our diverse collection of premium teak wood furniture for every room in your home\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6 mb-12\">\n            {categories.map((category, index) => {\n              const IconComponent = getCategoryIcon(category.name);\n              return (\n                <div\n                  key={category.id}\n                  onClick={() => handleCategoryClick(category.id, category.name)}\n                  className=\"group cursor-pointer transform transition-all duration-500 hover:scale-110 animate-fadeInUp\"\n                  style={{ animationDelay: `${index * 100}ms` }}\n                  data-testid={`category-${category.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <div className=\"relative h-32 w-full bg-gradient-to-br from-white to-amber-50 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 border border-amber-200 hover:border-primary group-hover:bg-gradient-to-br group-hover:from-amber-50 group-hover:to-orange-50 overflow-hidden\">\n                    {/* Floating Background Elements */}\n                    <div className=\"absolute -top-4 -right-4 w-16 h-16 bg-gradient-to-br from-amber-200/30 to-orange-200/30 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-all duration-500\"></div>\n                    <div className=\"absolute -bottom-2 -left-2 w-12 h-12 bg-gradient-to-br from-orange-200/30 to-red-200/30 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-all duration-500\"></div>\n                    \n                    <div className=\"flex flex-col items-center justify-center h-full text-center relative z-10 p-4\">\n                      <div className=\"w-12 h-12 mb-3 bg-gradient-to-br from-primary via-accent to-orange-500 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-500 group-hover:scale-110 group-hover:rotate-6 transform-gpu\">\n                        <IconComponent className=\"h-6 w-6 text-white drop-shadow-lg\" />\n                      </div>\n                      <h3 className=\"text-sm font-bold text-darkBrown group-hover:text-primary transition-colors duration-300 leading-tight\">\n                        {category.name}\n                      </h3>\n                      <div className=\"w-6 h-0.5 bg-gradient-to-r from-primary to-accent mx-auto rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 transform scale-x-0 group-hover:scale-x-100 mt-2\"></div>\n                    </div>\n                    \n                    {/* Hover Effect Shine */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-all duration-700\"></div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"text-center\">\n            <Link href=\"/products\">\n              <Button \n                className=\"bg-gradient-to-r from-primary to-accent hover:from-accent hover:to-primary text-white px-10 py-4 font-bold rounded-full shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:scale-105 group relative overflow-hidden\"\n                data-testid=\"button-view-all-categories\"\n              >\n                <span className=\"relative z-10 flex items-center\">\n                  View All Products\n                  <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform duration-300\" />\n                </span>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-accent to-orange-600 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products Section */}\n      <section id=\"featured-products\" className=\"py-20 bg-beige\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16 animate-fade-in\">\n            <h2 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">Featured Collection</h2>\n            <p className=\"text-xl text-gray-700 max-w-2xl mx-auto\">\n              Handpicked pieces that showcase the natural beauty and durability of IndoSaga wood\n            </p>\n          </div>\n          \n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"bg-white rounded-2xl p-6 animate-pulse\">\n                  <div className=\"w-full h-64 bg-gray-200 rounded-lg mb-4\" />\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\" />\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\" />\n                  <div className=\"h-10 bg-gray-200 rounded\" />\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {featuredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          )}\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/products\">\n              <Button \n                className=\"wood-texture text-white px-8 py-4 font-semibold hover:opacity-90 transition-opacity\"\n                data-testid=\"button-view-all-products\"\n              >\n                View All Products\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n\n      {/* Why Choose Us Section */}\n      <section className=\"py-20 bg-warmWhite\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">Why Choose IndoSaga?</h2>\n            <p className=\"text-xl text-gray-700 max-w-2xl mx-auto\">\n              Experience the difference of premium teak wood furniture crafted with traditional expertise\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <div className=\"text-center p-8 bg-white rounded-2xl shadow-lg hover-lift transition-all duration-300\">\n              <div className=\"w-16 h-16 wood-texture rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Shield className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-darkBrown mb-4\">Lifetime Warranty</h3>\n              <p className=\"text-gray-600\">We stand behind our craftsmanship with a comprehensive lifetime warranty on all teak furniture.</p>\n            </div>\n            \n            <div className=\"text-center p-8 bg-white rounded-2xl shadow-lg hover-lift transition-all duration-300\">\n              <div className=\"w-16 h-16 wood-texture rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <CheckCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-darkBrown mb-4\">100% Authentic Teak</h3>\n              <p className=\"text-gray-600\">Only premium grade teak wood sourced from sustainable plantations with proper certifications.</p>\n            </div>\n            \n            <div className=\"text-center p-8 bg-white rounded-2xl shadow-lg hover-lift transition-all duration-300\">\n              <div className=\"w-16 h-16 wood-texture rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Truck className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-darkBrown mb-4\">Free Installation</h3>\n              <p className=\"text-gray-600\">Complimentary delivery and professional installation by our skilled craftsmen across India.</p>\n            </div>\n            \n            <div className=\"text-center p-8 bg-white rounded-2xl shadow-lg hover-lift transition-all duration-300\">\n              <div className=\"w-16 h-16 wood-texture rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Clock className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-darkBrown mb-4\">Quick Delivery</h3>\n              <p className=\"text-gray-600\">Fast nationwide delivery within 7-15 days with real-time tracking and updates.</p>\n            </div>\n            \n            <div className=\"text-center p-8 bg-white rounded-2xl shadow-lg hover-lift transition-all duration-300\">\n              <div className=\"w-16 h-16 wood-texture rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Award className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-darkBrown mb-4\">Award Winning</h3>\n              <p className=\"text-gray-600\">Recognized for excellence in furniture design and customer satisfaction across India.</p>\n            </div>\n            \n            <div className=\"text-center p-8 bg-white rounded-2xl shadow-lg hover-lift transition-all duration-300\">\n              <div className=\"w-16 h-16 wood-texture rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Users className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-darkBrown mb-4\">Expert Craftsmen</h3>\n              <p className=\"text-gray-600\">Three generations of master artisans ensuring every piece meets our exacting standards.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Testimonials Circular Carousel */}\n      <section className=\"py-32 bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50 relative\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-amber-100/50 to-orange-100/30\"></div>\n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">What Our Customers Say</h2>\n            <p className=\"text-xl text-amber-800\">Real experiences from our satisfied customers</p>\n          </div>\n          \n          {/* Circular Testimonials Container */}\n          <div className=\"relative flex items-center justify-center\" style={{ minHeight: '900px', padding: '80px 0' }}>\n            {/* Orbiting Testimonial Cards - Now 6 cards */}\n            <div className=\"absolute inset-0 flex items-center justify-center z-10\">\n              {testimonials.slice(0, 6).map((testimonial, index) => {\n                const angle = (index * 60) + (currentTestimonialIndex * 15); // 6 cards with 60-degree spacing\n                const radius = 380; // Significantly increased radius for better separation\n                const x = Math.cos((angle * Math.PI) / 180) * radius;\n                const y = Math.sin((angle * Math.PI) / 180) * radius;\n                \n                return (\n                  <div\n                    key={index}\n                    className=\"absolute w-32 h-32 transition-all duration-1000 ease-in-out cursor-pointer group z-30\"\n                    style={{\n                      transform: `translate(${x}px, ${y}px)`,\n                      left: '50%',\n                      top: '50%',\n                      marginLeft: '-64px', // Half of w-32 (128px/2)\n                      marginTop: '-64px',  // Half of h-32 (128px/2)\n                    }}\n                    onClick={() => setCurrentTestimonialIndex(index)}\n                  >\n                    <div className=\"w-full h-full bg-gradient-to-br from-amber-100 to-orange-100 rounded-2xl shadow-xl border border-amber-300 p-3 hover:shadow-2xl hover:scale-110 transition-all duration-300 group-hover:border-amber-500 backdrop-blur-sm\">\n                      <div className=\"text-center\">\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center mx-auto mb-1 shadow-lg\">\n                          <span className=\"text-sm font-bold text-white\">{testimonial.initials}</span>\n                        </div>\n                        <div className=\"text-xs font-semibold text-darkBrown\">{testimonial.name}</div>\n                        <div className=\"text-xs text-amber-700\">{testimonial.location}</div>\n                        <div className=\"flex justify-center mt-1\">\n                          {[...Array(testimonial.rating)].map((_, i) => (\n                            <Star key={i} className=\"h-2.5 w-2.5 text-amber-500 fill-current\" />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Central Main Testimonial */}\n            <div className=\"relative z-20 max-w-md mx-auto\">\n              <div className=\"bg-gradient-to-br from-white to-amber-50 p-8 rounded-3xl shadow-2xl border-2 border-amber-200/50 backdrop-blur-sm transform hover:scale-105 transition-all duration-500\">\n                {/* Quote Icon */}\n                <div className=\"text-6xl text-amber-600/30 font-serif absolute -top-4 -left-2\">\"</div>\n                \n                {/* Stars */}\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"flex text-amber-500\">\n                    {[...Array(testimonials[currentTestimonialIndex]?.rating || 5)].map((_, i) => (\n                      <Star key={i} className=\"h-6 w-6 fill-current animate-pulse\" style={{ animationDelay: `${i * 100}ms` }} />\n                    ))}\n                  </div>\n                </div>\n                \n                {/* Review Text */}\n                <p className=\"text-amber-900 text-lg leading-relaxed mb-6 text-center font-medium min-h-[120px] flex items-center\">\n                  \"{testimonials[currentTestimonialIndex]?.review}\"\n                </p>\n                \n                {/* Customer Info */}\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"w-14 h-14 bg-gradient-to-br from-amber-600 to-orange-700 rounded-full flex items-center justify-center mr-4 shadow-lg\">\n                    <span className=\"text-xl font-bold text-white\">{testimonials[currentTestimonialIndex]?.initials}</span>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-bold text-darkBrown text-lg\">{testimonials[currentTestimonialIndex]?.name}</div>\n                    <div className=\"text-amber-700 text-sm\">{testimonials[currentTestimonialIndex]?.location}</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation Dots */}\n          <div className=\"flex justify-center mt-12 space-x-3\">\n            {testimonials.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentTestimonialIndex(index)}\n                className={`w-4 h-4 rounded-full transition-all duration-300 ${\n                  index === currentTestimonialIndex \n                    ? 'bg-gradient-to-r from-amber-600 to-orange-600 scale-125 shadow-lg' \n                    : 'bg-amber-300 hover:bg-amber-400'\n                }`}\n                aria-label={`Go to testimonial ${index + 1}`}\n              />\n            ))}\n          </div>\n\n          {/* Customer Stats */}\n          <div className=\"mt-16 text-center\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-white/90 to-amber-50/90 backdrop-blur-sm rounded-full px-8 py-4 shadow-xl border border-amber-200\">\n              <Star className=\"h-6 w-6 text-amber-500 fill-current mr-3\" />\n              <span className=\"font-bold text-darkBrown text-lg\">4.9/5 Rating</span>\n              <span className=\"mx-4 text-amber-400\">•</span>\n              <Users className=\"h-6 w-6 text-orange-600 mr-3\" />\n              <span className=\"font-bold text-darkBrown text-lg\">50,000+ Reviews</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Access Section */}\n      <section className=\"py-20 bg-gradient-to-br from-warmWhite to-beige\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-display font-bold text-darkBrown mb-4 animate-fadeInUp\">Explore More</h2>\n            <p className=\"text-lg text-gray-700 animate-fadeInUp\" style={{ animationDelay: '0.2s' }}>Discover everything IndoSaga has to offer</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Link href=\"/deals\" className=\"group\" style={{ animationDelay: '0.1s' }}>\n              <div className=\"h-80 bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-50 border-2 border-amber-200 rounded-2xl p-8 text-center transition-all duration-500 group-hover:border-amber-400 group-hover:shadow-2xl group-hover:shadow-amber-200/50 relative overflow-hidden transform group-hover:scale-105 animate-slideInUp\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-amber-100/20 to-orange-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"absolute top-0 right-0 bg-gradient-to-r from-amber-500 to-orange-500 text-white px-4 py-2 text-xs font-bold rounded-bl-2xl shadow-lg animate-pulse\">\n                  HOT<span className=\"ml-1\">🔥</span>\n                </div>\n                <div className=\"relative z-10\">\n                  <div className=\"text-6xl mb-6 transform group-hover:scale-110 transition-transform duration-500 animate-bounce\">🔥</div>\n                  <h3 className=\"text-2xl font-display font-bold text-amber-700 mb-3 group-hover:text-amber-800 transition-colors duration-300\">₹1 Flash Deals</h3>\n                  <p className=\"text-gray-600 mb-6 group-hover:text-gray-700 transition-colors duration-300\">Limited time offers on premium furniture</p>\n                  <div className=\"text-sm text-amber-600 font-semibold bg-amber-100 px-4 py-2 rounded-full inline-block group-hover:bg-amber-200 transition-all duration-300 animate-pulse\">\n                    Save up to 95%\n                  </div>\n                </div>\n              </div>\n            </Link>\n            \n            <Link href=\"/about\" className=\"group\" style={{ animationDelay: '0.3s' }}>\n              <div className=\"h-80 bg-gradient-to-br from-amber-50 via-orange-50 to-red-50 border-2 border-amber-300 rounded-2xl p-8 text-center transition-all duration-500 group-hover:border-amber-500 group-hover:shadow-2xl group-hover:shadow-amber-300/50 relative overflow-hidden transform group-hover:scale-105 animate-slideInUp\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-amber-200/20 to-orange-200/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"absolute top-4 left-4 w-16 h-16 bg-gradient-to-br from-amber-200 to-orange-200 rounded-full opacity-20 group-hover:opacity-40 transition-opacity duration-500\"></div>\n                <div className=\"absolute bottom-4 right-4 w-12 h-12 bg-gradient-to-br from-orange-200 to-red-200 rounded-full opacity-20 group-hover:opacity-40 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"text-6xl mb-6 transform group-hover:scale-110 transition-transform duration-500 group-hover:animate-pulse\">🌳</div>\n                  <h3 className=\"text-2xl font-display font-bold text-amber-800 mb-3 group-hover:text-amber-900 transition-colors duration-300\">IndoSaga Heritage</h3>\n                  <p className=\"text-gray-600 mb-6 group-hover:text-gray-700 transition-colors duration-300\">Learn about our premium teak wood</p>\n                  <div className=\"text-sm text-amber-700 font-semibold bg-amber-200 px-4 py-2 rounded-full inline-block group-hover:bg-amber-300 transition-all duration-300\">\n                    50+ Years of Excellence\n                  </div>\n                </div>\n              </div>\n            </Link>\n            \n            <Link href=\"/contact\" className=\"group\" style={{ animationDelay: '0.5s' }}>\n              <div className=\"h-80 bg-gradient-to-br from-orange-50 via-amber-50 to-yellow-50 border-2 border-orange-200 rounded-2xl p-8 text-center transition-all duration-500 group-hover:border-orange-400 group-hover:shadow-2xl group-hover:shadow-orange-200/50 relative overflow-hidden transform group-hover:scale-105 animate-slideInUp\">\n                <div className=\"absolute inset-0 bg-gradient-to-r from-orange-100/20 to-amber-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <div className=\"absolute top-4 right-4 w-20 h-20 bg-gradient-to-br from-orange-200 to-amber-200 rounded-full opacity-10 group-hover:opacity-30 transition-opacity duration-500\"></div>\n                <div className=\"absolute bottom-4 left-4 w-14 h-14 bg-gradient-to-br from-amber-200 to-yellow-200 rounded-full opacity-15 group-hover:opacity-35 transition-opacity duration-500\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"text-6xl mb-6 transform group-hover:scale-110 transition-transform duration-500 group-hover:animate-bounce\">🏪</div>\n                  <h3 className=\"text-2xl font-display font-bold text-orange-700 mb-3 group-hover:text-orange-800 transition-colors duration-300\">Visit Showroom</h3>\n                  <p className=\"text-gray-600 mb-6 group-hover:text-gray-700 transition-colors duration-300\">Experience furniture in person</p>\n                  <div className=\"text-sm text-orange-600 font-semibold bg-orange-200 px-4 py-2 rounded-full inline-block group-hover:bg-orange-300 transition-all duration-300 animate-pulse\">\n                    Free Consultation\n                  </div>\n                </div>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Statistics Section */}\n      <section className=\"py-20 bg-gradient-to-r from-darkBrown to-brown-800 text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-[url('https://images.unsplash.com/photo-1549497538-303791108f95?ixlib=rb-4.0.3&auto=format&fit=crop&w=2560&h=600')] bg-cover bg-center opacity-10\"></div>\n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-display font-bold mb-4\">Our Achievements</h2>\n            <p className=\"text-xl text-gray-300\">Built on trust, delivered with excellence</p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            <div className=\"text-center transform hover:scale-105 transition-transform duration-300\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">50+</div>\n              <div className=\"text-lg font-semibold mb-1\">Years Experience</div>\n              <div className=\"text-sm text-gray-300\">Crafting Excellence</div>\n            </div>\n            <div className=\"text-center transform hover:scale-105 transition-transform duration-300\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">50K+</div>\n              <div className=\"text-lg font-semibold mb-1\">Happy Customers</div>\n              <div className=\"text-sm text-gray-300\">Satisfied Families</div>\n            </div>\n            <div className=\"text-center transform hover:scale-105 transition-transform duration-300\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">1000+</div>\n              <div className=\"text-lg font-semibold mb-1\">Furniture Designs</div>\n              <div className=\"text-sm text-gray-300\">Unique Creations</div>\n            </div>\n            <div className=\"text-center transform hover:scale-105 transition-transform duration-300\">\n              <div className=\"text-4xl font-bold text-primary mb-2\">4.9★</div>\n              <div className=\"text-lg font-semibold mb-1\">Customer Rating</div>\n              <div className=\"text-sm text-gray-300\">Google Reviews</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-darkBrown text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4 group hover:scale-105 transition-all duration-500\">\n                <div className=\"w-12 h-12 rounded-full overflow-hidden ring-2 ring-primary/30 group-hover:ring-primary/70 transition-all duration-500 shadow-lg group-hover:shadow-primary/30 group-hover:shadow-xl flex-shrink-0 bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-sm\">IS</span>\n                </div>\n                <div className=\"flex flex-col justify-center leading-tight\">\n                  <div className=\"text-xl font-display font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700 drop-shadow-sm whitespace-nowrap\">\n                    IndoSaga\n                  </div>\n                  <div className=\"text-xl font-display font-bold bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700 drop-shadow-sm whitespace-nowrap\">\n                    Furniture\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-gray-300 mb-4\">Premium teak wood furniture crafted with love and tradition for over 50 years.</p>\n            </div>\n            \n            <div>\n              <h4 className=\"text-lg font-semibold font-display mb-4 bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700\">Quick Links</h4>\n              <ul className=\"space-y-2\">\n                <li><Link href=\"/\" className=\"text-gray-300 hover:text-primary transition-colors\">Home</Link></li>\n                <li><Link href=\"/products\" className=\"text-gray-300 hover:text-primary transition-colors\">Products</Link></li>\n                <li><Link href=\"/deals\" className=\"text-gray-300 hover:text-primary transition-colors\">₹1 Deals</Link></li>\n                <li><Link href=\"/about\" className=\"text-gray-300 hover:text-primary transition-colors\">About Us</Link></li>\n                <li><Link href=\"/contact\" className=\"text-gray-300 hover:text-primary transition-colors\">Contact</Link></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"text-lg font-semibold font-display mb-4 bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700\">Categories</h4>\n              <ul className=\"space-y-2\">\n                <li><span className=\"text-gray-300 hover:text-primary transition-colors cursor-pointer\">Dining Tables</span></li>\n                <li><span className=\"text-gray-300 hover:text-primary transition-colors cursor-pointer\">Chairs</span></li>\n                <li><span className=\"text-gray-300 hover:text-primary transition-colors cursor-pointer\">Wardrobes</span></li>\n                <li><span className=\"text-gray-300 hover:text-primary transition-colors cursor-pointer\">Beds</span></li>\n                <li><span className=\"text-gray-300 hover:text-primary transition-colors cursor-pointer\">Sofas</span></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"text-lg font-semibold font-display mb-4 bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent hover:from-accent hover:via-primary hover:to-accent transition-all duration-700\">Contact Info</h4>\n              <div className=\"space-y-2 text-gray-300\">\n                <p>📍 123 Furniture Street, Mumbai</p>\n                <p>📞 +91 98765 43210</p>\n                <p>✉️ info@sagwanfurniture.com</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-600 mt-8 pt-8 text-center\">\n            <p className=\"text-gray-300\">&copy; 2024 IndoSaga Furniture. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Appointment Success Modal */}\n      {showAppointmentSuccess && appointmentSuccessData && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-3xl max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl animate-fadeIn\">\n            {/* Header */}\n            <div className=\"bg-gradient-to-r from-accent to-primary p-6 rounded-t-3xl relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent\"></div>\n              <div className=\"relative z-10 flex justify-between items-center\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-white/20 rounded-full p-3\">\n                    <CheckCircle className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-white\">✅ Your appointment has been successfully booked!</h2>\n                  </div>\n                </div>\n                <Button\n                  onClick={() => setShowAppointmentSuccess(false)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20 rounded-full w-10 h-10 p-0\"\n                  data-testid=\"button-close-appointment-success\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6\">\n                  <CheckCircle className=\"w-8 h-8 text-white\" />\n                </div>\n                \n                <p className=\"text-primary text-lg mb-6\">\n                  Your virtual meeting has been confirmed and scheduled successfully.\n                </p>\n\n                <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-6 text-left mb-6\">\n                  <h4 className=\"font-bold text-primary mb-4\">Appointment Details:</h4>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <div className=\"space-y-2\">\n                        <div><strong>Name:</strong> {appointmentSuccessData.customerName}</div>\n                        <div><strong>Date:</strong> {new Date(appointmentSuccessData.date).toLocaleDateString()}</div>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"space-y-2\">\n                        <div><strong>Time:</strong> {appointmentSuccessData.time}</div>\n                        <div><strong>Type:</strong> {appointmentSuccessData.type.replace('_', ' ').toUpperCase()}</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6 text-left mb-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Video className=\"w-6 h-6 text-blue-600 mt-1 flex-shrink-0\" />\n                    <div>\n                      <p className=\"text-blue-800 font-medium\">\n                        A confirmation email with the video call link has been sent to your registered email address.\n                      </p>\n                      <p className=\"text-sm text-blue-600 mt-2\">\n                        Email: {appointmentSuccessData.email}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={() => setShowAppointmentSuccess(false)}\n                  className=\"bg-gradient-to-r from-green-500 to-green-600 text-white hover:shadow-lg transition-all duration-300\"\n                  data-testid=\"button-close-appointment-success-main\"\n                >\n                  Got it, thanks!\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Support Ticket Success Modal */}\n      {showTicketSuccess && ticketSuccessData && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-3xl max-w-2xl w-full max-h-[90vh] overflow-y-auto shadow-2xl animate-fadeIn\">\n            {/* Header */}\n            <div className=\"bg-gradient-to-r from-primary to-accent p-6 rounded-t-3xl relative overflow-hidden\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent\"></div>\n              <div className=\"relative z-10 flex justify-between items-center\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-white/20 rounded-full p-3\">\n                    <Headphones className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-white\">✅ Support ticket created successfully!</h2>\n                  </div>\n                </div>\n                <Button\n                  onClick={() => setShowTicketSuccess(false)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white hover:bg-white/20 rounded-full w-10 h-10 p-0\"\n                  data-testid=\"button-close-ticket-success\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6\">\n                  <CheckCircle className=\"w-8 h-8 text-white\" />\n                </div>\n                \n                <p className=\"text-primary text-lg mb-6\">\n                  Your support request has been submitted and we'll respond within 24 hours.\n                </p>\n\n                <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-6 text-left mb-6\">\n                  <h4 className=\"font-bold text-primary mb-4\">Ticket Details:</h4>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <div className=\"space-y-2\">\n                        <div><strong>Ticket ID:</strong> {ticketSuccessData.ticketId}</div>\n                        <div><strong>Name:</strong> {ticketSuccessData.customerName}</div>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"space-y-2\">\n                        <div><strong>Subject:</strong> {ticketSuccessData.subject}</div>\n                        <div><strong>Priority:</strong> <span className=\"uppercase text-xs font-semibold px-2 py-1 rounded bg-gray-100\">{ticketSuccessData.priority}</span></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-6 text-left mb-6\">\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle className=\"w-6 h-6 text-primary mt-1 flex-shrink-0\" />\n                    <div>\n                      <p className=\"text-primary font-medium\">\n                        A confirmation email has been sent to your registered email address.\n                      </p>\n                      <p className=\"text-sm text-green-600 mt-2\">\n                        Email: {ticketSuccessData.email}\n                      </p>\n                      <p className=\"text-sm text-green-600 mt-2\">\n                        Please save the ticket ID <strong>{ticketSuccessData.ticketId}</strong> for future reference.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={() => setShowTicketSuccess(false)}\n                  className=\"bg-gradient-to-r from-primary to-accent text-white hover:shadow-lg transition-all duration-300\"\n                  data-testid=\"button-close-ticket-success-main\"\n                >\n                  Got it, thanks!\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}\n","size_bytes":49743},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Plus, Camera, Upload, X, RefreshCw } from \"lucide-react\";\nimport ProductCard from \"@/components/product-card\";\n\nexport default function Products() {\n  const [location] = useLocation();\n  const [search, setSearch] = useState(\"\");\n  const [categoryId, setCategoryId] = useState(\"all\");\n  const [subcategoryId, setSubcategoryId] = useState(\"all\");\n  const [priceRange, setPriceRange] = useState(\"all\");\n  const [displayCount, setDisplayCount] = useState(8);\n  \n  // Camera functionality state\n  const [showCameraModal, setShowCameraModal] = useState(false);\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [isSearchingByImage, setIsSearchingByImage] = useState(false);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Read URL parameters on component mount\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const categoryParam = urlParams.get('category');\n    if (categoryParam) {\n      setCategoryId(categoryParam);\n    }\n  }, [location]);\n\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\"],\n    queryFn: async () => {\n      const response = await fetch('/api/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      const data = await response.json();\n      if (!Array.isArray(data)) return [];\n      \n      // Remove duplicates by filtering to keep only the first occurrence of each category name\n      const uniqueCategories = data.filter((category, index, self) => \n        self.findIndex(c => c.name === category.name) === index\n      );\n      return uniqueCategories;\n    },\n  });\n\n  const { data: subcategories = [] } = useQuery({\n    queryKey: [\"/api/subcategories\", categoryId],\n    queryFn: async () => {\n      if (categoryId === \"all\") return [];\n      const response = await fetch(`/api/subcategories?categoryId=${categoryId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch subcategories');\n      }\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: categoryId !== \"all\",\n  });\n\n  const { data: products = [], isLoading, refetch: refetchProducts } = useQuery({\n    queryKey: [\"/api/products\", { search, categoryId, subcategoryId, ...parsePriceRange(priceRange) }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (search) params.append(\"search\", search);\n      \n      // If subcategory is selected, only filter by subcategory (more specific)\n      // Otherwise filter by category\n      if (subcategoryId && subcategoryId !== \"all\") {\n        params.append(\"subcategoryId\", subcategoryId);\n      } else if (categoryId && categoryId !== \"all\") {\n        params.append(\"categoryId\", categoryId);\n      }\n      \n      const { minPrice, maxPrice } = parsePriceRange(priceRange);\n      if (minPrice) params.append(\"minPrice\", minPrice.toString());\n      if (maxPrice) params.append(\"maxPrice\", maxPrice.toString());\n      \n      const response = await fetch(`/api/products?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n  });\n\n  function parsePriceRange(range: string) {\n    switch (range) {\n      case \"10000-25000\":\n        return { minPrice: 10000, maxPrice: 25000 };\n      case \"25000-50000\":\n        return { minPrice: 25000, maxPrice: 50000 };\n      case \"50000+\":\n        return { minPrice: 50000, maxPrice: undefined };\n      case \"all\":\n      default:\n        return { minPrice: undefined, maxPrice: undefined };\n    }\n  }\n\n  // Camera functionality\n  const startCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' } // Use back camera on mobile\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        setIsCameraActive(true);\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Camera Error\",\n        description: \"Unable to access camera. Please check permissions or try uploading an image.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    if (videoRef.current && videoRef.current.srcObject) {\n      const stream = videoRef.current.srcObject as MediaStream;\n      stream.getTracks().forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsCameraActive(false);\n  };\n\n  const capturePhoto = () => {\n    if (videoRef.current && canvasRef.current) {\n      const canvas = canvasRef.current;\n      const video = videoRef.current;\n      \n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      \n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        ctx.drawImage(video, 0, 0);\n        const imageData = canvas.toDataURL('image/jpeg', 0.8);\n        setCapturedImage(imageData);\n        stopCamera();\n      }\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setCapturedImage(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please select a valid image file.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const searchByImage = async () => {\n    if (!capturedImage) return;\n    \n    setIsSearchingByImage(true);\n    \n    try {\n      // Convert base64 to blob\n      const response = await fetch(capturedImage);\n      const blob = await response.blob();\n      \n      const formData = new FormData();\n      formData.append('image', blob, 'search-image.jpg');\n      \n      const searchResponse = await fetch('/api/products/search-by-image', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (searchResponse.ok) {\n        const similarProducts = await searchResponse.json();\n        \n        console.log('Image search response:', similarProducts);\n        \n        if (similarProducts && similarProducts.length > 0) {\n          // First, clear the filters that will trigger the useQuery to refetch\n          setSearch(\"\");\n          setCategoryId(\"all\");\n          setSubcategoryId(\"all\");\n          setPriceRange(\"all\");\n          \n          // Use setTimeout to ensure state updates happen first\n          setTimeout(() => {\n            // Clear all existing cache entries\n            queryClient.removeQueries({ queryKey: [\"/api/products\"] });\n            \n            // Set the new data in cache with the exact key that useQuery will look for\n            const exactCacheKey = [\"/api/products\", { search: \"\", categoryId: \"all\", subcategoryId: \"all\", minPrice: undefined, maxPrice: undefined }];\n            queryClient.setQueryData(exactCacheKey, similarProducts);\n            \n            // Invalidate to trigger a re-render\n            queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n            \n            setDisplayCount(8);\n          }, 100);\n          \n          toast({\n            title: \"Similar Products Found!\",\n            description: `Found ${similarProducts.length} similar products based on your image.`,\n          });\n        } else {\n          // No similar products found - set empty array\n          setSearch(\"\");\n          setCategoryId(\"all\");\n          setSubcategoryId(\"all\");\n          setPriceRange(\"all\");\n          \n          setTimeout(() => {\n            queryClient.removeQueries({ queryKey: [\"/api/products\"] });\n            const exactCacheKey = [\"/api/products\", { search: \"\", categoryId: \"all\", subcategoryId: \"all\", minPrice: undefined, maxPrice: undefined }];\n            queryClient.setQueryData(exactCacheKey, []);\n            queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n          }, 100);\n          \n          toast({\n            title: \"No Similar Products Found\",\n            description: \"We couldn't find products matching your image. Try uploading a different image or browse our categories.\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        const errorData = await searchResponse.json().catch(() => ({ message: 'Unknown error' }));\n        throw new Error(errorData.message || 'Failed to search by image');\n      }\n    } catch (error) {\n      console.error('Error searching by image:', error);\n      toast({\n        title: \"Search Error\",\n        description: \"Unable to search by image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSearchingByImage(false);\n      setShowCameraModal(false);\n      setCapturedImage(null);\n    }\n  };\n\n  const resetImageSearch = () => {\n    setCapturedImage(null);\n    if (isCameraActive) {\n      stopCamera();\n    }\n  };\n\n  return (\n    <div className=\"py-20 bg-gradient-to-br from-warmWhite via-beige to-amber-50 min-h-screen relative overflow-hidden\">\n      {/* Background Decorative Elements */}\n      <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-amber-200 to-orange-200 rounded-full opacity-10 animate-pulse\"></div>\n      <div className=\"absolute top-40 right-20 w-24 h-24 bg-gradient-to-br from-orange-200 to-red-200 rounded-full opacity-10 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n      <div className=\"absolute bottom-40 left-20 w-28 h-28 bg-gradient-to-br from-yellow-200 to-amber-200 rounded-full opacity-10 animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        <div className=\"text-center mb-12 animate-fadeInUp\">\n          <div className=\"inline-flex items-center bg-gradient-to-r from-amber-100 to-orange-100 rounded-full px-6 py-2 mb-6 shadow-lg animate-slideInDown\">\n            <div className=\"w-3 h-3 bg-gradient-to-r from-amber-500 to-orange-500 rounded-full mr-3 animate-pulse\"></div>\n            <span className=\"text-amber-800 font-semibold text-sm\">Premium Collection</span>\n          </div>\n          <h1 className=\"text-5xl font-display font-bold bg-gradient-to-r from-darkBrown via-primary to-accent bg-clip-text text-transparent mb-6 animate-slideInUp\">Our Products</h1>\n          <p className=\"text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed animate-slideInUp\" style={{ animationDelay: '0.2s' }}>Explore our complete collection of premium IndoSaga furniture crafted with traditional expertise</p>\n        </div>\n\n        {/* Search and Filter Bar */}\n        <div className=\"bg-gradient-to-r from-white via-warmWhite to-white rounded-3xl shadow-2xl p-8 mb-16 relative overflow-hidden group hover:shadow-3xl transition-all duration-500 animate-slideInUp border border-amber-100\" style={{ animationDelay: '0.4s' }}>\n          <div className=\"absolute inset-0 bg-gradient-to-r from-amber-50/30 to-orange-50/30 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n          <div className=\"absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-amber-200 to-orange-200 rounded-full opacity-10 group-hover:opacity-20 transition-opacity duration-500\"></div>\n          <div className=\"relative z-10\">\n            <div className=\"flex flex-col lg:flex-row gap-6\">\n              <div className=\"flex-1 relative group/search\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-amber-600 h-5 w-5 group-focus-within/search:text-primary transition-colors duration-300\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search furniture...\"\n                  value={search}\n                  onChange={(e) => setSearch(e.target.value)}\n                  className=\"pl-12 pr-16 py-4 border-2 border-amber-200 focus:border-amber-400 focus:ring-amber-200 rounded-2xl bg-gradient-to-r from-amber-50 to-orange-50 text-darkBrown placeholder-amber-600 font-medium shadow-sm hover:shadow-md transition-all duration-300\"\n                  data-testid=\"input-search-products\"\n                />\n                \n                {/* Camera Search Button */}\n                <Dialog open={showCameraModal} onOpenChange={setShowCameraModal}>\n                  <DialogTrigger asChild>\n                    <Button\n                      size=\"sm\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-10 w-10 p-0 bg-gradient-to-r from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100 text-amber-600 hover:text-amber-700 border border-amber-200 hover:border-amber-300 rounded-xl shadow-sm hover:shadow-md transition-all duration-300\"\n                      title=\"Search by taking a photo\"\n                    >\n                      <Camera className=\"h-5 w-5\" />\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"sm:max-w-md\">\n                    <DialogHeader>\n                      <DialogTitle className=\"text-amber-900 font-bold\">Search by Image</DialogTitle>\n                    </DialogHeader>\n                    \n                    <div className=\"space-y-4\">\n                      {!capturedImage ? (\n                        <>\n                          {/* Camera View */}\n                          {isCameraActive ? (\n                            <div className=\"relative\">\n                              <video\n                                ref={videoRef}\n                                autoPlay\n                                playsInline\n                                className=\"w-full h-64 object-cover rounded-lg bg-gray-100\"\n                              />\n                              <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2\">\n                                <Button onClick={capturePhoto} className=\"bg-white text-gray-900 hover:bg-gray-100\">\n                                  <Camera className=\"h-4 w-4 mr-2\" />\n                                  Capture\n                                </Button>\n                                <Button onClick={stopCamera} variant=\"outline\" className=\"bg-white text-gray-900 hover:bg-gray-100\">\n                                  <X className=\"h-4 w-4 mr-2\" />\n                                  Cancel\n                                </Button>\n                              </div>\n                            </div>\n                          ) : (\n                            <div className=\"text-center space-y-4\">\n                              <div className=\"w-full h-64 bg-gradient-to-br from-amber-100 to-orange-100 rounded-lg flex items-center justify-center\">\n                                <div className=\"text-center\">\n                                  <Camera className=\"h-16 w-16 text-amber-600 mx-auto mb-4\" />\n                                  <p className=\"text-amber-700 font-medium\">Take a photo to find similar furniture</p>\n                                </div>\n                              </div>\n                              \n                              <div className=\"grid grid-cols-2 gap-3\">\n                                <Button onClick={startCamera} className=\"bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white\">\n                                  <Camera className=\"h-4 w-4 mr-2\" />\n                                  Open Camera\n                                </Button>\n                                <Button \n                                  onClick={() => fileInputRef.current?.click()} \n                                  variant=\"outline\"\n                                  className=\"border-amber-300 text-amber-700 hover:bg-amber-50\"\n                                >\n                                  <Upload className=\"h-4 w-4 mr-2\" />\n                                  Upload Image\n                                </Button>\n                              </div>\n                              \n                              <input\n                                ref={fileInputRef}\n                                type=\"file\"\n                                accept=\"image/*\"\n                                onChange={handleFileUpload}\n                                className=\"hidden\"\n                              />\n                            </div>\n                          )}\n                        </>\n                      ) : (\n                        <>\n                          {/* Captured Image Preview */}\n                          <div className=\"space-y-4\">\n                            <img \n                              src={capturedImage} \n                              alt=\"Captured for search\" \n                              className=\"w-full h-64 object-cover rounded-lg\"\n                            />\n                            \n                            <div className=\"grid grid-cols-2 gap-3\">\n                              <Button \n                                onClick={searchByImage} \n                                disabled={isSearchingByImage}\n                                className=\"bg-gradient-to-r from-accent to-primary hover:from-primary hover:to-accent text-white\"\n                              >\n                                {isSearchingByImage ? (\n                                  <>\n                                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                                    Searching...\n                                  </>\n                                ) : (\n                                  <>\n                                    <Search className=\"h-4 w-4 mr-2\" />\n                                    Find Similar\n                                  </>\n                                )}\n                              </Button>\n                              <Button \n                                onClick={resetImageSearch} \n                                variant=\"outline\"\n                                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n                              >\n                                <X className=\"h-4 w-4 mr-2\" />\n                                Retake\n                              </Button>\n                            </div>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Select value={categoryId} onValueChange={(value) => {\n                  setCategoryId(value);\n                  setSubcategoryId(\"all\"); // Reset subcategory when category changes\n                }}>\n                  <SelectTrigger className=\"w-full sm:w-52 py-4 border-2 border-amber-200 focus:ring-amber-200 rounded-2xl bg-gradient-to-r from-amber-50 to-orange-50 text-darkBrown font-medium shadow-sm hover:shadow-md transition-all duration-300 hover:border-amber-400\" data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"rounded-xl border-amber-200 shadow-xl\">\n                    <SelectItem value=\"all\" className=\"font-medium\">All Categories</SelectItem>\n                    {(categories as any[]).map((category: any) => (\n                      <SelectItem key={category.id} value={category.id} className=\"font-medium\">\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={priceRange} onValueChange={setPriceRange}>\n                  <SelectTrigger className=\"w-full sm:w-52 py-4 border-2 border-amber-200 focus:ring-amber-200 rounded-2xl bg-gradient-to-r from-amber-50 to-orange-50 text-darkBrown font-medium shadow-sm hover:shadow-md transition-all duration-300 hover:border-amber-400\" data-testid=\"select-price-range\">\n                    <SelectValue placeholder=\"Price Range\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"rounded-xl border-amber-200 shadow-xl\">\n                    <SelectItem value=\"all\" className=\"font-medium\">All Prices</SelectItem>\n                    <SelectItem value=\"10000-25000\" className=\"font-medium\">₹10,000 - ₹25,000</SelectItem>\n                    <SelectItem value=\"25000-50000\" className=\"font-medium\">₹25,000 - ₹50,000</SelectItem>\n                    <SelectItem value=\"50000+\" className=\"font-medium\">₹50,000+</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Subcategories Section - Show when a category is selected */}\n        {categoryId !== \"all\" && subcategories.length > 0 && (\n          <div className=\"relative mb-8 animate-slideInUp\">\n            {/* Background with animated gradients */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-amber-200 via-orange-200 to-amber-200 rounded-3xl opacity-20 animate-pulse\"></div>\n            <div className=\"relative bg-gradient-to-br from-white via-warmWhite to-amber-50 rounded-3xl shadow-2xl p-8 border-2 border-amber-200 overflow-hidden\">\n              {/* Decorative elements */}\n              <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-amber-300 to-orange-300 rounded-full opacity-10 -translate-y-16 translate-x-16\"></div>\n              <div className=\"absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-orange-300 to-amber-300 rounded-full opacity-10 translate-y-12 -translate-x-12\"></div>\n              \n              <div className=\"relative z-10\">\n                <div className=\"flex overflow-x-auto gap-6 pb-4 px-4\">\n                  {/* All Items Button */}\n                  <button\n                    onClick={() => setSubcategoryId(\"all\")}\n                    className={`group relative transition-all duration-300 hover:shadow-2xl w-36 h-48 rounded-2xl overflow-hidden shadow-lg flex-shrink-0 ${\n                      subcategoryId === \"all\"\n                        ? \"bg-gradient-to-br from-amber-500 to-orange-500 text-white shadow-2xl\"\n                        : \"bg-white border-2 border-amber-200 hover:border-amber-400 hover:shadow-xl\"\n                    }`}\n                  >\n                    <div className=\"h-32 bg-gradient-to-br from-amber-100 to-orange-100 flex items-center justify-center\">\n                      <svg className=\"w-12 h-12 text-amber-600 group-hover:animate-pulse\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\n                      </svg>\n                    </div>\n                    <div className=\"h-16 flex items-center justify-center p-2\">\n                      <span className={`text-center font-bold text-xs ${subcategoryId === \"all\" ? \"text-white\" : \"text-amber-800\"}`}>\n                        All {categories.find(c => c.id === categoryId)?.name || \"Items\"}\n                      </span>\n                    </div>\n                  </button>\n                  \n                  {/* Subcategory Cards */}\n                  {subcategories.map((subcategory: any, index: number) => (\n                    <div\n                      key={subcategory.id}\n                      className=\"animate-slideInUp\"\n                      style={{ \n                        animationDelay: `${index * 0.1}s`,\n                        animationFillMode: 'both'\n                      }}\n                    >\n                      <button\n                        onClick={() => setSubcategoryId(subcategory.id)}\n                        className={`group relative transition-all duration-300 hover:shadow-lg hover:border-amber-500 w-36 h-48 rounded-2xl overflow-hidden shadow-lg flex-shrink-0 ${\n                          subcategoryId === subcategory.id\n                            ? \"bg-gradient-to-br from-amber-500 to-orange-500 text-white shadow-2xl ring-2 ring-amber-300\"\n                            : \"bg-white border-2 border-amber-200 hover:border-amber-400 hover:shadow-xl\"\n                        }`}\n                      >\n                        {/* Image Section - Larger Area */}\n                        <div className=\"h-32 w-full bg-amber-50 flex items-center justify-center p-2\">\n                          {subcategory.imageUrl ? (\n                            <img \n                              src={subcategory.imageUrl} \n                              alt={subcategory.name}\n                              className=\"w-full h-full object-cover rounded-xl shadow-md group-hover:shadow-lg transition-all duration-300\"\n                            />\n                          ) : (\n                            <div className=\"w-full h-full bg-amber-200 rounded-xl flex items-center justify-center\">\n                              <svg className=\"w-8 h-8 text-amber-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                              </svg>\n                            </div>\n                          )}\n                        </div>\n                        \n                        {/* Text Section - Compact Area */}\n                        <div className=\"h-16 w-full flex items-center justify-center p-2\">\n                          <span className={`text-center font-bold text-xs leading-tight ${\n                            subcategoryId === subcategory.id ? \"text-white\" : \"text-amber-800\"\n                          }`}>\n                            {subcategory.name}\n                          </span>\n                        </div>\n                        \n                        {/* Selection Indicator */}\n                        {subcategoryId === subcategory.id && (\n                          <div className=\"absolute top-2 right-2 w-6 h-6 bg-white rounded-full shadow-lg flex items-center justify-center\">\n                            <svg className=\"w-4 h-4 text-amber-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                            </svg>\n                          </div>\n                        )}\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Products Section */}\n        <div className=\"relative\">\n          <div className=\"text-center mb-10 animate-fadeInUp\" style={{ animationDelay: '0.6s' }}>\n            <div className=\"inline-flex items-center bg-gradient-to-r from-amber-200 to-orange-200 rounded-full px-6 py-2 mb-4 shadow-lg\">\n              <span className=\"text-amber-900 font-bold text-sm\">\n                {products.length > 0 ? `${products.length} Products Found` : 'Premium Furniture Collection'}\n              </span>\n            </div>\n          </div>\n\n          {/* Products Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n              {[...Array(12)].map((_, i) => (\n                <div key={i} className=\"bg-gradient-to-br from-white to-amber-50 rounded-3xl p-8 animate-pulse shadow-lg border border-amber-100\" style={{ animationDelay: `${i * 100}ms` }}>\n                  <div className=\"w-full h-52 bg-gradient-to-br from-amber-200 to-orange-200 rounded-2xl mb-6 opacity-30\" />\n                  <div className=\"h-6 bg-gradient-to-r from-amber-200 to-orange-200 rounded-lg mb-3 opacity-30\" />\n                  <div className=\"h-4 bg-gradient-to-r from-amber-100 to-orange-100 rounded-lg mb-6 opacity-30\" />\n                  <div className=\"flex space-x-2\">\n                    <div className=\"h-12 bg-gradient-to-r from-amber-200 to-orange-200 rounded-xl flex-1 opacity-30\" />\n                    <div className=\"h-12 bg-gradient-to-r from-orange-200 to-red-200 rounded-xl flex-1 opacity-30\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : products.length === 0 ? (\n            <div className=\"text-center py-20 animate-fadeInUp\">\n              <div className=\"bg-gradient-to-br from-amber-100 to-orange-100 rounded-3xl p-12 max-w-md mx-auto shadow-xl border border-amber-200\">\n                <div className=\"w-24 h-24 bg-gradient-to-br from-amber-300 to-orange-300 rounded-full mx-auto mb-6 flex items-center justify-center animate-bounce\">\n                  <svg className=\"w-12 h-12 text-amber-700\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m0 0V9a2 2 0 012-2h2m0 0V6a2 2 0 012-2h2m0 0v1\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-2xl font-display font-bold text-amber-900 mb-4\">No products found</h3>\n                <p className=\"text-amber-700 leading-relaxed\">Try adjusting your search or filter criteria to find the perfect furniture piece.</p>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\" data-testid=\"products-grid\">\n                {products.slice(0, displayCount).map((product: any, index: number) => (\n                  <div \n                    key={product.id} \n                    className=\"animate-slideInUp\" \n                    style={{ \n                      animationDelay: `${0.8 + (index * 0.1)}s`,\n                      animationFillMode: 'both'\n                    }}\n                  >\n                    <ProductCard product={product} />\n                  </div>\n                ))}\n              </div>\n              \n              {/* Load More Button */}\n              {products.length > displayCount && (\n                <div className=\"text-center mt-16 animate-fadeInUp\" style={{ animationDelay: '1s' }}>\n                  <Button\n                    onClick={() => setDisplayCount(prev => prev + 8)}\n                    className=\"bg-gradient-to-r from-amber-100 to-orange-100 text-amber-800 hover:from-amber-200 hover:to-orange-200 hover:text-amber-900 border-2 border-amber-200 hover:border-amber-300 px-8 py-4 rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-all duration-500 transform hover:scale-105 group\"\n                    data-testid=\"button-load-more\"\n                  >\n                    <Plus className=\"mr-2 h-5 w-5 group-hover:animate-pulse\" />\n                    Load More Products ({products.length - displayCount} remaining)\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Hidden canvas for photo capture */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n    </div>\n  );\n}\n","size_bytes":32589},"client/src/pages/profile.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { User, Package, Settings, LogOut, MapPin, Phone, Mail, Save, X, Heart, ShoppingCart, MessageCircle, Receipt, Camera, ImageIcon, Trash2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport type { Order } from \"@shared/schema\";\nimport ReceiptModal from \"@/components/receipt-modal\";\nimport OrderTrackingModal from \"@/components/order-tracking-modal\";\n\n// Extended order type that includes orderItems relation\ntype OrderWithItems = Order & {\n  orderItems?: Array<{\n    quantity: number;\n    product?: {\n      name: string;\n    };\n  }>;\n};\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showReceipt, setShowReceipt] = useState<boolean>(false);\n  const [showTracking, setShowTracking] = useState<boolean>(false);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [trackingOrder, setTrackingOrder] = useState<any>(null);\n  const [editForm, setEditForm] = useState({\n    name: \"John Doe\",\n    email: \"john.doe@email.com\",\n    phone: \"+91 98765 43210\",\n    address: \"123 Home Street, Mumbai, Maharashtra 400001\",\n    profileImage: \"\"\n  });\n  \n  const [profileImageFile, setProfileImageFile] = useState<File | null>(null);\n  const [profileImagePreview, setProfileImagePreview] = useState<string | null>(null);\n\n  // Auto-scroll to orders section if hash is present\n  useEffect(() => {\n    if (window.location.hash === '#orders') {\n      setTimeout(() => {\n        const ordersSection = document.getElementById('orders-section');\n        if (ordersSection) {\n          ordersSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n          // Show a toast message for successful order completion\n          toast({\n            title: \"Order placed successfully!\",\n            description: \"Your order has been confirmed. You can track it below.\",\n          });\n        }\n      }, 500); // Small delay to ensure component is fully rendered\n    }\n  }, [toast]);\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery<OrderWithItems[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  // Check authentication status using React Query (same as navigation)\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n  \n  // Use real user data from Auth0\n  const currentUser = {\n    name: user ? ((user as any).name || `${(user as any).given_name || ''} ${(user as any).family_name || ''}`.trim() || 'User') : \"User\",\n    email: (user as any)?.email || \"\",\n    phone: (user as any)?.phone || \"\", // Will be populated from profile update\n    address: (user as any)?.address || \"\", // Will be populated from profile update\n    joinDate: \"Recently\",\n    profileImage: (user as any)?.picture\n  };\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: typeof editForm) => {\n      const response = await apiRequest('PUT', '/api/auth/profile', {\n        name: data.name,\n        email: data.email,\n        phone: data.phone,\n        address: data.address\n      });\n      \n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Profile updated successfully!\",\n        description: \"Your profile information has been saved.\",\n      });\n      setIsEditing(false);\n      // Refresh user data queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error updating profile\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditClick = () => {\n    setEditForm({\n      name: currentUser.name,\n      email: currentUser.email,\n      phone: currentUser.phone,\n      address: currentUser.address,\n      profileImage: currentUser.profileImage || \"\"\n    });\n    setProfileImagePreview(currentUser.profileImage || null);\n    setIsEditing(true);\n  };\n\n  const handleSave = () => {\n    if (!editForm.name.trim() || !editForm.email.trim()) {\n      toast({\n        title: \"Please fill in required fields\",\n        description: \"Name and email are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateProfileMutation.mutate(editForm);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setProfileImageFile(null);\n    setProfileImagePreview(null);\n    setEditForm({\n      name: currentUser.name,\n      email: currentUser.email,\n      phone: currentUser.phone,\n      address: currentUser.address,\n      profileImage: currentUser.profileImage || \"\"\n    });\n  };\n\n  const handleInputChange = (field: keyof typeof editForm, value: string) => {\n    setEditForm(prev => ({ ...prev, [field]: value }));\n  };\n  \n  const handleProfileImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Check file size (limit to 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select an image smaller than 5MB.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      // Check file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an image file.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      \n      setProfileImageFile(file);\n      \n      // Create preview URL\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setProfileImagePreview(result);\n        setEditForm(prev => ({\n          ...prev,\n          profileImage: result\n        }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  const removeProfileImage = () => {\n    setProfileImageFile(null);\n    setProfileImagePreview(null);\n    setEditForm(prev => ({\n      ...prev,\n      profileImage: \"\"\n    }));\n  };\n\n  \n  const { logout } = useAuth0();\n  \n  const handleLogout = async () => {\n    try {\n      // Show immediate feedback\n      toast({\n        title: \"Logging out...\",\n        description: \"Please wait while we log you out.\",\n      });\n\n      // First clear all React Query cache immediately\n      queryClient.clear();\n      \n      // Force invalidate specific auth queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.removeQueries({ queryKey: [\"/api/auth/me\"] });\n      \n      // Clear the server session using API\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      // Clear localStorage data\n      localStorage.removeItem('localCart');\n      localStorage.removeItem('localWishlist');\n      \n      // Force reload to ensure all components refresh\n      setTimeout(() => {\n        // Then clear Auth0 session and redirect\n        logout({ \n          logoutParams: {\n            returnTo: window.location.origin\n          }\n        });\n      }, 100);\n      \n    } catch (error) {\n      console.error('Logout error:', error);\n      // If server logout fails, still clear everything\n      queryClient.clear();\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      queryClient.removeQueries({ queryKey: [\"/api/auth/me\"] });\n      localStorage.removeItem('localCart');\n      localStorage.removeItem('localWishlist');\n      \n      logout({ \n        logoutParams: {\n          returnTo: window.location.origin\n        }\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      case \"shipped\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"processing\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"pending\":\n        return \"bg-gray-100 text-gray-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const handleViewReceipt = (order: any) => {\n    setSelectedOrder(order);\n    setShowReceipt(true);\n  };\n\n  const handleTrackOrder = (order: any) => {\n    setTrackingOrder(order);\n    setShowTracking(true);\n  };\n\n  const handleViewDetails = (order: any) => {\n    // Reuse the receipt modal for detailed order view\n    handleViewReceipt(order);\n  };\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">My Profile</h1>\n          <p className=\"text-gray-600\">Manage your account and view your orders</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Profile Information */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Profile Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"w-20 h-20 wood-texture rounded-full mx-auto mb-4 flex items-center justify-center overflow-hidden relative\">\n                    {(isEditing ? profileImagePreview : currentUser.profileImage) ? (\n                      <img \n                        src={isEditing ? profileImagePreview! : currentUser.profileImage} \n                        alt=\"Profile\" \n                        className=\"w-full h-full object-cover\" \n                      />\n                    ) : (\n                      <User className=\"h-8 w-8 text-white\" />\n                    )}\n                    \n                    {/* Profile Picture Upload Options - Only show when editing */}\n                    {isEditing && (\n                      <div className=\"absolute -bottom-2 -right-2 flex space-x-1\">\n                        {/* Gallery Upload */}\n                        <label className=\"cursor-pointer\">\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleProfileImageUpload}\n                            className=\"hidden\"\n                          />\n                          <div className=\"w-8 h-8 bg-blue-600 hover:bg-blue-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\">\n                            <ImageIcon className=\"w-4 h-4\" />\n                          </div>\n                        </label>\n                        \n                        {/* Camera Upload */}\n                        <label className=\"cursor-pointer\">\n                          <input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            capture=\"environment\"\n                            onChange={handleProfileImageUpload}\n                            className=\"hidden\"\n                          />\n                          <div className=\"w-8 h-8 bg-green-600 hover:bg-green-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\">\n                            <Camera className=\"w-4 h-4\" />\n                          </div>\n                        </label>\n                        \n                        {/* Remove Image */}\n                        {(profileImagePreview || currentUser.profileImage) && (\n                          <button\n                            onClick={removeProfileImage}\n                            className=\"w-8 h-8 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center text-white shadow-lg transition-colors\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </button>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Upload Instructions - Only show when editing and no image */}\n                  {isEditing && !profileImagePreview && !currentUser.profileImage && (\n                    <p className=\"text-xs text-gray-500 mb-2\">\n                      Click gallery or camera icon to add profile picture\n                    </p>\n                  )}\n                  <h3 className=\"text-xl font-display font-semibold text-darkBrown\" data-testid=\"profile-name\">\n                    {currentUser.name}\n                  </h3>\n                  <p className=\"text-gray-600\">Customer since {currentUser.joinDate}</p>\n                  {(user as any)?.provider && (\n                    <p className=\"text-sm text-gray-500\">Signed in with {(user as any).provider.charAt(0).toUpperCase() + (user as any).provider.slice(1)}</p>\n                  )}\n                </div>\n                \n                {isEditing ? (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Name *</label>\n                      <Input\n                        value={editForm.name}\n                        onChange={(e) => handleInputChange('name', e.target.value)}\n                        placeholder=\"Enter your name\"\n                        className=\"w-full\"\n                        data-testid=\"input-edit-name\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email *</label>\n                      <div className=\"flex items-center space-x-3\">\n                        <Mail className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                        <Input\n                          type=\"email\"\n                          value={editForm.email}\n                          onChange={(e) => handleInputChange('email', e.target.value)}\n                          placeholder=\"Enter your email\"\n                          className=\"flex-1\"\n                          data-testid=\"input-edit-email\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone</label>\n                      <div className=\"flex items-center space-x-3\">\n                        <Phone className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\n                        <Input\n                          type=\"tel\"\n                          value={editForm.phone}\n                          onChange={(e) => handleInputChange('phone', e.target.value)}\n                          placeholder=\"Enter your phone number\"\n                          className=\"flex-1\"\n                          data-testid=\"input-edit-phone\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Address</label>\n                      <div className=\"flex items-start space-x-3\">\n                        <MapPin className=\"h-4 w-4 text-gray-400 flex-shrink-0 mt-3\" />\n                        <Textarea\n                          value={editForm.address}\n                          onChange={(e) => handleInputChange('address', e.target.value)}\n                          placeholder=\"Enter your address\"\n                          rows={3}\n                          className=\"flex-1 resize-none\"\n                          data-testid=\"textarea-edit-address\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Mail className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-gray-600\" data-testid=\"profile-email\">{currentUser.email || \"No email provided\"}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-gray-600\" data-testid=\"profile-phone\">{currentUser.phone || \"No phone number provided\"}</span>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <MapPin className=\"h-4 w-4 text-gray-400 mt-1\" />\n                      <span className=\"text-gray-600\" data-testid=\"profile-address\">{currentUser.address || \"No address provided\"}</span>\n                    </div>\n                  </div>\n                )}\n                \n                {isEditing ? (\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      onClick={handleSave}\n                      disabled={updateProfileMutation.isPending}\n                      className=\"flex-1 bg-primary hover:bg-primary/90 text-white\"\n                      data-testid=\"button-save-profile\"\n                    >\n                      {updateProfileMutation.isPending ? (\n                        <>\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                          Saving...\n                        </>\n                      ) : (\n                        <>\n                          <Save className=\"mr-2 h-4 w-4\" />\n                          Save Changes\n                        </>\n                      )}\n                    </Button>\n                    <Button \n                      onClick={handleCancel}\n                      variant=\"outline\"\n                      disabled={updateProfileMutation.isPending}\n                      className=\"border-gray-300 text-gray-600 hover:bg-gray-50\"\n                      data-testid=\"button-cancel-edit\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ) : (\n                  <Button \n                    onClick={handleEditClick}\n                    variant=\"outline\" \n                    className=\"w-full border-primary text-primary hover:bg-primary hover:text-white transition-colors\"\n                    data-testid=\"button-edit-profile\"\n                  >\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    Edit Profile\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link href=\"/wishlist\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-darkBrown hover:bg-primary hover:text-white transition-all duration-200\"\n                    data-testid=\"button-view-wishlist\"\n                  >\n                    <Heart className=\"mr-2 h-4 w-4\" />\n                    View Wishlist\n                  </Button>\n                </Link>\n                <Link href=\"/cart\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-darkBrown hover:bg-primary hover:text-white transition-all duration-200\"\n                    data-testid=\"button-view-cart\"\n                  >\n                    <ShoppingCart className=\"mr-2 h-4 w-4\" />\n                    View Cart\n                  </Button>\n                </Link>\n                <Button \n                  onClick={() => {\n                    const ordersSection = document.getElementById('orders-section');\n                    if (ordersSection) {\n                      ordersSection.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                    }\n                  }}\n                  variant=\"ghost\" \n                  className=\"w-full justify-start text-darkBrown hover:bg-primary hover:text-white transition-all duration-200\"\n                  data-testid=\"button-view-order-history\"\n                >\n                  <Package className=\"mr-2 h-4 w-4\" />\n                  View Order History\n                </Button>\n                <Link href=\"/contact\">\n                  <Button \n                    variant=\"ghost\" \n                    className=\"w-full justify-start text-darkBrown hover:bg-primary hover:text-white transition-all duration-200\"\n                    data-testid=\"button-contact-support\"\n                  >\n                    <MessageCircle className=\"mr-2 h-4 w-4\" />\n                    Contact Support\n                  </Button>\n                </Link>\n                <Button \n                  onClick={handleLogout}\n                  variant=\"ghost\" \n                  className=\"w-full justify-start text-red-600 hover:bg-red-600 hover:text-white transition-all duration-200\"\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Logout\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order History */}\n          <div className=\"lg:col-span-2\" id=\"orders-section\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Package className=\"h-5 w-5\" />\n                  <span>Order History</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {ordersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"bg-gray-100 rounded-lg p-4 animate-pulse\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-32\" />\n                          <div className=\"h-6 bg-gray-200 rounded w-20\" />\n                        </div>\n                        <div className=\"h-4 bg-gray-200 rounded w-48 mb-2\" />\n                        <div className=\"h-3 bg-gray-200 rounded w-24\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : orders.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"text-gray-400 mb-4\">\n                      <Package className=\"w-16 h-16 mx-auto\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">No orders yet</h3>\n                    <p className=\"text-gray-500 mb-6\">Start shopping to see your orders here!</p>\n                    <Link href=\"/products\">\n                      <Button className=\"wood-texture text-white\" data-testid=\"button-start-shopping\">\n                        Start Shopping\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" data-testid=\"orders-list\">\n                    {orders.map((order) => (\n                      <div key={order.id} className=\"bg-beige rounded-lg p-6 hover-lift transition-all\">\n                        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-start gap-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-2\">\n                              <h4 className=\"font-semibold text-darkBrown\" data-testid={`order-id-${order.id}`}>\n                                Order #{order.id.slice(-8).toUpperCase()}\n                              </h4>\n                              <Badge className={getStatusColor(order.status || 'pending')} data-testid={`order-status-${order.id}`}>\n                                {(order.status || 'pending').charAt(0).toUpperCase() + (order.status || 'pending').slice(1)}\n                              </Badge>\n                            </div>\n                            \n                            <p className=\"text-gray-600 mb-2\" data-testid={`order-items-${order.id}`}>\n                              {order.orderItems?.length || 0} items - ₹{order.total}\n                            </p>\n                            \n                            <p className=\"text-sm text-gray-500\" data-testid={`order-date-${order.id}`}>\n                              Placed on {order.createdAt ? new Date(order.createdAt).toLocaleDateString('en-IN', {\n                                day: 'numeric',\n                                month: 'long',\n                                year: 'numeric'\n                              }) : 'Unknown date'}\n                            </p>\n\n                            {order.orderItems && order.orderItems.length > 0 && (\n                              <div className=\"mt-3\">\n                                <div className=\"flex flex-wrap gap-2\">\n                                  {order.orderItems.slice(0, 3).map((item: any, index: number) => (\n                                    <div key={index} className=\"flex items-center space-x-2 bg-white rounded-lg px-3 py-1\">\n                                      <span className=\"text-sm text-gray-600\">\n                                        {item.product?.name || \"Product\"} x{item.quantity}\n                                      </span>\n                                    </div>\n                                  ))}\n                                  {order.orderItems.length > 3 && (\n                                    <div className=\"bg-white rounded-lg px-3 py-1\">\n                                      <span className=\"text-sm text-gray-600\">\n                                        +{order.orderItems.length - 3} more\n                                      </span>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex flex-col sm:flex-row gap-2\">\n                            <Button \n                              onClick={() => handleViewReceipt(order)}\n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"border-primary text-primary hover:bg-primary hover:text-white transition-all duration-200\"\n                              data-testid={`button-view-receipt-${order.id}`}\n                            >\n                              <Receipt className=\"w-4 h-4 mr-1\" />\n                              Receipt\n                            </Button>\n                            <Button \n                              onClick={() => handleTrackOrder(order)}\n                              variant=\"outline\" \n                              size=\"sm\"\n                              className=\"border-primary text-primary hover:bg-primary hover:text-white transition-all duration-200\"\n                              data-testid={`button-track-order-${order.id}`}\n                            >\n                              Track Order\n                            </Button>\n                            <Button \n                              onClick={() => handleViewDetails(order)}\n                              variant=\"ghost\" \n                              size=\"sm\"\n                              className=\"text-darkBrown hover:bg-primary hover:text-white transition-all duration-200\"\n                              data-testid={`button-view-details-${order.id}`}\n                            >\n                              View Details\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Receipt Modal */}\n      <ReceiptModal \n        isOpen={showReceipt}\n        onClose={() => setShowReceipt(false)}\n        orderData={selectedOrder}\n      />\n\n      {/* Order Tracking Modal */}\n      <OrderTrackingModal \n        isOpen={showTracking}\n        onClose={() => setShowTracking(false)}\n        orderData={trackingOrder}\n      />\n    </div>\n  );\n}\n","size_bytes":29213},"client/src/pages/wishlist.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Heart, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function Wishlist() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: wishlistItems = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/wishlist\"],\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"DELETE\", `/api/wishlist/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Removed from wishlist\",\n        description: \"Item has been removed from your wishlist.\",\n      });\n    },\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"POST\", \"/api/cart\", { \n        productId,\n        quantity: 1\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to cart\",\n        description: \"Item has been moved to your cart.\",\n      });\n    },\n  });\n\n  const handleBuyNow = (productId: string) => {\n    addToCartMutation.mutate(productId);\n    setTimeout(() => {\n      window.location.href = \"/cart\";\n    }, 1000);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"bg-white rounded-2xl p-6\">\n                  <div className=\"w-full h-48 bg-gray-200 rounded-lg mb-4\" />\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\" />\n                  <div className=\"h-4 bg-gray-200 rounded mb-4\" />\n                  <div className=\"h-10 bg-gray-200 rounded\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">My Wishlist</h1>\n          <p className=\"text-gray-600\">Save your favorite furniture pieces for later</p>\n        </div>\n\n        {wishlistItems.length === 0 ? (\n          <Card className=\"text-center py-16\">\n            <CardContent>\n              <div className=\"text-gray-400 mb-6\">\n                <Heart className=\"w-24 h-24 mx-auto\" />\n              </div>\n              <h3 className=\"text-2xl font-display font-semibold text-darkBrown mb-4\">Your wishlist is empty</h3>\n              <p className=\"text-gray-600 mb-8\">Start browsing and save items you love to buy them later.</p>\n              <Link href=\"/products\">\n                <Button className=\"wood-texture text-white px-8 py-3\" data-testid=\"button-browse-products\">\n                  Browse Products\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            <div className=\"flex justify-between items-center mb-6\">\n              <p className=\"text-gray-600\">\n                <span className=\"font-semibold text-darkBrown\" data-testid=\"wishlist-count\">\n                  {wishlistItems.length}\n                </span> items in your wishlist\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" data-testid=\"wishlist-items-grid\">\n              {wishlistItems.map((item: any) => (\n                <Card key={item.id} className=\"overflow-hidden hover-lift group\">\n                  <div className=\"relative\">\n                    <div className=\"aspect-w-16 aspect-h-12 overflow-hidden\">\n                      <img \n                        src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"} \n                        alt={item.product?.name}\n                        className=\"w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300\"\n                      />\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFromWishlistMutation.mutate(item.productId)}\n                      disabled={removeFromWishlistMutation.isPending}\n                      className=\"absolute top-2 right-2 text-red-500 hover:text-red-600 bg-white/80 backdrop-blur-sm\"\n                      data-testid={`button-remove-wishlist-${item.id}`}\n                    >\n                      <Heart className=\"h-4 w-4 fill-current\" />\n                    </Button>\n                  </div>\n                  \n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-display font-semibold text-darkBrown mb-2\" data-testid={`wishlist-item-name-${item.id}`}>\n                      {item.product?.name}\n                    </h3>\n                    <p className=\"text-gray-600 mb-4 line-clamp-2\">\n                      {item.product?.description}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between mb-4\">\n                      <span className=\"text-xl font-bold text-primary\" data-testid={`wishlist-item-price-${item.id}`}>\n                        ₹{item.product?.price}\n                      </span>\n                      {item.product?.originalPrice && item.product.originalPrice !== item.product.price && (\n                        <span className=\"text-sm text-gray-500 line-through\">\n                          ₹{item.product.originalPrice}\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        onClick={() => addToCartMutation.mutate(item.productId)}\n                        disabled={addToCartMutation.isPending}\n                        className=\"flex-1 bg-primary text-white hover:bg-opacity-90 transition-opacity\"\n                        data-testid={`button-add-to-cart-wishlist-${item.id}`}\n                      >\n                        <ShoppingCart className=\"mr-2 h-4 w-4\" />\n                        {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n                      </Button>\n                      <Button\n                        onClick={() => handleBuyNow(item.productId)}\n                        disabled={addToCartMutation.isPending}\n                        className=\"flex-1 wood-texture text-white hover:opacity-90 transition-opacity\"\n                        data-testid={`button-buy-now-wishlist-${item.id}`}\n                      >\n                        Buy Now\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Quick Actions */}\n            <Card className=\"mt-12 bg-beige\">\n              <CardContent className=\"p-8 text-center\">\n                <h3 className=\"text-xl font-display font-semibold text-darkBrown mb-4\">Love everything in your wishlist?</h3>\n                <p className=\"text-gray-600 mb-6\">Add all items to your cart for a convenient checkout experience.</p>\n                <Button\n                  onClick={() => {\n                    wishlistItems.forEach((item: any) => {\n                      addToCartMutation.mutate(item.productId);\n                    });\n                  }}\n                  disabled={addToCartMutation.isPending}\n                  className=\"wood-texture text-white px-8 py-3\"\n                  data-testid=\"button-add-all-to-cart\"\n                >\n                  <ShoppingCart className=\"mr-2 h-5 w-5\" />\n                  Add All to Cart\n                </Button>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8540},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Fix missing asset imports and path issues\n[x] 3. Set up PostgreSQL database and schema\n[x] 4. Restart the workflow to see if the project is working\n[x] 5. Verify the project is working using the feedback tool\n[x] 6. Fixed wishlist functionality for unauthenticated users (localStorage fallback)\n[x] 7. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 8. Configured real Auth0 authentication with user credentials\n[x] 9. Fixed server-side Auth0 conflicts and errors\n[x] 10. Set up proper environment variables for client-side Auth0\n[x] 11. Removed demo authentication completely - using only real Auth0\n[x] 12. Forced Auth0Provider to always be used in the application\n[x] 13. Updated login page to always show real authentication notice\n[x] 14. Completely removed all demo authentication code from server and client\n[x] 15. Updated documentation to reflect Auth0-only authentication\n[x] 16. Cleaned up all demo authentication references and comments\n[x] 17. Identified Auth0 callback URL configuration issue\n[x] 18. Provided exact URLs for Auth0 application settings configuration\n[x] 19. Fixed Google OAuth connection error by using Auth0 Universal Login\n[x] 20. All login buttons now work with Auth0's secure authentication\n[x] 21. Restored Google-specific authentication for Google button\n[x] 22. Google button now opens Google authentication form directly\n[x] 23. Fixed schema validation errors (total field string conversion)\n[x] 24. Replaced hardcoded Razorpay key with dynamic environment variable\n[x] 25. Added client-side Razorpay key (VITE_RAZORPAY_KEY_ID)\n[x] 26. Ready for server-side Razorpay credentials to complete integration\n[x] 27. Fixed hardcoded Razorpay key with environment variable access\n[x] 28. Corrected all API endpoint mismatches between frontend and backend\n[x] 29. Added comprehensive error handling and debugging for payment flow\n[x] 30. Confirmed all environment variables are properly set and accessible\n[x] 31. Real-time Razorpay payment integration fully operational\n[x] 32. Fixed UPI payment errors and integrated real Razorpay credentials  \n[x] 33. Updated payment interface to match professional Razorpay UI design\n[x] 34. Added comprehensive UPI options: PhonePe, Google Pay, Paytm, BHIM UPI\n[x] 35. Integrated UPI QR code functionality for seamless payments\n[x] 36. Added secure card, net banking, and wallet payment options\n[x] 37. Complete payment flow now working with live Razorpay integration\n[x] 38. Fixed logout functionality in profile page to properly clear session\n[x] 39. Verified Razorpay integration working with live credentials \n[x] 40. Confirmed payment success pages include \"View Order History\" buttons\n[x] 41. Orders display properly after payment completion in profile section\n[x] 42. Payment flow from purchase to order display working end-to-end\n[x] 43. Migration from Replit Agent to Replit environment completed successfully\n[x] 44. All packages installed and dependencies resolved\n[x] 45. Database schema pushed and tables created\n[x] 46. Application running without errors with full functionality\n[x] 43. MIGRATION COMPLETED: Project successfully migrated from Replit Agent to Replit environment\n[x] 44. All dependencies installed and application running without errors\n[x] 45. Database schema pushed and seeded successfully\n[x] 46. Complete import migration marked as finished\n[x] 47. Fixed duplicate categories issue in database and frontend dropdown\n[x] 48. Added unique constraint to prevent future category duplicates\n[x] 49. Updated seeding logic to check categories instead of products\n[x] 50. Categories dropdown now displays only unique entries without duplicates\n[x] 51. Fixed product sorting and filtering functionality \n[x] 52. Fixed image search display issue - similar products now show correctly\n[x] 53. FINAL MIGRATION STEP: All functionality working properly in Replit environment\n[x] 54. Successfully removed 4th slide from hero section slideshow as requested\n[x] 55. FINAL MIGRATION COMPLETION: Dependencies reinstalled and database recreated successfully\n[x] 56. Database schema pushed and seeded with all categories and products\n[x] 57. Application running without errors on port 5000 in Replit environment\n[x] 58. Dependencies reinstalled and tsx build tool configured\n[x] 59. PostgreSQL database recreated and schema pushed successfully  \n[x] 60. Database seeded with 6 categories and 19 products\n[x] 61. FINAL MIGRATION COMPLETE: Project successfully migrated to Replit with all functionality working\n[x] 62. Dependencies reinstalled and tsx build tool working\n[x] 63. Database schema pushed and tables created successfully  \n[x] 64. Database seeded with 6 categories and 19 products\n[x] 65. Application running without errors on port 5000\n[x] 66. MIGRATION COMPLETION VERIFIED: All systems operational in Replit environment\n[x] 67. FINAL MIGRATION: TSX dependency installed and build tools working\n[x] 68. PostgreSQL database created and configured successfully\n[x] 69. Database schema pushed and 6 categories + 19 products seeded\n[x] 70. Application successfully running on port 5000 without errors\n[x] 71. MIGRATION COMPLETED: Project fully migrated from Replit Agent to Replit environment\n[x] 72. Dependencies installed and TSX build tool working properly\n[x] 73. PostgreSQL database created and configured successfully\n[x] 74. Database schema pushed and 6 categories + 19 products seeded\n[x] 75. Application successfully running on port 5000 without errors\n[x] 76. FINAL MIGRATION VERIFICATION: All systems operational in Replit environment\n[x] 77. Added optional image upload functionality to product reviews\n[x] 78. Created server-side endpoint for handling review image uploads  \n[x] 79. Updated database schema to include images array field in productReviews table\n[x] 80. Added client-side image upload form with preview and validation\n[x] 81. Images stored in public/uploads/reviews with JSON metadata backup\n[x] 82. Review display updated to show uploaded images with click-to-expand\n[x] 83. Complete image upload feature implemented and operational\n[x] 84. Fixed cart synchronization issue after user authentication\n[x] 85. Modified server auth sync endpoint to accept and migrate localStorage cart items\n[x] 86. Updated client-side auth sync hook to send localStorage cart items during authentication\n[x] 87. Clear localStorage cart after successful sync and refresh cart data\n[x] 88. Cart items now persist correctly when user logs in after adding items while unauthenticated\n[x] 89. Added confirmation dialogs for all authentication methods (Google, Facebook, Email)\n[x] 90. Users can now cancel authentication process before being redirected to external providers\n[x] 91. AUTHENTICATION AND CART SYNC IMPROVEMENTS COMPLETED SUCCESSFULLY","size_bytes":6875},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl?: string;\n  provider?: string;\n}\n\ninterface AuthContextType {\n  isAuthenticated: boolean;\n  user: User | null;\n  login: (user: User) => void;\n  logout: () => void;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check authentication status on app load\n  useEffect(() => {\n    const initAuth = async () => {\n      await checkAuthStatus();\n      setLoading(false);\n    };\n    \n    initAuth();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('/api/auth/me', {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        setIsAuthenticated(true);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      return false;\n    }\n  };\n\n  const login = (userData: User) => {\n    setUser(userData);\n    setIsAuthenticated(true);\n  };\n\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n    \n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, user, login, logout, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":2058},"shared/schema_backup.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { \n  pgTable, \n  varchar, \n  text, \n  integer, \n  decimal, \n  timestamp, \n  boolean,\n  jsonb,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  imageUrl: varchar(\"image_url\"),\n  images: text(\"images\").array(),\n  inStock: boolean(\"in_stock\").default(true),\n  stock: integer(\"stock\").default(0),\n  featured: boolean(\"featured\").default(false),\n  isDeal: boolean(\"is_deal\").default(false),\n  dealPrice: decimal(\"deal_price\", { precision: 10, scale: 2 }),\n  dealExpiry: timestamp(\"deal_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cart items table\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Wishlist items table\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, processing, shipped, delivered, cancelled\n  paymentId: varchar(\"payment_id\"),\n  paymentStatus: varchar(\"payment_status\").default(\"pending\"),\n  paymentMethod: varchar(\"payment_method\"), // upi, card, netbanking, wallet, qr, cod\n  razorpayOrderId: varchar(\"razorpay_order_id\"),\n  razorpayPaymentId: varchar(\"razorpay_payment_id\"),\n  razorpaySignature: varchar(\"razorpay_signature\"),\n  customerName: varchar(\"customer_name\").notNull(),\n  customerPhone: varchar(\"customer_phone\").notNull(),\n  customerEmail: varchar(\"customer_email\"),\n  shippingAddress: text(\"shipping_address\").notNull(),\n  pincode: varchar(\"pincode\").notNull(),\n  trackingId: varchar(\"tracking_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contact inquiries table\nexport const contactInquiries = pgTable(\"contact_inquiries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\"),\n  inquiryType: varchar(\"inquiry_type\").notNull(),\n  message: text(\"message\").notNull(),\n  status: varchar(\"status\").default(\"new\"), // new, contacted, resolved\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  cartItems: many(cartItems),\n  wishlistItems: many(wishlistItems),\n  orders: many(orders),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  cartItems: many(cartItems),\n  wishlistItems: many(wishlistItems),\n  orderItems: many(orderItems),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const wishlistItemsRelations = relations(wishlistItems, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlistItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlistItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  orderItems: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactInquirySchema = createInsertSchema(contactInquiries).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type ContactInquiry = typeof contactInquiries.$inferSelect;\nexport type InsertContactInquiry = z.infer<typeof insertContactInquirySchema>;\n","size_bytes":8400},"client/src/pages/address.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ShoppingBag, User, Phone, Mail, MapPin, Hash, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport CustomerDetailsModal from \"@/components/customer-details-modal\";\n\nexport default function AddressPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated, user } = useAuth0();\n  \n  const [isBuyNow, setIsBuyNow] = useState(false);\n  const [isCartCheckout, setIsCartCheckout] = useState(false);\n  const [buyNowItem, setBuyNowItem] = useState<any>(null);\n  const [checkoutItems, setCheckoutItems] = useState<any[]>([]);\n  \n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    customerPhone: \"\",\n    customerEmail: \"\",\n    shippingAddress: \"\",\n    pincode: \"\"\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated) {\n      // Store current page as return URL\n      sessionStorage.setItem('returnUrl', location);\n      navigate('/login');\n      return;\n    }\n  }, [isAuthenticated, location, navigate]);\n\n  // Pre-fill form with user data when authenticated\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      setFormData(prev => ({\n        ...prev,\n        customerName: user.name || user.given_name + ' ' + (user.family_name || '') || '',\n        customerEmail: user.email || ''\n      }));\n    }\n  }, [isAuthenticated, user]);\n\n  // Check if this is a direct buy now flow or cart checkout\n  useEffect(() => {\n    const checkoutType = localStorage.getItem('checkoutType');\n    const buyNowStored = localStorage.getItem('buyNowItem');\n    const cartStored = localStorage.getItem('checkoutItems');\n    \n    if (checkoutType === 'direct' && buyNowStored) {\n      setIsBuyNow(true);\n      setBuyNowItem(JSON.parse(buyNowStored));\n    } else if (checkoutType === 'cart' && cartStored) {\n      setIsCartCheckout(true);\n      setCheckoutItems(JSON.parse(cartStored));\n    }\n  }, []);\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: !isBuyNow && !isCartCheckout // Only fetch cart if not in buy now or cart checkout mode\n  });\n\n  // Calculate totals based on buy now, cart checkout, or regular cart\n  const items = isBuyNow ? [buyNowItem] : \n                isCartCheckout ? checkoutItems : \n                (cartItems as any[]);\n  \n  const total = isBuyNow && buyNowItem ? \n    buyNowItem.total : \n    isCartCheckout ? \n      checkoutItems.reduce((sum: number, item: any) => sum + item.total, 0) :\n      (cartItems as any[]).reduce((sum: number, item: any) => \n        sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n      );\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.customerName || !formData.customerPhone || !formData.shippingAddress || !formData.pincode) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (formData.customerPhone.length < 10) {\n      toast({\n        title: \"Invalid Phone\",\n        description: \"Please enter a valid 10-digit phone number.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (formData.pincode.length !== 6) {\n      toast({\n        title: \"Invalid Pincode\",\n        description: \"Please enter a valid 6-digit pincode.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Store address data and checkout type in localStorage\n    localStorage.setItem('checkoutAddress', JSON.stringify(formData));\n    localStorage.setItem('checkoutType', isBuyNow ? 'direct' : 'cart');\n    navigate('/payment');\n  };\n\n  const handleGoBack = () => {\n    const checkoutType = localStorage.getItem('checkoutType');\n    if (checkoutType === 'cart' || isCartCheckout) {\n      navigate('/cart');\n    } else {\n      navigate('/products');\n    }\n  };\n\n  if ((!isBuyNow && !isCartCheckout && isLoading) || \n      (!isBuyNow && !isCartCheckout && (cartItems as any[]).length === 0) || \n      (isBuyNow && !buyNowItem) || \n      (isCartCheckout && checkoutItems.length === 0)) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <ShoppingBag className=\"w-24 h-24 mx-auto text-gray-400 mb-6\" />\n            <h2 className=\"text-2xl font-display font-semibold text-darkBrown mb-4\">\n              {isLoading ? \"Loading...\" : \"No items found\"}\n            </h2>\n            <p className=\"text-gray-600 mb-8\">\n              {isLoading ? \"Please wait while we load your items.\" : \"Please add items to continue with checkout.\"}\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-10 sm:py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-6xl mx-auto px-2 sm:px-4 lg:px-8\">\n        {/* Back Button */}\n        <div className=\"mb-4 sm:mb-6\">\n          <Button\n            onClick={handleGoBack}\n            variant=\"ghost\"\n            className=\"flex items-center text-gray-600 hover:text-darkBrown\"\n            data-testid=\"button-go-back\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            {isCartCheckout || localStorage.getItem('checkoutType') === 'cart' ? 'Back to Cart' : 'Back to Products'}\n          </Button>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"mb-4 sm:mb-8\">\n          <div className=\"flex items-center justify-center space-x-2 sm:space-x-4 mb-4 sm:mb-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-primary text-white rounded-full flex items-center justify-center text-xs sm:text-sm font-medium\">\n                1\n              </div>\n              <span className=\"ml-1 sm:ml-2 text-xs sm:text-sm font-medium text-primary\">Address</span>\n            </div>\n            <div className=\"w-6 sm:w-12 h-px bg-gray-300\"></div>\n            <div className=\"flex items-center\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gray-300 text-gray-500 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium\">\n                2\n              </div>\n              <span className=\"ml-1 sm:ml-2 text-xs sm:text-sm text-gray-500\">Payment</span>\n            </div>\n            <div className=\"w-6 sm:w-12 h-px bg-gray-300\"></div>\n            <div className=\"flex items-center\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-gray-300 text-gray-500 rounded-full flex items-center justify-center text-xs sm:text-sm font-medium\">\n                3\n              </div>\n              <span className=\"ml-1 sm:ml-2 text-xs sm:text-sm text-gray-500\">Success</span>\n            </div>\n          </div>\n          \n          <h1 className=\"text-2xl sm:text-4xl font-display font-bold text-darkBrown text-center mb-2 sm:mb-4\">\n            Shipping Address\n          </h1>\n          <p className=\"text-center text-gray-600 text-sm sm:text-base\">\n            Enter your details for delivery\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-8\">\n          {/* Address Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-darkBrown\">\n                  <MapPin className=\"mr-2 h-5 w-5\" />\n                  Delivery Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"max-h-[80vh] overflow-y-auto\">\n                <form onSubmit={handleSubmit} className=\"space-y-4 sm:space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4\">\n                    <div>\n                      <Label htmlFor=\"customerName\" className=\"flex items-center text-darkBrown\">\n                        <User className=\"mr-1 h-4 w-4\" />\n                        Full Name *\n                      </Label>\n                      <Input\n                        id=\"customerName\"\n                        name=\"customerName\"\n                        value={formData.customerName}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter your full name\"\n                        required\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"customerPhone\" className=\"flex items-center text-darkBrown\">\n                        <Phone className=\"mr-1 h-4 w-4\" />\n                        Phone Number *\n                      </Label>\n                      <Input\n                        id=\"customerPhone\"\n                        name=\"customerPhone\"\n                        value={formData.customerPhone}\n                        onChange={handleInputChange}\n                        placeholder=\"Enter 10-digit phone number\"\n                        type=\"tel\"\n                        maxLength={10}\n                        required\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"customerEmail\" className=\"flex items-center text-darkBrown\">\n                      <Mail className=\"mr-1 h-4 w-4\" />\n                      Email Address (Optional)\n                    </Label>\n                    <Input\n                      id=\"customerEmail\"\n                      name=\"customerEmail\"\n                      value={formData.customerEmail}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter your email address\"\n                      type=\"email\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"shippingAddress\" className=\"flex items-center text-darkBrown\">\n                      <MapPin className=\"mr-1 h-4 w-4\" />\n                      Complete Address *\n                    </Label>\n                    <Textarea\n                      id=\"shippingAddress\"\n                      name=\"shippingAddress\"\n                      value={formData.shippingAddress}\n                      onChange={handleInputChange}\n                      placeholder=\"House/Flat No., Street, Area, City, State\"\n                      rows={3}\n                      required\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"pincode\" className=\"flex items-center text-darkBrown\">\n                      <Hash className=\"mr-1 h-4 w-4\" />\n                      Pincode *\n                    </Label>\n                    <Input\n                      id=\"pincode\"\n                      name=\"pincode\"\n                      value={formData.pincode}\n                      onChange={handleInputChange}\n                      placeholder=\"Enter 6-digit pincode\"\n                      maxLength={6}\n                      required\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    className=\"w-full wood-texture text-white py-3 font-semibold text-lg\"\n                  >\n                    Continue to Payment\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardHeader>\n                <CardTitle className=\"text-darkBrown\">Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                  {items.map((item: any, index: number) => (\n                    <div key={item.id || index} className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gray-100 rounded-lg overflow-hidden\">\n                        <img \n                          src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"} \n                          alt={item.product?.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-darkBrown truncate\">\n                          {item.product?.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          Qty: {item.quantity} × ₹{isBuyNow ? item.price : item.product?.price}\n                        </p>\n                      </div>\n                      <p className=\"text-sm font-semibold text-primary\">\n                        ₹{isBuyNow ? item.total.toFixed(2) : (parseFloat(item.product?.price || \"0\") * item.quantity).toFixed(2)}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"border-t pt-4 space-y-2\">\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Subtotal</span>\n                    <span>₹{total.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Shipping</span>\n                    <span>{shipping === 0 ? \"Free\" : `₹${shipping}`}</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-semibold text-darkBrown border-t pt-2\">\n                    <span>Total</span>\n                    <span>₹{finalTotal.toFixed(2)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14990},"client/src/pages/payment-card.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, CreditCard, CheckCircle, Loader2, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function CardPaymentPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [isProcessing, setIsProcessing] = useState(false);\n  const [addressData, setAddressData] = useState<any>(null);\n  const [razorpayKey, setRazorpayKey] = useState<string>(\"\");\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const total = (cartItems as any[]).reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n  );\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  useEffect(() => {\n    const stored = localStorage.getItem('checkoutAddress');\n    if (stored) {\n      setAddressData(JSON.parse(stored));\n    } else {\n      navigate('/address');\n    }\n\n    // Fetch Razorpay configuration\n    fetch('/api/payment/config')\n      .then(res => res.json())\n      .then(config => {\n        if (config.key) {\n          setRazorpayKey(config.key);\n        }\n      })\n      .catch(console.error);\n  }, [navigate]);\n\n  const processCardPayment = async () => {\n    setIsProcessing(true);\n\n    try {\n      // Create Razorpay order\n      const orderResponse = await fetch('/api/create-razorpay-order', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          amount: finalTotal,\n          currency: 'INR',\n          receipt: `card_${Date.now()}`,\n        }),\n      });\n\n      const razorpayOrder = await orderResponse.json();\n\n      if (!orderResponse.ok) {\n        throw new Error(razorpayOrder.message || 'Failed to create payment order');\n      }\n\n      const options = {\n        key: razorpayKey,\n        amount: razorpayOrder.amount,\n        currency: razorpayOrder.currency,\n        name: 'IndoSaga Furniture',\n        description: 'Purchase of premium teak furniture',\n        order_id: razorpayOrder.id,\n        method: {\n          card: true,\n          netbanking: false,\n          wallet: false,\n          upi: false,\n        },\n        handler: async (response: any) => {\n          try {\n            // Verify payment\n            const verifyResponse = await fetch('/api/verify-razorpay-payment', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(response),\n            });\n\n            const verificationResult = await verifyResponse.json();\n            \n            if (!verificationResult.success) {\n              throw new Error('Payment verification failed');\n            }\n\n            // Create final order\n            const orderData = {\n              customerName: addressData.customerName || 'Customer',\n              customerPhone: addressData.customerPhone || '0000000000',\n              customerEmail: addressData.customerEmail || '',\n              shippingAddress: addressData.shippingAddress || '',\n              pincode: addressData.pincode || '000000',\n              paymentMethod: 'card',\n              razorpayOrderId: response.razorpay_order_id,\n              razorpayPaymentId: response.razorpay_payment_id,\n              razorpaySignature: response.razorpay_signature,\n              orderItems: (cartItems as any[]).map((item: any) => ({\n                productId: item.productId,\n                quantity: item.quantity,\n                price: item.product?.price || \"0\",\n              })),\n              total: finalTotal,\n            };\n\n            const finalOrderResponse = await fetch('/api/orders/direct-checkout', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(orderData),\n            });\n\n            const order = await finalOrderResponse.json();\n            navigate(`/payment/success?orderId=${order.id}`);\n          } catch (error) {\n            console.error('Payment processing error:', error);\n            toast({\n              title: \"Payment Processing Failed\",\n              description: \"There was an error processing your payment. Please try again.\",\n              variant: \"destructive\",\n            });\n          } finally {\n            setIsProcessing(false);\n          }\n        },\n        prefill: {\n          name: addressData?.customerName || 'Customer',\n          email: addressData?.customerEmail || '',\n          contact: addressData?.customerPhone || '0000000000',\n        },\n        notes: {\n          address: addressData?.shippingAddress || '',\n          payment_method: 'card',\n        },\n        theme: {\n          color: '#8B4513',\n        },\n        modal: {\n          ondismiss: () => {\n            setIsProcessing(false);\n          },\n        },\n      };\n\n      const rzp = new (window as any).Razorpay(options);\n      rzp.open();\n    } catch (error) {\n      console.error('Card payment error:', error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to process card payment. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  if (isLoading || !addressData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8 mx-auto\" />\n            <div className=\"bg-gray-200 rounded-lg h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/payment')}\n            className=\"mb-6 p-0 text-gray-600 hover:text-gray-800\"\n            data-testid=\"button-back-payment\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Payment Options\n          </Button>\n          \n          <div className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-6\">\n              <CreditCard className=\"w-8 h-8 text-green-600\" />\n            </div>\n            \n            <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">\n              Card Payment\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Pay securely using your Credit/Debit card\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Payment Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-green-600 to-green-700 text-white\">\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"w-5 h-5 mr-2\" />\n                  Secure Card Payment\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  {/* Security Features */}\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <div className=\"flex items-center mb-2\">\n                      <Shield className=\"w-5 h-5 text-blue-600 mr-2\" />\n                      <span className=\"font-medium text-blue-900\">Secure Payment</span>\n                    </div>\n                    <ul className=\"text-sm text-blue-800 space-y-1\">\n                      <li>• 256-bit SSL encryption</li>\n                      <li>• PCI DSS compliant</li>\n                      <li>• Card details never stored</li>\n                      <li>• 3D Secure authentication</li>\n                    </ul>\n                  </div>\n\n                  {/* Supported Cards */}\n                  <div>\n                    <h3 className=\"font-medium text-gray-900 mb-3\">Accepted Cards</h3>\n                    <div className=\"grid grid-cols-4 gap-4\">\n                      {[\n                        { name: 'Visa', color: 'bg-blue-600' },\n                        { name: 'Mastercard', color: 'bg-red-600' },\n                        { name: 'RuPay', color: 'bg-green-600' },\n                        { name: 'Amex', color: 'bg-blue-800' }\n                      ].map((card) => (\n                        <div key={card.name} className=\"text-center p-3 border rounded-lg\">\n                          <div className={`w-8 h-5 ${card.color} rounded mx-auto mb-2`}></div>\n                          <p className=\"text-sm font-medium\">{card.name}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"p-4 border-2 border-dashed border-gray-300 rounded-lg text-center\">\n                      <CreditCard className=\"w-12 h-12 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-gray-600 font-medium\">Secure Card Entry</p>\n                      <p className=\"text-sm text-gray-500 mt-1\">\n                        Click \"Pay Now\" to enter your card details in a secure Razorpay form\n                      </p>\n                    </div>\n\n                    <Button\n                      onClick={processCardPayment}\n                      disabled={isProcessing}\n                      className=\"w-full bg-green-600 hover:bg-green-700 text-lg py-3\"\n                      data-testid=\"button-pay-card\"\n                    >\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Opening Secure Payment...\n                        </>\n                      ) : (\n                        <>\n                          <Shield className=\"w-4 h-4 mr-2\" />\n                          Pay ₹{finalTotal.toLocaleString('en-IN')} Securely\n                        </>\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Additional Info */}\n                  <div className=\"text-xs text-gray-500 space-y-1\">\n                    <p>• Your card information is processed securely by Razorpay</p>\n                    <p>• IndoSaga Furniture never sees or stores your card details</p>\n                    <p>• You may be redirected to your bank for additional verification</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-primary to-primary/90 text-white\">\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span>₹{total.toLocaleString('en-IN')}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Shipping:</span>\n                    <span>{shipping === 0 ? 'Free' : `₹${shipping}`}</span>\n                  </div>\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between font-bold text-lg\">\n                      <span>Total:</span>\n                      <span>₹{finalTotal.toLocaleString('en-IN')}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 p-4 bg-green-50 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n                      <span className=\"text-green-800 font-medium\">Secure Payment</span>\n                    </div>\n                    <p className=\"text-green-700 text-sm mt-1\">\n                      Your payment is secured by Razorpay\n                    </p>\n                  </div>\n\n                  {/* Trust Badges */}\n                  <div className=\"mt-6 text-center\">\n                    <div className=\"flex justify-center items-center space-x-2 mb-2\">\n                      <Shield className=\"w-4 h-4 text-green-600\" />\n                      <span className=\"text-sm font-medium text-green-800\">Trusted by 10M+ users</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2 text-xs text-gray-600\">\n                      <div className=\"bg-gray-50 p-2 rounded\">SSL Secured</div>\n                      <div className=\"bg-gray-50 p-2 rounded\">PCI Compliant</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13426},"client/src/pages/payment-cod.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Banknote, CheckCircle, Loader2, MapPin, Phone, User, Truck, Clock, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function CODPaymentPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [addressData, setAddressData] = useState<any>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  useEffect(() => {\n    const stored = localStorage.getItem('checkoutAddress');\n    if (stored) {\n      setAddressData(JSON.parse(stored));\n    } else {\n      navigate('/address');\n    }\n  }, [navigate]);\n\n  const total = (cartItems as any[]).reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n  );\n  const shipping = 0; // Free shipping on all orders\n  const codFee = 0; // No COD fees\n  const finalTotal = total; // No extra charges\n\n  const createCODOrder = useMutation({\n    mutationFn: async () => {\n      const orderItems = (cartItems as any[]).map((item: any) => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        price: item.product.price,\n      }));\n\n      // Use direct checkout endpoint for guest users\n      const order = await apiRequest(\"POST\", \"/api/orders/direct-checkout\", {\n        ...addressData,\n        paymentMethod: 'cod',\n        orderItems,\n        total: total // No COD charges\n      });\n\n      return order;\n    },\n    onSuccess: (order) => {\n      // Clear localStorage\n      localStorage.removeItem('checkoutAddress');\n      localStorage.removeItem('selectedPaymentMethod');\n      localStorage.removeItem('checkoutItems');\n      localStorage.removeItem('checkoutType');\n\n      // Navigate to success page with order ID\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      navigate(`/payment/success?orderId=${order.id}`);\n    },\n    onError: (error) => {\n      console.error('COD order creation failed:', error);\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to place COD order. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handlePlaceOrder = async () => {\n    setIsProcessing(true);\n    try {\n      await createCODOrder.mutateAsync();\n    } catch (error) {\n      // Error handled by mutation\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  if (isLoading || !addressData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4\" />\n            <p>Loading payment...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Progress Indicator */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-center space-x-4 mb-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm\">\n                <CheckCircle className=\"w-4 h-4\" />\n              </div>\n              <span className=\"ml-2 text-sm font-medium text-green-600\">Address</span>\n            </div>\n            <div className=\"w-12 h-px bg-green-500\"></div>\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium\">\n                2\n              </div>\n              <span className=\"ml-2 text-sm font-medium text-primary\">Payment</span>\n            </div>\n            <div className=\"w-12 h-px bg-gray-300\"></div>\n            <div className=\"flex items-center\">\n              <div className=\"w-8 h-8 bg-gray-300 text-gray-500 rounded-full flex items-center justify-center text-sm font-medium\">\n                3\n              </div>\n              <span className=\"ml-2 text-sm text-gray-500\">Success</span>\n            </div>\n          </div>\n          \n          <h1 className=\"text-4xl font-display font-bold text-darkBrown text-center mb-4\">\n            Cash on Delivery\n          </h1>\n          <p className=\"text-center text-gray-600\">\n            Pay when your order is delivered\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Payment Form */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-darkBrown\">\n                  <Banknote className=\"mr-2 h-5 w-5\" />\n                  Cash on Delivery\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-6\">\n                  <div className=\"text-center mb-6\">\n                    <Banknote className=\"w-16 h-16 text-orange-600 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold text-orange-900 mb-2\">\n                      Pay at Your Doorstep\n                    </h3>\n                    <p className=\"text-orange-800\">\n                      No online payment required. Pay cash when your furniture is delivered.\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <Truck className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                    <h4 className=\"font-medium text-blue-900 mb-1\">Free Delivery</h4>\n                    <p className=\"text-sm text-blue-700\">At your doorstep</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <Clock className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                    <h4 className=\"font-medium text-green-900 mb-1\">Quick Delivery</h4>\n                    <p className=\"text-sm text-green-700\">5-7 business days</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                    <Shield className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n                    <h4 className=\"font-medium text-purple-900 mb-1\">Quality Check</h4>\n                    <p className=\"text-sm text-purple-700\">Before payment</p>\n                  </div>\n                </div>\n\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-yellow-900 mb-2\">Important Information</h4>\n                  <ul className=\"text-sm text-yellow-800 space-y-1\">\n                    <li>• No extra charges for COD</li>\n                    <li>• Keep exact change ready for delivery</li>\n                    <li>• Inspect furniture before making payment</li>\n                    <li>• Available only within serviceable areas</li>\n                    <li>• COD orders cannot be modified once placed</li>\n                  </ul>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-darkBrown mb-2\">Delivery Address</h4>\n                  <div className=\"text-sm text-gray-700\">\n                    <p className=\"font-medium\">{addressData.customerName}</p>\n                    <p>{addressData.customerPhone}</p>\n                    <p className=\"mt-1\">{addressData.shippingAddress}</p>\n                    <p>Pincode: {addressData.pincode}</p>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={handlePlaceOrder}\n                  disabled={isProcessing}\n                  className=\"w-full wood-texture text-white py-3 font-semibold text-lg\"\n                >\n                  {isProcessing ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                      Placing COD Order...\n                    </>\n                  ) : (\n                    `Place COD Order - ₹${finalTotal.toFixed(2)}`\n                  )}\n                </Button>\n\n                <div className=\"text-center\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => navigate('/payment')}\n                    className=\"text-primary border-primary\"\n                  >\n                    ← Choose Different Payment Method\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-24\">\n              <CardHeader>\n                <CardTitle className=\"text-darkBrown\">Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3 max-h-40 overflow-y-auto\">\n                  {(cartItems as any[]).map((item: any) => (\n                    <div key={item.id} className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gray-100 rounded overflow-hidden\">\n                        <img \n                          src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"} \n                          alt={item.product?.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-darkBrown truncate\">\n                          {item.product?.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          Qty: {item.quantity}\n                        </p>\n                      </div>\n                      <p className=\"text-sm font-semibold text-primary\">\n                        ₹{(parseFloat(item.product?.price || \"0\") * item.quantity).toFixed(2)}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"border-t pt-4 space-y-2\">\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Subtotal</span>\n                    <span>₹{total.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Shipping</span>\n                    <span>{shipping === 0 ? \"Free\" : `₹${shipping}`}</span>\n                  </div>\n                  <div className=\"flex justify-between text-green-600\">\n                    <span>COD Fee</span>\n                    <span>FREE</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-semibold text-darkBrown border-t pt-2\">\n                    <span>Total</span>\n                    <span>₹{total.toFixed(2)}</span>\n                  </div>\n                </div>\n\n                <div className=\"text-xs text-gray-500 text-center mt-4\">\n                  💰 Pay cash on delivery\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11962},"client/src/pages/payment-qr.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, QrCode, CheckCircle, Loader2, Smartphone, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function QRPaymentPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [isProcessing, setIsProcessing] = useState(false);\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>(\"\");\n  const [paymentStatus, setPaymentStatus] = useState<'pending' | 'processing' | 'success' | 'failed'>('pending');\n  const [orderId, setOrderId] = useState<string>(\"\");\n  const [addressData, setAddressData] = useState<any>(null);\n  const [razorpayKey, setRazorpayKey] = useState<string>(\"\");\n  const [pollInterval, setPollInterval] = useState<NodeJS.Timeout | null>(null);\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const total = (cartItems as any[]).reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n  );\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  useEffect(() => {\n    const stored = localStorage.getItem('checkoutAddress');\n    if (stored) {\n      setAddressData(JSON.parse(stored));\n    } else {\n      navigate('/address');\n    }\n\n    // Fetch Razorpay configuration\n    fetch('/api/payment/config')\n      .then(res => res.json())\n      .then(config => {\n        if (config.key) {\n          setRazorpayKey(config.key);\n        }\n      })\n      .catch(console.error);\n\n    return () => {\n      if (pollInterval) {\n        clearInterval(pollInterval);\n      }\n    };\n  }, [navigate]);\n\n  const generateQRCode = async () => {\n    setIsProcessing(true);\n    setPaymentStatus('processing');\n\n    try {\n      // Create Razorpay order\n      const orderResponse = await fetch('/api/payment/create-order', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          amount: finalTotal,\n          currency: 'INR',\n          receipt: `qr_${Date.now()}`,\n        }),\n      });\n\n      const razorpayOrder = await orderResponse.json();\n\n      if (!orderResponse.ok) {\n        throw new Error(razorpayOrder.message || 'Failed to create payment order');\n      }\n\n      setOrderId(razorpayOrder.id);\n\n      // Open Razorpay QR Code modal\n      const options = {\n        key: razorpayKey,\n        amount: razorpayOrder.amount,\n        currency: razorpayOrder.currency,\n        name: 'IndoSaga Furniture',\n        description: 'Purchase of premium teak furniture',\n        order_id: razorpayOrder.id,\n        method: {\n          qr: true\n        },\n        handler: async (response: any) => {\n          try {\n            setPaymentStatus('success');\n            \n            // Verify payment\n            const verifyResponse = await fetch('/api/payment/verify', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(response),\n            });\n\n            const verificationResult = await verifyResponse.json();\n            \n            if (!verificationResult.success) {\n              throw new Error('Payment verification failed');\n            }\n\n            // Create final order\n            const orderData = {\n              customerName: addressData.customerName || 'Customer',\n              customerPhone: addressData.customerPhone || '0000000000',\n              customerEmail: addressData.customerEmail || '',\n              shippingAddress: addressData.shippingAddress || '',\n              pincode: addressData.pincode || '000000',\n              paymentMethod: 'qr',\n              razorpayOrderId: response.razorpay_order_id,\n              razorpayPaymentId: response.razorpay_payment_id,\n              razorpaySignature: response.razorpay_signature,\n              orderItems: (cartItems as any[]).map((item: any) => ({\n                productId: item.productId,\n                quantity: item.quantity,\n                price: item.product?.price || \"0\",\n              })),\n              total: finalTotal,\n            };\n\n            const finalOrderResponse = await fetch('/api/orders/direct-checkout', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(orderData),\n            });\n\n            const order = await finalOrderResponse.json();\n            navigate(`/payment/success?orderId=${order.id}`);\n          } catch (error) {\n            console.error('Payment processing error:', error);\n            setPaymentStatus('failed');\n            toast({\n              title: \"Payment Processing Failed\",\n              description: \"There was an error processing your payment. Please try again.\",\n              variant: \"destructive\",\n            });\n          }\n        },\n        prefill: {\n          name: addressData?.customerName || 'Customer',\n          email: addressData?.customerEmail || '',\n          contact: addressData?.customerPhone || '0000000000',\n        },\n        notes: {\n          address: addressData?.shippingAddress || '',\n          payment_method: 'qr',\n        },\n        theme: {\n          color: '#8B4513',\n        },\n        modal: {\n          ondismiss: () => {\n            setIsProcessing(false);\n            setPaymentStatus('pending');\n          },\n        },\n      };\n\n      const rzp = new (window as any).Razorpay(options);\n      rzp.open();\n      \n      setIsProcessing(false);\n    } catch (error) {\n      console.error('QR payment error:', error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to generate QR code. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n      setPaymentStatus('failed');\n    }\n  };\n\n  const retryPayment = () => {\n    setPaymentStatus('pending');\n    setOrderId('');\n    setQrCodeUrl('');\n  };\n\n  if (isLoading || !addressData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8 mx-auto\" />\n            <div className=\"bg-gray-200 rounded-lg h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/payment')}\n            className=\"mb-6 p-0 text-gray-600 hover:text-gray-800\"\n            data-testid=\"button-back-payment\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Payment Options\n          </Button>\n          \n          <div className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mb-6\">\n              <QrCode className=\"w-8 h-8 text-purple-600\" />\n            </div>\n            \n            <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">\n              QR Code Payment\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Scan the QR code with any UPI app to complete payment\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* QR Code Section */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-purple-600 to-purple-700 text-white\">\n                <CardTitle className=\"flex items-center\">\n                  <QrCode className=\"w-5 h-5 mr-2\" />\n                  QR Code Payment\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"text-center\">\n                  {paymentStatus === 'pending' && (\n                    <div className=\"space-y-6\">\n                      <div className=\"w-64 h-64 mx-auto bg-gray-100 rounded-lg flex items-center justify-center\">\n                        <QrCode className=\"w-24 h-24 text-gray-400\" />\n                      </div>\n                      <Button\n                        onClick={generateQRCode}\n                        disabled={isProcessing}\n                        className=\"bg-purple-600 hover:bg-purple-700 text-lg px-8 py-3\"\n                        data-testid=\"button-generate-qr\"\n                      >\n                        {isProcessing ? (\n                          <>\n                            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                            Generating QR Code...\n                          </>\n                        ) : (\n                          <>\n                            <QrCode className=\"w-4 h-4 mr-2\" />\n                            Generate QR Code\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  )}\n\n                  {paymentStatus === 'processing' && (\n                    <div className=\"space-y-6\">\n                      <div className=\"w-64 h-64 mx-auto bg-gray-100 rounded-lg flex items-center justify-center\">\n                        <div className=\"text-center\">\n                          <Loader2 className=\"w-12 h-12 text-purple-600 animate-spin mx-auto mb-4\" />\n                          <p className=\"text-purple-600 font-medium\">QR Code Ready</p>\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">\n                          Scan QR Code to Pay ₹{finalTotal.toLocaleString('en-IN')}\n                        </h3>\n                        <p className=\"text-gray-600\">\n                          Open any UPI app and scan the QR code to complete your payment\n                        </p>\n                        <div className=\"flex justify-center space-x-4 text-sm text-gray-500\">\n                          <span>• GPay</span>\n                          <span>• PhonePe</span>\n                          <span>• Paytm</span>\n                          <span>• BHIM</span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {paymentStatus === 'success' && (\n                    <div className=\"space-y-6\">\n                      <div className=\"w-64 h-64 mx-auto bg-green-100 rounded-lg flex items-center justify-center\">\n                        <CheckCircle className=\"w-24 h-24 text-green-600\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-green-800\">Payment Successful!</h3>\n                        <p className=\"text-green-600\">Redirecting to confirmation page...</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {paymentStatus === 'failed' && (\n                    <div className=\"space-y-6\">\n                      <div className=\"w-64 h-64 mx-auto bg-red-100 rounded-lg flex items-center justify-center\">\n                        <QrCode className=\"w-24 h-24 text-red-400\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-red-800\">Payment Failed</h3>\n                        <p className=\"text-red-600 mb-4\">There was an issue processing your payment</p>\n                        <Button\n                          onClick={retryPayment}\n                          variant=\"outline\"\n                          className=\"border-red-300 text-red-600 hover:bg-red-50\"\n                          data-testid=\"button-retry-payment\"\n                        >\n                          <RefreshCw className=\"w-4 h-4 mr-2\" />\n                          Try Again\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Instructions */}\n                <div className=\"mt-8 bg-blue-50 p-4 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">How to scan QR code:</h4>\n                  <ol className=\"text-sm text-blue-800 space-y-1\">\n                    <li>1. Open any UPI app (GPay, PhonePe, Paytm, etc.)</li>\n                    <li>2. Tap on \"Scan & Pay\" or QR scanner</li>\n                    <li>3. Point your camera at the QR code above</li>\n                    <li>4. Enter your UPI PIN to complete payment</li>\n                  </ol>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-primary to-primary/90 text-white\">\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span>₹{total.toLocaleString('en-IN')}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Shipping:</span>\n                    <span>{shipping === 0 ? 'Free' : `₹${shipping}`}</span>\n                  </div>\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between font-bold text-lg\">\n                      <span>Total:</span>\n                      <span>₹{finalTotal.toLocaleString('en-IN')}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 p-4 bg-green-50 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n                      <span className=\"text-green-800 font-medium\">Secure Payment</span>\n                    </div>\n                    <p className=\"text-green-700 text-sm mt-1\">\n                      Your payment is secured by Razorpay\n                    </p>\n                  </div>\n\n                  {orderId && (\n                    <div className=\"mt-4 p-3 bg-gray-50 rounded\">\n                      <p className=\"text-sm text-gray-600\">Order ID:</p>\n                      <p className=\"text-xs font-mono text-gray-800\">{orderId}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15111},"client/src/pages/payment-success.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, Package, Truck, MapPin, Phone, Mail, Receipt } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport ReceiptModal from \"@/components/receipt-modal\";\n\nexport default function PaymentSuccessPage() {\n  const [location, navigate] = useLocation();\n  const [orderId, setOrderId] = useState<string>(\"\");\n  const [showReceipt, setShowReceipt] = useState<boolean>(false);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const orderIdParam = urlParams.get('orderId');\n    if (orderIdParam) {\n      setOrderId(orderIdParam);\n      \n      // Clear cart data after successful payment\n      const checkoutType = localStorage.getItem('checkoutType');\n      if (checkoutType === 'cart') {\n        // Clear localStorage cart for cart checkout\n        localStorage.removeItem('localCart');\n        localStorage.removeItem('checkoutItems');\n      }\n      \n      // Clean up checkout data\n      localStorage.removeItem('buyNowItem');\n      localStorage.removeItem('checkoutAddress');\n      localStorage.removeItem('checkoutType');\n    } else {\n      navigate('/');\n    }\n  }, [navigate]);\n\n  const { data: order, isLoading } = useQuery({\n    queryKey: [\"/api/orders\", orderId],\n    enabled: !!orderId,\n  });\n\n  // Type-safe order data\n  const orderData = order as any;\n\n  if (isLoading || !orderData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8 mx-auto\" />\n            <div className=\"bg-gray-200 rounded-lg h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Success Message */}\n        <div className=\"text-center mb-12\">\n          <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-6\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          \n          <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">\n            Order Confirmed!\n          </h1>\n          <p className=\"text-lg text-gray-600 mb-6\">\n            Thank you for your purchase. Your order has been successfully placed.\n          </p>\n          \n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 inline-block\">\n            <p className=\"text-green-800 font-medium\">\n              Order ID: <span className=\"font-bold\">{orderData.id}</span>\n            </p>\n            {orderData.trackingId && (\n              <p className=\"text-green-800 font-medium mt-1\">\n                Tracking ID: <span className=\"font-bold\">{orderData.trackingId}</span>\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Order Details */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-primary to-primary/90 text-white\">\n              <CardTitle className=\"flex items-center\">\n                <Package className=\"w-5 h-5 mr-2\" />\n                Order Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center pb-2 border-b\">\n                  <span className=\"text-gray-600\">Order Total:</span>\n                  <span className=\"font-bold text-lg\">₹{parseFloat(orderData.total).toLocaleString('en-IN')}</span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Payment Method:</span>\n                  <span className=\"font-medium capitalize\">{orderData.paymentMethod === 'cod' ? 'Cash on Delivery' : orderData.paymentMethod?.toUpperCase()}</span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Payment Status:</span>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    orderData.paymentStatus === 'completed' \n                      ? 'bg-green-100 text-green-800' \n                      : 'bg-yellow-100 text-yellow-800'\n                  }`}>\n                    {orderData.paymentStatus}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Order Status:</span>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    orderData.status === 'processing' \n                      ? 'bg-blue-100 text-blue-800' \n                      : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    {orderData.status}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Delivery Information */}\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-secondary to-secondary/90 text-white\">\n              <CardTitle className=\"flex items-center\">\n                <Truck className=\"w-5 h-5 mr-2\" />\n                Delivery Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <MapPin className=\"w-5 h-5 text-gray-400 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{orderData.customerName}</p>\n                    <p className=\"text-gray-600 text-sm\">{orderData.shippingAddress}</p>\n                    <p className=\"text-gray-600 text-sm\">PIN: {orderData.pincode}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <Phone className=\"w-5 h-5 text-gray-400\" />\n                  <span className=\"text-gray-600\">{orderData.customerPhone}</span>\n                </div>\n                \n                {orderData.customerEmail && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Mail className=\"w-5 h-5 text-gray-400\" />\n                    <span className=\"text-gray-600\">{orderData.customerEmail}</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Expected Delivery */}\n        <Card className=\"border-0 shadow-lg mt-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                Expected Delivery\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                Your order will be delivered within 7-10 business days.\n                {orderData.trackingId && \" You can track your order using the tracking ID provided above.\"}\n              </p>\n              \n              <div className=\"flex justify-center space-x-4\">\n                <Button \n                  onClick={() => setShowReceipt(true)}\n                  variant=\"outline\"\n                  className=\"border-primary text-primary hover:bg-primary hover:text-white\"\n                  data-testid=\"button-view-receipt\"\n                >\n                  <Receipt className=\"w-4 h-4 mr-2\" />\n                  View Receipt\n                </Button>\n                <Button \n                  onClick={() => navigate('/profile#orders')}\n                  variant=\"outline\"\n                  data-testid=\"button-view-orders\"\n                >\n                  View My Orders\n                </Button>\n                <Button \n                  onClick={() => navigate('/')}\n                  data-testid=\"button-continue-shopping\"\n                >\n                  Continue Shopping\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* What's Next */}\n        <div className=\"mt-12 text-center\">\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">What's Next?</h3>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <span className=\"text-blue-600 font-bold\">1</span>\n              </div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Order Processing</h4>\n              <p className=\"text-sm text-gray-600\">\n                We'll prepare your order for shipment within 1-2 business days.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <span className=\"text-blue-600 font-bold\">2</span>\n              </div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Shipping</h4>\n              <p className=\"text-sm text-gray-600\">\n                Your order will be shipped and you'll receive tracking information.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <span className=\"text-blue-600 font-bold\">3</span>\n              </div>\n              <h4 className=\"font-medium text-gray-900 mb-2\">Delivery</h4>\n              <p className=\"text-sm text-gray-600\">\n                Your premium teak furniture will be delivered to your doorstep.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Receipt Modal */}\n      <ReceiptModal \n        isOpen={showReceipt}\n        onClose={() => setShowReceipt(false)}\n        orderData={orderData}\n      />\n    </div>\n  );\n}","size_bytes":10450},"client/src/pages/payment-upi.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Smartphone, CheckCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function UPIPaymentPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [upiId, setUpiId] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [addressData, setAddressData] = useState<any>(null);\n  const [razorpayKey, setRazorpayKey] = useState<string>(\"\");\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const total = (cartItems as any[]).reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n  );\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  useEffect(() => {\n    const stored = localStorage.getItem('checkoutAddress');\n    if (stored) {\n      setAddressData(JSON.parse(stored));\n    } else {\n      navigate('/address');\n    }\n\n    // Fetch Razorpay configuration\n    fetch('/api/payment/config')\n      .then(res => res.json())\n      .then(config => {\n        if (config.key) {\n          setRazorpayKey(config.key);\n        }\n      })\n      .catch(console.error);\n  }, [navigate]);\n\n  const validateUpiId = (upiId: string) => {\n    // UPI ID validation regex\n    const upiRegex = /^[a-zA-Z0-9.\\-_]{2,256}@[a-zA-Z]{2,64}$/;\n    return upiRegex.test(upiId);\n  };\n\n  const processUPIPayment = async () => {\n    if (!validateUpiId(upiId)) {\n      toast({\n        title: \"Invalid UPI ID\",\n        description: \"Please enter a valid UPI ID (e.g., user@paytm)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // Create Razorpay order\n      const orderResponse = await fetch('/api/create-razorpay-order', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          amount: finalTotal,\n          currency: 'INR',\n          receipt: `upi_${Date.now()}`,\n        }),\n      });\n\n      const razorpayOrder = await orderResponse.json();\n\n      if (!orderResponse.ok) {\n        throw new Error(razorpayOrder.message || 'Failed to create payment order');\n      }\n\n      const options = {\n        key: razorpayKey,\n        amount: razorpayOrder.amount,\n        currency: razorpayOrder.currency,\n        name: 'IndoSaga Furniture',\n        description: 'Purchase of premium teak furniture',\n        order_id: razorpayOrder.id,\n        method: {\n          upi: {\n            vpa: upiId\n          }\n        },\n        handler: async (response: any) => {\n          try {\n            // Verify payment\n            const verifyResponse = await fetch('/api/verify-razorpay-payment', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(response),\n            });\n\n            const verificationResult = await verifyResponse.json();\n            \n            if (!verificationResult.success) {\n              throw new Error('Payment verification failed');\n            }\n\n            // Create final order\n            const orderData = {\n              customerName: addressData.customerName || 'Customer',\n              customerPhone: addressData.customerPhone || '0000000000',\n              customerEmail: addressData.customerEmail || '',\n              shippingAddress: addressData.shippingAddress || '',\n              pincode: addressData.pincode || '000000',\n              paymentMethod: 'upi',\n              razorpayOrderId: response.razorpay_order_id,\n              razorpayPaymentId: response.razorpay_payment_id,\n              razorpaySignature: response.razorpay_signature,\n              orderItems: (cartItems as any[]).map((item: any) => ({\n                productId: item.productId,\n                quantity: item.quantity,\n                price: item.product?.price || \"0\",\n              })),\n              total: finalTotal,\n            };\n\n            const finalOrderResponse = await fetch('/api/orders/direct-checkout', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify(orderData),\n            });\n\n            const order = await finalOrderResponse.json();\n            navigate(`/payment/success?orderId=${order.id}`);\n          } catch (error) {\n            console.error('Payment processing error:', error);\n            toast({\n              title: \"Payment Processing Failed\",\n              description: \"There was an error processing your payment. Please try again.\",\n              variant: \"destructive\",\n            });\n          } finally {\n            setIsProcessing(false);\n          }\n        },\n        prefill: {\n          name: addressData?.customerName || 'Customer',\n          email: addressData?.customerEmail || '',\n          contact: addressData?.customerPhone || '0000000000',\n        },\n        notes: {\n          address: addressData?.shippingAddress || '',\n          upi_id: upiId,\n        },\n        theme: {\n          color: '#8B4513',\n        },\n        modal: {\n          ondismiss: () => {\n            setIsProcessing(false);\n          },\n        },\n      };\n\n      const rzp = new (window as any).Razorpay(options);\n      rzp.open();\n    } catch (error) {\n      console.error('UPI payment error:', error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to process UPI payment. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  if (isLoading || !addressData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8 mx-auto\" />\n            <div className=\"bg-gray-200 rounded-lg h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/payment')}\n            className=\"mb-6 p-0 text-gray-600 hover:text-gray-800\"\n            data-testid=\"button-back-payment\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Payment Options\n          </Button>\n          \n          <div className=\"text-center\">\n            <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-6\">\n              <Smartphone className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            \n            <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">\n              UPI Payment\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Enter your UPI ID to complete the payment\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Payment Form */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white\">\n                <CardTitle className=\"flex items-center\">\n                  <Smartphone className=\"w-5 h-5 mr-2\" />\n                  UPI Payment Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"upiId\" className=\"text-base font-medium\">\n                      UPI ID <span className=\"text-red-500\">*</span>\n                    </Label>\n                    <Input\n                      id=\"upiId\"\n                      type=\"text\"\n                      placeholder=\"yourname@paytm\"\n                      value={upiId}\n                      onChange={(e) => setUpiId(e.target.value)}\n                      className=\"mt-2 text-lg py-3\"\n                      data-testid=\"input-upi-id\"\n                    />\n                    <p className=\"text-sm text-gray-500 mt-2\">\n                      Enter your UPI ID (e.g., user@paytm, user@phonepe, user@googlepay)\n                    </p>\n                  </div>\n\n                  {/* Supported UPI Apps */}\n                  <div>\n                    <h3 className=\"font-medium text-gray-900 mb-3\">Supported UPI Apps</h3>\n                    <div className=\"grid grid-cols-4 gap-4\">\n                      {['GPay', 'PhonePe', 'Paytm', 'BHIM'].map((app) => (\n                        <div key={app} className=\"text-center p-3 border rounded-lg\">\n                          <div className=\"w-8 h-8 bg-gray-200 rounded mx-auto mb-2\"></div>\n                          <p className=\"text-sm font-medium\">{app}</p>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button\n                    onClick={processUPIPayment}\n                    disabled={isProcessing || !upiId}\n                    className=\"w-full bg-blue-600 hover:bg-blue-700 text-lg py-3\"\n                    data-testid=\"button-pay-upi\"\n                  >\n                    {isProcessing ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Processing Payment...\n                      </>\n                    ) : (\n                      <>\n                        Pay ₹{finalTotal.toLocaleString('en-IN')}\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader className=\"bg-gradient-to-r from-primary to-primary/90 text-white\">\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between\">\n                    <span>Subtotal:</span>\n                    <span>₹{total.toLocaleString('en-IN')}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Shipping:</span>\n                    <span>{shipping === 0 ? 'Free' : `₹${shipping}`}</span>\n                  </div>\n                  <div className=\"border-t pt-4\">\n                    <div className=\"flex justify-between font-bold text-lg\">\n                      <span>Total:</span>\n                      <span>₹{finalTotal.toLocaleString('en-IN')}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 p-4 bg-green-50 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600 mr-2\" />\n                      <span className=\"text-green-800 font-medium\">Secure Payment</span>\n                    </div>\n                    <p className=\"text-green-700 text-sm mt-1\">\n                      Your payment is secured by Razorpay\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11943},"client/src/pages/payment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreditCard, Smartphone, QrCode, Banknote, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport RazorpayPaymentModal from \"@/components/razorpay-payment-modal\";\n\nexport default function PaymentPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [addressData, setAddressData] = useState<any>(null);\n  const [selectedMethod, setSelectedMethod] = useState<string>(\"\");\n  const [razorpayKey, setRazorpayKey] = useState<string>(\"\");\n  const [isDirectCheckout, setIsDirectCheckout] = useState(false);\n  const [isCartCheckout, setIsCartCheckout] = useState(false);\n  const [buyNowItem, setBuyNowItem] = useState<any>(null);\n  const [checkoutItems, setCheckoutItems] = useState<any[]>([]);\n  const [showPaymentModal, setShowPaymentModal] = useState(true);\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: !isDirectCheckout && !isCartCheckout\n  });\n\n  // Helper function to safely map items for checkout\n  const mapOrderItems = (items: any[]) => {\n    if (isDirectCheckout) {\n      return items.map((item: any) => ({\n        productId: item.product.id,\n        quantity: item.quantity,\n        price: item.price.toString(),\n      }));\n    } else if (isCartCheckout) {\n      return items.map((item: any) => ({\n        productId: item.product.id,\n        quantity: item.quantity,\n        price: item.price.toString(),\n      }));\n    } else {\n      return items.map((item: any) => ({\n        productId: item.productId,\n        quantity: item.quantity,\n        price: item.product?.price || \"0\",\n      }));\n    }\n  };\n\n  useEffect(() => {\n    const stored = localStorage.getItem('checkoutAddress');\n    if (stored) {\n      setAddressData(JSON.parse(stored));\n    } else {\n      navigate('/address');\n    }\n\n    // Check if this is direct checkout or cart checkout\n    const checkoutType = localStorage.getItem('checkoutType');\n    const buyNowData = localStorage.getItem('buyNowItem');\n    const cartData = localStorage.getItem('checkoutItems');\n    \n    if (checkoutType === 'direct' && buyNowData) {\n      setIsDirectCheckout(true);\n      setBuyNowItem(JSON.parse(buyNowData));\n    } else if (checkoutType === 'cart' && cartData) {\n      setIsCartCheckout(true);\n      setCheckoutItems(JSON.parse(cartData));\n    }\n\n    // Fetch Razorpay configuration\n    fetch('/api/payment/config')\n      .then(res => res.json())\n      .then(config => {\n        if (config.key) {\n          setRazorpayKey(config.key);\n        }\n      })\n      .catch(console.error);\n  }, [navigate]);\n\n  // Calculate totals based on checkout type\n  const items = isDirectCheckout ? [buyNowItem] : \n                isCartCheckout ? checkoutItems : \n                (cartItems as any[]);\n  const total = isDirectCheckout && buyNowItem ? \n    buyNowItem.total : \n    isCartCheckout ? \n      checkoutItems.reduce((sum: number, item: any) => sum + item.total, 0) :\n      (cartItems as any[]).reduce((sum: number, item: any) => \n        sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n    );\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  const paymentMethods = [\n    {\n      id: \"upi\",\n      name: \"UPI Payment\",\n      description: \"Pay using any UPI app like GPay, PhonePe, Paytm\",\n      icon: Smartphone,\n      color: \"bg-blue-50 border-blue-200\",\n      iconColor: \"text-blue-600\"\n    },\n    {\n      id: \"card\",\n      name: \"Credit/Debit Card\",\n      description: \"Visa, Mastercard, RuPay cards accepted\",\n      icon: CreditCard,\n      color: \"bg-green-50 border-green-200\",\n      iconColor: \"text-green-600\"\n    },\n    {\n      id: \"qr\",\n      name: \"QR Code Payment\",\n      description: \"Scan QR code with any UPI app\",\n      icon: QrCode,\n      color: \"bg-purple-50 border-purple-200\",\n      iconColor: \"text-purple-600\"\n    },\n    {\n      id: \"cod\",\n      name: \"Cash on Delivery\",\n      description: \"Pay when your order is delivered\",\n      icon: Banknote,\n      color: \"bg-orange-50 border-orange-200\",\n      iconColor: \"text-orange-600\"\n    }\n  ];\n\n  const processPayment = async (method: string) => {\n    if (!addressData) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide your address details first.\",\n        variant: \"destructive\",\n      });\n      navigate('/address');\n      return;\n    }\n\n    try {\n      setSelectedMethod(method);\n      \n      if (method === 'cod') {\n        // Handle Cash on Delivery\n        const orderData = {\n          customerName: addressData.customerName || 'Customer',\n          customerPhone: addressData.customerPhone || '0000000000',\n          customerEmail: addressData.customerEmail || '',\n          shippingAddress: addressData.shippingAddress || '',\n          pincode: addressData.pincode || '000000',\n          paymentMethod: 'cod',\n          orderItems: mapOrderItems(items),\n          total: finalTotal,\n        };\n\n        const endpoint = isDirectCheckout ? '/api/orders/direct-checkout' : '/api/orders/checkout';\n        const response = await fetch(endpoint, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: isDirectCheckout ? 'omit' : 'include',\n          body: JSON.stringify(orderData),\n        });\n        const order = await response.json();\n        navigate(`/payment/success?orderId=${order.id}`);\n        return;\n      }\n\n      // Handle online payments with Razorpay\n      const { createRazorpayOrder, verifyPayment, createFinalOrder, initializeRazorpay } = await import('@/lib/razorpay');\n      \n      const razorpayOrder = await createRazorpayOrder(finalTotal, addressData);\n      \n      const options = {\n        key: razorpayKey || 'rzp_test_key',\n        amount: razorpayOrder.amount,\n        currency: razorpayOrder.currency,\n        name: 'IndoSaga Furniture',\n        description: 'Purchase of premium teak furniture',\n        order_id: razorpayOrder.id,\n        handler: async (response: any) => {\n          try {\n            await verifyPayment(response);\n            \n            const orderData = {\n              customerName: addressData.customerName || 'Customer',\n              customerPhone: addressData.customerPhone || '0000000000',\n              customerEmail: addressData.customerEmail || '',\n              shippingAddress: addressData.shippingAddress || '',\n              pincode: addressData.pincode || '000000',\n              paymentMethod: method,\n              razorpayOrderId: response.razorpay_order_id,\n              razorpayPaymentId: response.razorpay_payment_id,\n              razorpaySignature: response.razorpay_signature,\n              orderItems: mapOrderItems(items),\n              total: finalTotal,\n            };\n\n            const endpoint = isDirectCheckout ? '/api/orders/direct-checkout' : '/api/orders/checkout';\n            const orderResponse = await fetch(endpoint, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: isDirectCheckout ? 'omit' : 'include',\n              body: JSON.stringify(orderData),\n            });\n            const order = await orderResponse.json();\n            navigate(`/payment/success?orderId=${order.id}`);\n          } catch (error) {\n            toast({\n              title: \"Payment Processing Failed\",\n              description: \"There was an error processing your payment. Please try again.\",\n              variant: \"destructive\",\n            });\n          }\n        },\n        prefill: {\n          name: addressData.customerName || 'Customer',\n          email: addressData.customerEmail || '',\n          contact: addressData.customerPhone || '0000000000',\n        },\n        notes: {\n          address: addressData.shippingAddress || '',\n        },\n        theme: {\n          color: '#8B4513',\n        },\n      };\n\n      await initializeRazorpay(options);\n    } catch (error) {\n      console.error('Payment error:', error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to process payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePaymentMethodSelect = (method: string) => {\n    processPayment(method);\n  };\n\n  if (isLoading || !addressData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8 mx-auto\" />\n            <div className=\"space-y-4\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"h-20 bg-gray-200 rounded-lg\" />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-10 sm:py-20 bg-warmWhite min-h-screen\">\n      <RazorpayPaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => {\n          setShowPaymentModal(false);\n          navigate('/address');\n        }}\n        onSelectMethod={handlePaymentMethodSelect}\n        total={finalTotal}\n        phoneNumber={addressData?.customerPhone?.slice(-10)}\n      />\n    </div>\n  );\n}","size_bytes":9454},"client/src/lib/razorpay.ts":{"content":"// Razorpay integration utility\nimport { useToast } from \"@/hooks/use-toast\";\n\ndeclare global {\n  interface Window {\n    Razorpay: any;\n  }\n}\n\nexport interface RazorpayOptions {\n  key: string;\n  amount: number;\n  currency: string;\n  name: string;\n  description: string;\n  order_id: string;\n  handler: (response: any) => void;\n  prefill: {\n    name: string;\n    email: string;\n    contact: string;\n  };\n  notes: {\n    address: string;\n  };\n  theme: {\n    color: string;\n  };\n}\n\nexport const createRazorpayOrder = async (amount: number, customerDetails: any) => {\n  try {\n    const response = await fetch('/api/create-razorpay-order', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        amount,\n        currency: 'INR',\n        receipt: `receipt_${Date.now()}`,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create payment order');\n    }\n\n    const orderData = await response.json();\n    return orderData;\n  } catch (error) {\n    console.error('Error creating Razorpay order:', error);\n    throw error;\n  }\n};\n\nexport const verifyPayment = async (paymentData: any) => {\n  try {\n    const response = await fetch('/api/verify-razorpay-payment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify(paymentData),\n    });\n\n    if (!response.ok) {\n      throw new Error('Payment verification failed');\n    }\n\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error('Error verifying payment:', error);\n    throw error;\n  }\n};\n\nexport const createFinalOrder = async (orderData: any) => {\n  try {\n    const response = await fetch('/api/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify(orderData),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create final order');\n    }\n\n    const order = await response.json();\n    return order;\n  } catch (error) {\n    console.error('Error creating final order:', error);\n    throw error;\n  }\n};\n\n// Get payment configuration from server\nexport const getPaymentConfig = async () => {\n  try {\n    const response = await fetch('/api/payment/config', {\n      credentials: 'include'\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch payment config');\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching payment config:', error);\n    throw error;\n  }\n};\n\nexport const initializeRazorpay = (options: RazorpayOptions) => {\n  return new Promise((resolve, reject) => {\n    if (!window.Razorpay) {\n      reject(new Error('Razorpay SDK not loaded'));\n      return;\n    }\n\n    const rzp = new window.Razorpay({\n      ...options,\n      modal: {\n        ondismiss: () => {\n          reject(new Error('Payment cancelled by user'));\n        },\n      },\n    });\n\n    rzp.on('payment.failed', (response: any) => {\n      reject(new Error(`Payment failed: ${response.error.description}`));\n    });\n\n    rzp.open();\n    resolve(rzp);\n  });\n};","size_bytes":3299},"client/src/pages/payment-new.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, CreditCard, Smartphone, QrCode, Banknote, CheckCircle, ArrowRight } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function PaymentPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  const [addressData, setAddressData] = useState<any>(null);\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n  });\n\n  const total = (cartItems as any[]).reduce((sum: number, item: any) => \n    sum + (parseFloat(item.product?.price || \"0\") * item.quantity), 0\n  );\n  const shipping = 0; // Free shipping on all orders\n  const finalTotal = total;\n\n  useEffect(() => {\n    const stored = localStorage.getItem('checkoutAddress');\n    if (stored) {\n      setAddressData(JSON.parse(stored));\n    } else {\n      navigate('/address');\n    }\n  }, [navigate]);\n\n  const paymentMethods = [\n    {\n      id: \"upi\",\n      name: \"UPI Payment\",\n      description: \"Pay using UPI ID or VPA\",\n      icon: Smartphone,\n      color: \"bg-blue-50 border-blue-200 hover:bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      route: \"/payment/upi\"\n    },\n    {\n      id: \"card\",\n      name: \"Credit/Debit Card\",\n      description: \"Secure card payment\",\n      icon: CreditCard,\n      color: \"bg-green-50 border-green-200 hover:bg-green-100\",\n      iconColor: \"text-green-600\",\n      route: \"/payment/card\"\n    },\n    {\n      id: \"qr\",\n      name: \"QR Code\",\n      description: \"Scan QR code with any UPI app\",\n      icon: QrCode,\n      color: \"bg-purple-50 border-purple-200 hover:bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      route: \"/payment/qr\"\n    },\n    {\n      id: \"cod\",\n      name: \"Cash on Delivery\",\n      description: \"Pay when your order is delivered\",\n      icon: Banknote,\n      color: \"bg-orange-50 border-orange-200 hover:bg-orange-100\",\n      iconColor: \"text-orange-600\",\n      route: \"/payment/cod\"\n    }\n  ];\n\n  const handlePaymentMethodSelect = (method: any) => {\n    if (!addressData) {\n      toast({\n        title: \"Missing Address\",\n        description: \"Please fill your address information first.\",\n        variant: \"destructive\",\n      });\n      navigate('/address');\n      return;\n    }\n\n    navigate(method.route);\n  };\n\n  if (isLoading || !addressData) {\n    return (\n      <div className=\"py-20 bg-warmWhite min-h-screen\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8 mx-auto\" />\n            <div className=\"bg-gray-200 rounded-lg h-64\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-20 bg-warmWhite min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate('/address')}\n            className=\"mb-6 p-0 text-gray-600 hover:text-gray-800\"\n            data-testid=\"button-back-address\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Address\n          </Button>\n          \n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-display font-bold text-darkBrown mb-4\">\n              Choose Payment Method\n            </h1>\n            <p className=\"text-lg text-gray-600\">\n              Select your preferred payment method to complete the order\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Payment Methods */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"space-y-4\">\n              {paymentMethods.map((method) => (\n                <Card \n                  key={method.id} \n                  className={`cursor-pointer transition-all duration-200 border-2 ${method.color}`}\n                  onClick={() => handlePaymentMethodSelect(method)}\n                  data-testid={`payment-method-${method.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"p-3 rounded-full bg-white shadow-sm\">\n                          <method.icon className={`w-6 h-6 ${method.iconColor}`} />\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-semibold text-gray-900\">\n                            {method.name}\n                          </h3>\n                          <p className=\"text-gray-600 text-sm\">\n                            {method.description}\n                          </p>\n                        </div>\n                      </div>\n                      <ArrowRight className=\"w-5 h-5 text-gray-400\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Security Notice */}\n            <div className=\"mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n              <div className=\"flex items-start\">\n                <CheckCircle className=\"w-5 h-5 text-blue-600 mr-3 mt-0.5\" />\n                <div>\n                  <h4 className=\"font-medium text-blue-900\">Secure Payment</h4>\n                  <p className=\"text-blue-800 text-sm mt-1\">\n                    Your payment information is encrypted and processed securely through Razorpay.\n                    We never store your payment details.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card className=\"border-0 shadow-lg sticky top-8\">\n              <CardHeader className=\"bg-gradient-to-r from-primary to-primary/90 text-white\">\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {/* Cart Items Preview */}\n                  <div className=\"max-h-32 overflow-y-auto space-y-2 border rounded-lg p-3\">\n                    {(cartItems as any[]).slice(0, 3).map((item: any) => (\n                      <div key={item.id} className=\"flex justify-between text-sm\">\n                        <span className=\"truncate\">{item.product?.name}</span>\n                        <span>×{item.quantity}</span>\n                      </div>\n                    ))}\n                    {(cartItems as any[]).length > 3 && (\n                      <p className=\"text-xs text-gray-500 text-center\">\n                        +{(cartItems as any[]).length - 3} more items\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Subtotal:</span>\n                      <span>₹{total.toLocaleString('en-IN')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Shipping:</span>\n                      <span>{shipping === 0 ? 'Free' : `₹${shipping}`}</span>\n                    </div>\n                    <div className=\"border-t pt-2\">\n                      <div className=\"flex justify-between font-bold text-lg\">\n                        <span>Total:</span>\n                        <span>₹{finalTotal.toLocaleString('en-IN')}</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Delivery Address */}\n                  {addressData && (\n                    <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Delivery Address</h4>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p className=\"font-medium\">{addressData.customerName}</p>\n                        <p>{addressData.shippingAddress}</p>\n                        <p>PIN: {addressData.pincode}</p>\n                        <p>{addressData.customerPhone}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8637},"client/src/components/razorpay-payment-modal.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { X, Smartphone, QrCode, CreditCard, Wallet, Check, Shield } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { createRazorpayOrder, initializeRazorpay, getPaymentConfig } from '@/lib/razorpay';\n\ninterface RazorpayPaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectMethod: (method: string) => void;\n  total: number;\n  phoneNumber?: string;\n  customerDetails?: any;\n  productDetails?: any;\n}\n\nexport default function RazorpayPaymentModal({ \n  isOpen, \n  onClose, \n  onSelectMethod, \n  total,\n  phoneNumber = \"8860009032\",\n  customerDetails,\n  productDetails\n}: RazorpayPaymentModalProps) {\n  const [selectedMethod, setSelectedMethod] = useState<string>('');\n  const [showCodConfirmation, setShowCodConfirmation] = useState<boolean>(false);\n  const [paymentConfig, setPaymentConfig] = useState<any>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [showPaymentDetails, setShowPaymentDetails] = useState<boolean>(false);\n  \n  useEffect(() => {\n    if (isOpen) {\n      fetchPaymentConfig();\n    }\n  }, [isOpen]);\n  \n  const fetchPaymentConfig = async () => {\n    try {\n      const config = await getPaymentConfig();\n      setPaymentConfig(config);\n    } catch (error) {\n      console.error('Failed to fetch payment config:', error);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  // UPI Apps for detailed UPI selection\n  const upiApps = [\n    { id: 'phonepe', name: 'PhonePe', icon: '📱', color: 'bg-purple-600' },\n    { id: 'googlepay', name: 'Google Pay', icon: '🅖', color: 'bg-blue-600' },\n    { id: 'paytm', name: 'Paytm', icon: '💙', color: 'bg-blue-500' },\n    { id: 'amazonpay', name: 'Amazon Pay', icon: '🅰️', color: 'bg-orange-500' },\n    { id: 'bhim', name: 'BHIM UPI', icon: '🇮🇳', color: 'bg-green-600' },\n    { id: 'upi', name: 'Any UPI App', icon: '📲', color: 'bg-gray-600' }\n  ];\n  \n  // Payment options - UPI, Cards, Net Banking, COD\n  const paymentOptions = [\n    {\n      id: 'upi',\n      title: 'UPI',\n      subtitle: '2 Offers',\n      icon: <Smartphone className=\"h-5 w-5\" />,\n      iconBg: 'bg-green-100',\n      iconColor: 'text-green-600',\n      badgeText: 'Instant',\n      badgeColor: 'text-green-600',\n      bgColor: 'hover:bg-green-50'\n    },\n    {\n      id: 'card',\n      title: 'Cards',\n      subtitle: 'Applicable on all plans',\n      icon: <CreditCard className=\"h-5 w-5\" />,\n      iconBg: 'bg-blue-100',\n      iconColor: 'text-blue-600',\n      badgeText: 'Secure',\n      badgeColor: 'text-blue-600',\n      bgColor: 'hover:bg-blue-50'\n    },\n    {\n      id: 'netbanking',\n      title: 'Netbanking',\n      subtitle: 'Applicable on all plans',\n      icon: <Wallet className=\"h-5 w-5\" />,\n      iconBg: 'bg-indigo-100',\n      iconColor: 'text-indigo-600',\n      badgeText: 'Trusted',\n      badgeColor: 'text-indigo-600',\n      bgColor: 'hover:bg-indigo-50'\n    },\n    {\n      id: 'wallet',\n      title: 'Wallet',\n      subtitle: 'Applicable on all plans',\n      icon: <Wallet className=\"h-5 w-5\" />,\n      iconBg: 'bg-purple-100',\n      iconColor: 'text-purple-600',\n      badgeText: 'Fast',\n      badgeColor: 'text-purple-600',\n      bgColor: 'hover:bg-purple-50'\n    },\n    {\n      id: 'cod',\n      title: 'Cash on Delivery',\n      subtitle: 'Pay when your order arrives',\n      icon: <span className=\"text-orange-600\">💰</span>,\n      iconBg: 'bg-orange-100',\n      iconColor: 'text-orange-600',\n      badgeText: 'Convenient',\n      badgeColor: 'text-orange-600',\n      bgColor: 'hover:bg-orange-50'\n    }\n  ];\n\n  const handleMethodSelect = async (methodId: string) => {\n    setSelectedMethod(methodId);\n    if (methodId === 'cod') {\n      // Show confirmation for COD\n      setTimeout(() => setShowCodConfirmation(true), 300);\n    } else if (methodId === 'upi') {\n      // Directly open Razorpay for UPI payment\n      await initiateRazorpayPayment('upi');\n    } else {\n      // Show expanded view for other payment methods\n      setShowPaymentDetails(true);\n    }\n  };\n  \n  const handleUpiAppSelect = async (upiAppId: string) => {\n    setLoading(true);\n    try {\n      await initiateRazorpayPayment('upi', upiAppId);\n    } catch (error) {\n      console.error('UPI payment failed:', error);\n    }\n    setLoading(false);\n  };\n  \n  const initiateRazorpayPayment = async (paymentMethod: string, upiApp?: string) => {\n    if (!paymentConfig?.enabled) {\n      alert('Payment system is not configured. Please try again later.');\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      // Create order on backend\n      const order = await createRazorpayOrder(total, customerDetails);\n      \n      // Configure Razorpay options\n      const options = {\n        key: paymentConfig.key,\n        amount: order.amount,\n        currency: order.currency,\n        name: 'IndoSaga',\n        description: `Payment for ${productDetails?.name || 'Order'}`,\n        order_id: order.id,\n        handler: async (response: any) => {\n          try {\n            // Verify payment on backend\n            const verification = await fetch('/api/verify-razorpay-payment', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              credentials: 'include',\n              body: JSON.stringify({\n                razorpay_order_id: response.razorpay_order_id,\n                razorpay_payment_id: response.razorpay_payment_id,\n                razorpay_signature: response.razorpay_signature\n              })\n            });\n            \n            if (verification.ok) {\n              onSelectMethod(paymentMethod);\n              onClose();\n            } else {\n              throw new Error('Payment verification failed');\n            }\n          } catch (error) {\n            console.error('Payment verification error:', error);\n            alert('Payment verification failed. Please contact support.');\n          }\n        },\n        prefill: {\n          name: customerDetails?.name || '',\n          email: customerDetails?.email || '',\n          contact: customerDetails?.contact || phoneNumber\n        },\n        notes: {\n          address: customerDetails?.address || ''\n        },\n        theme: {\n          color: '#D97706'\n        },\n        method: {\n          upi: paymentMethod === 'upi',\n          card: paymentMethod === 'upi' || paymentMethod === 'card',\n          netbanking: paymentMethod === 'upi' || paymentMethod === 'netbanking',\n          wallet: paymentMethod === 'upi' || paymentMethod === 'wallet'\n        }\n      };\n      \n      // Open Razorpay checkout\n      await initializeRazorpay(options);\n      \n    } catch (error) {\n      console.error('Payment initialization failed:', error);\n      alert('Payment failed. Please try again.');\n    }\n    setLoading(false);\n  };\n\n  const handleCodConfirmation = () => {\n    setShowCodConfirmation(false);\n    onSelectMethod('cod');\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-60 z-[60] flex items-center justify-center p-4 backdrop-blur-sm pt-24\">\n      <div className={`bg-white rounded-2xl w-full mx-4 relative overflow-hidden shadow-2xl border-0 max-h-[75vh] ${\n        showPaymentDetails ? 'max-w-4xl' : 'max-w-md'\n      }`}>\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 p-4 text-white\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-lg font-bold\">{productDetails?.name || 'Product'}</h2>\n              <p className=\"text-sm opacity-90\">Payment Options</p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"text-white hover:text-gray-200 p-1\"\n            >\n              <X className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Price Summary */}\n        {!showPaymentDetails && (\n          <div className=\"px-4 py-3 bg-gray-50 border-b\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Price Summary</span>\n              <span className=\"text-sm text-blue-600\">View all</span>\n            </div>\n            <div className=\"text-2xl font-bold text-gray-800 mt-1\">₹{total}</div>\n            <div className=\"text-xs text-gray-500 mt-1\">Free</div>\n          </div>\n        )}\n\n        {/* Main Content */}\n        <div className={showPaymentDetails ? \"flex flex-col sm:flex-row max-h-[60vh] overflow-hidden scrollbar-hide\" : \"max-h-[60vh] overflow-y-auto p-4 pb-20 scrollbar-hide\"} style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n          {/* Left Side - Payment Options */}\n          <div className={showPaymentDetails ? \"w-full md:w-1/2 p-4 overflow-y-auto scrollbar-hide\" : \"w-full\"} style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n            {showPaymentDetails && (\n              <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 text-white p-3 rounded-t-lg mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-sm font-semibold\">IndoSaga</h3>\n                  </div>\n                  <button onClick={() => setShowPaymentDetails(false)} className=\"text-white hover:text-gray-200\">\n                    <X className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            )}\n            \n            {showPaymentDetails && (\n              <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 p-3 rounded-lg mb-4 border border-amber-200\">\n                <div className=\"text-sm text-gray-600\">Price Summary</div>\n                <div className=\"text-2xl font-bold text-gray-800\">₹{total}</div>\n                <div className=\"text-xs text-gray-500\">Free</div>\n              </div>\n            )}\n            \n            {showPaymentDetails && (\n              <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 text-white p-2 rounded-lg mb-4 flex items-center\">\n                <span className=\"text-sm\">📞 Using as +91 {phoneNumber || '88650 09032'}</span>\n              </div>\n            )}\n            \n            {showPaymentDetails && (\n              <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 text-white p-2 rounded-lg mb-4 flex items-center\">\n                <span className=\"text-sm\">💳 Offers on Card, Netban...</span>\n              </div>\n            )}\n            \n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-sm font-medium text-gray-700\">Recommended</h3>\n              {!showPaymentDetails && <h3 className=\"text-sm font-medium text-gray-700\">Available Offers</h3>}\n            </div>\n            \n            <div className=\"space-y-2\">\n              {paymentOptions.map((option) => (\n                <div\n                  key={option.id}\n                  onClick={() => !loading && handleMethodSelect(option.id)}\n                  className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer transition-all ${\n                    selectedMethod === option.id \n                      ? 'border-amber-500 bg-amber-50' \n                      : `border-gray-200 ${option.bgColor} hover:border-amber-300`\n                  } ${loading ? 'opacity-50 cursor-not-allowed' : ''}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-8 h-8 ${option.iconBg} rounded flex items-center justify-center`}>\n                      {typeof option.icon === 'string' ? (\n                        <span className=\"text-sm\">{option.icon}</span>\n                      ) : (\n                        <div className={option.iconColor}>{option.icon}</div>\n                      )}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-800 text-sm\">{option.title}</div>\n                      <div className=\"text-xs text-gray-600\">{option.subtitle}</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`text-xs font-medium ${option.badgeColor}`}>\n                      {option.badgeText}\n                    </span>\n                    {selectedMethod === option.id && (\n                      <div className=\"w-4 h-4 bg-amber-500 rounded-full flex items-center justify-center\">\n                        <Check className=\"h-2 w-2 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {loading && (\n              <div className=\"text-center py-4\">\n                <div className=\"inline-flex items-center space-x-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-amber-600\"></div>\n                  <span className=\"text-sm text-gray-600\">Processing payment...</span>\n                </div>\n              </div>\n            )}\n            \n            {/* Back Button for Payment Options */}\n            {!showCodConfirmation && !loading && (\n              <div className=\"mt-6 pt-4 border-t border-gray-200 mb-4\">\n                <Button\n                  onClick={onClose}\n                  variant=\"outline\"\n                  className=\"w-full h-14 px-4 py-3 border-amber-300 text-amber-700 hover:bg-amber-50 transition-all duration-300 font-semibold text-base flex items-center justify-center whitespace-nowrap\"\n                  data-testid=\"button-back-payment-options\"\n                >\n                  ← Back to Product Details\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          {/* Right Side - Payment Details Section */}\n          {showPaymentDetails && (\n            <div className=\"w-full md:w-1/2 p-4 border-l border-t md:border-t-0 overflow-y-auto scrollbar-hide\" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-sm font-medium text-gray-700\">Available Offers</h3>\n                <span className=\"text-sm text-amber-600\">View all</span>\n              </div>\n              \n              {/* Cashback Offer */}\n              <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"w-3 h-3 bg-amber-500 rounded-full\"></span>\n                  <span className=\"text-sm font-medium\">Get ₹10-₹50 assured cashback on any UPI payment above ₹50</span>\n                </div>\n              </div>\n              \n              {/* UPI QR Section */}\n              <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-lg p-4\">\n                <div className=\"text-center\">\n                  <h4 className=\"font-semibold text-gray-800 mb-3\">UPI QR</h4>\n                  \n                  {/* QR Code */}\n                  <div className=\"w-32 h-32 bg-white border-2 border-gray-300 rounded-lg mx-auto mb-3 flex items-center justify-center\">\n                    <QrCode className=\"h-20 w-20 text-gray-600\" />\n                  </div>\n                  \n                  <p className=\"text-sm text-gray-600 mb-4\">Scan the QR code with any UPI App</p>\n                  \n                  {/* UPI Apps Icons */}\n                  <div className=\"flex justify-center space-x-2 mb-4\">\n                    <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold\" title=\"PhonePe\">📱</div>\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs font-bold\" title=\"Google Pay\">🅖</div>\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-bold\" title=\"Paytm\">💙</div>\n                    <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold\" title=\"PhonePe\">🟣</div>\n                    <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white text-xs font-bold\" title=\"BHIM\">🇮🇳</div>\n                  </div>\n                  \n                  <button \n                    className=\"bg-amber-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-amber-700 transition-colors\"\n                    onClick={() => !loading && handleUpiAppSelect('upi')}\n                    disabled={loading}\n                  >\n                    Show QR\n                  </button>\n                  \n                  <div className=\"mt-3\">\n                    <span className=\"text-xs text-gray-500\">2 Offers</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* COD Confirmation Modal */}\n        {showCodConfirmation && (\n          <div className=\"absolute inset-0 bg-white rounded-lg z-10\">\n            {/* Header */}\n            <div className=\"bg-gradient-to-r from-amber-600 to-orange-600 p-4 text-white rounded-t-lg\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-lg font-bold\">Confirm Your Order</h2>\n                <button\n                  onClick={() => setShowCodConfirmation(false)}\n                  className=\"text-white hover:text-gray-200\"\n                >\n                  <X className=\"h-6 w-6\" />\n                </button>\n              </div>\n            </div>\n\n            <div className=\"p-4 pb-2 max-h-[50vh] overflow-y-auto scrollbar-hide\" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>\n              <div className=\"text-center mb-4\">\n                <div className=\"w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">💰</span>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-2\">Cash on Delivery</h3>\n                <p className=\"text-gray-600\">Pay when your furniture is delivered</p>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg p-4 mb-4 border border-amber-200\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-gray-700\">Order Total</span>\n                  <span className=\"text-xl font-bold text-gray-800\">₹{total}</span>\n                </div>\n                <div className=\"flex justify-between items-center text-sm text-gray-600\">\n                  <span>COD Convenience Fee</span>\n                  <span>₹99</span>\n                </div>\n                <hr className=\"my-2\" />\n                <div className=\"flex justify-between items-center font-semibold\">\n                  <span>Total Amount</span>\n                  <span className=\"text-lg\">₹{total + 99}</span>\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-lg p-3 mb-2\">\n                <p className=\"text-sm text-amber-800\">\n                  <strong>Note:</strong> Please keep exact change ready. Inspect your furniture before making payment.\n                </p>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  onClick={() => setShowCodConfirmation(false)}\n                  variant=\"outline\" \n                  className=\"flex-1\"\n                >\n                  Back\n                </Button>\n                <Button\n                  onClick={handleCodConfirmation}\n                  className=\"flex-1 bg-amber-600 hover:bg-amber-700 text-white\"\n                  data-testid=\"button-confirm-cod\"\n                >\n                  Confirm Order\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"px-4 py-3 bg-gradient-to-r from-amber-50 to-orange-50 text-center border-t border-amber-200\">\n          <div className=\"flex items-center justify-center space-x-2\">\n            <Shield className=\"h-3 w-3 text-gray-500\" />\n            <p className=\"text-xs text-amber-600\">Secured by <span className=\"font-semibold text-amber-700\">Razorpay</span></p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20589},"client/src/pages/order-success.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  CheckCircle, \n  Download, \n  ShoppingBag, \n  MapPin, \n  Phone, \n  Mail, \n  Calendar,\n  CreditCard,\n  Package,\n  Truck\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function OrderSuccessPage() {\n  const [location, navigate] = useLocation();\n  const [orderId, setOrderId] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const orderIdParam = params.get('orderId');\n    if (orderIdParam) {\n      setOrderId(orderIdParam);\n      // Show success toast\n      toast({\n        title: \"Order placed successfully!\",\n        description: \"Your order has been confirmed and will be processed soon.\",\n      });\n    } else {\n      navigate('/');\n    }\n  }, [navigate, toast]);\n\n  const { data: order, isLoading, error } = useQuery({\n    queryKey: [`/api/orders/${orderId}`],\n    enabled: !!orderId,\n  });\n\n  // Type guard to ensure order has the required properties\n  const isValidOrder = (order: any): order is {\n    id: string;\n    trackingId?: string;\n    total: string;\n    paymentMethod: string;\n    createdAt: string;\n    customerName: string;\n    customerPhone: string;\n    customerEmail?: string;\n    shippingAddress: string;\n    pincode: string;\n    orderItems?: Array<{\n      id: string;\n      quantity: number;\n      price: string;\n      product?: {\n        name: string;\n        imageUrl?: string;\n      };\n    }>;\n  } => {\n    return order && \n           typeof order === 'object' && \n           order.id && \n           order.total && \n           order.paymentMethod &&\n           order.createdAt &&\n           order.customerName;\n  };\n\n  if (isLoading || !orderId) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-green-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading order details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !order || !isValidOrder(order)) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-rose-100 flex items-center justify-center\">\n        <Card className=\"max-w-md mx-4\">\n          <CardContent className=\"p-6 text-center\">\n            <h1 className=\"text-xl font-bold text-red-600 mb-2\">Order Not Found</h1>\n            <p className=\"text-gray-600 mb-4\">\n              We couldn't find your order details. \n              {error && <span className=\"block text-sm mt-2\">Error: {(error as Error).message}</span>}\n            </p>\n            <Button onClick={() => navigate('/')} className=\"bg-red-600 hover:bg-red-700\">\n              Go to Homepage\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    });\n  };\n\n  const totalAmount = parseFloat(order.total);\n  const codFee = 0; // No COD fees\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 py-8 relative\" \n         style={{ \n           backgroundImage: 'url(/indosaga-logo.png)', \n           backgroundSize: '150px', \n           backgroundRepeat: 'no-repeat', \n           backgroundPosition: 'center center'\n         }}>\n      <div className=\"absolute inset-0 bg-gradient-to-br from-green-50 to-emerald-100 opacity-95\"></div>\n      <div className=\"max-w-4xl mx-auto px-4 relative z-10\">\n        {/* Success Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"bg-gradient-to-r from-orange-500 to-red-500 rounded-lg p-8 text-white mb-6 relative\" \n               style={{ \n                 backgroundImage: 'url(/indosaga-logo.png)', \n                 backgroundSize: '80px', \n                 backgroundRepeat: 'no-repeat', \n                 backgroundPosition: 'center center'\n               }}>\n            <div className=\"absolute inset-0 bg-gradient-to-r from-orange-500 to-red-500 opacity-90 rounded-lg\"></div>\n            <div className=\"relative z-10\">\n            <CheckCircle className=\"w-16 h-16 mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold mb-2\">Order Confirmed!</h1>\n            <p className=\"text-lg opacity-90\">\n              Your {order.paymentMethod === 'cod' ? 'Cash On Delivery' : 'Order'} has been placed successfully\n            </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n          {/* Order Information */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-gray-800 mb-4 flex items-center\">\n                <Package className=\"w-5 h-5 mr-2\" />\n                Order Information\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-orange-500 rounded-full mr-3\"></div>\n                  <div>\n                    <span className=\"font-medium text-gray-700\">Order ID:</span>\n                    <span className=\"ml-2 text-gray-600\">{order.trackingId || order.id}</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Calendar className=\"w-4 h-4 text-gray-500 mr-3 ml-0.5\" />\n                  <div>\n                    <span className=\"font-medium text-gray-700\">Order Date:</span>\n                    <span className=\"ml-2 text-gray-600\">{formatDate(order.createdAt)}</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <CreditCard className=\"w-4 h-4 text-gray-500 mr-3 ml-0.5\" />\n                  <div>\n                    <span className=\"font-medium text-gray-700\">Payment Method:</span>\n                    <span className=\"ml-2 text-orange-600 font-medium\">\n                      {order.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Delivery Information */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-gray-800 mb-4 flex items-center\">\n                <Truck className=\"w-5 h-5 mr-2\" />\n                Delivery Information\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-start\">\n                  <MapPin className=\"w-4 h-4 text-gray-500 mr-3 mt-1\" />\n                  <div>\n                    <p className=\"font-medium text-gray-700\">{order.customerName}</p>\n                    <p className=\"text-gray-600 text-sm\">{order.shippingAddress}</p>\n                    <p className=\"text-gray-600 text-sm\">Pincode: {order.pincode}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <Phone className=\"w-4 h-4 text-gray-500 mr-3\" />\n                  <span className=\"text-gray-600\">{order.customerPhone}</span>\n                </div>\n                \n                {order.customerEmail && (\n                  <div className=\"flex items-center\">\n                    <Mail className=\"w-4 h-4 text-gray-500 mr-3\" />\n                    <span className=\"text-gray-600\">{order.customerEmail}</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Order Items */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-gray-800 mb-4\">Order Items</h3>\n            \n            <div className=\"space-y-4\">\n              {order.orderItems?.map((item: any) => (\n                <div key={item.id} className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center overflow-hidden\">\n                    {item.product?.imageUrl ? (\n                      <img \n                        src={item.product.imageUrl} \n                        alt={item.product.name}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <Package className=\"w-8 h-8 text-gray-400\" />\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-800\">{item.product?.name || 'Product'}</h4>\n                    <p className=\"text-sm text-gray-600\">Quantity: {item.quantity}</p>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-gray-800\">₹{parseFloat(item.price).toFixed(2)}</p>\n                    <p className=\"text-sm text-gray-500\">per item</p>\n                  </div>\n                </div>\n              )) || (\n                <div className=\"text-center py-4 text-gray-500\">\n                  No order items found\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Total Amount */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold text-gray-800 mb-4\">Total Amount</h3>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Subtotal</span>\n                <span className=\"font-medium\">₹{totalAmount.toFixed(2)}</span>\n              </div>\n              \n              \n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Shipping</span>\n                <span className=\"font-medium text-green-600\">Free</span>\n              </div>\n              \n              <hr className=\"my-2\" />\n              \n              <div className=\"flex justify-between text-lg font-bold\">\n                <span>Total</span>\n                <span className=\"text-orange-600\">₹{totalAmount.toFixed(2)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* COD Information */}\n        {order.paymentMethod === 'cod' && (\n          <Card className=\"mb-6 bg-yellow-50 border-yellow-200\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold text-yellow-900 mb-4 flex items-center\">\n                💰 Cash on Delivery Information\n              </h3>\n              \n              <ul className=\"text-sm text-yellow-800 space-y-2\">\n                <li>• Estimated delivery: 5-7 business days</li>\n                <li>• Please keep exact cash ready for payment</li>\n                <li>• Inspect your furniture before making payment</li>\n                <li>• COD orders cannot be cancelled once dispatched</li>\n                <li>• Make sure someone is available at the delivery address</li>\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center relative p-6 rounded-xl\"\n             style={{ \n               backgroundImage: 'url(/indosaga-logo.png)', \n               backgroundSize: '100px', \n               backgroundRepeat: 'no-repeat', \n               backgroundPosition: 'center center'\n             }}>\n          <div className=\"absolute inset-0 bg-white bg-opacity-90 rounded-xl\"></div>\n          <div className=\"relative z-10 flex flex-col sm:flex-row gap-4 justify-center w-full\">\n          <Button \n            variant=\"outline\" \n            className=\"flex items-center\"\n            onClick={() => window.print()}\n            data-testid=\"button-download-receipt\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download Receipt\n          </Button>\n          \n          <Button \n            onClick={() => navigate('/profile#orders')}\n            variant=\"outline\"\n            className=\"flex items-center border-orange-600 text-orange-600 hover:bg-orange-600 hover:text-white\"\n            data-testid=\"button-view-order-history\"\n          >\n            <Package className=\"w-4 h-4 mr-2\" />\n            View Order History\n          </Button>\n          \n          <Button \n            onClick={() => navigate('/')}\n            className=\"bg-orange-600 hover:bg-orange-700 text-white flex items-center\"\n            data-testid=\"button-continue-shopping\"\n          >\n            <ShoppingBag className=\"w-4 h-4 mr-2\" />\n            Continue Shopping\n          </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13255},"client/src/components/customer-details-modal.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { X } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CustomerDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (customerData: any) => void;\n  orderSummary: {\n    items: any[];\n    total: number;\n  };\n}\n\nexport default function CustomerDetailsModal({ \n  isOpen, \n  onClose, \n  onSubmit, \n  orderSummary \n}: CustomerDetailsModalProps) {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    customerPhone: \"\",\n    customerEmail: \"\",\n    shippingAddress: \"\",\n  });\n\n  if (!isOpen) return null;\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.customerName || !formData.customerPhone || !formData.shippingAddress) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (formData.customerPhone.length < 10) {\n      toast({\n        title: \"Invalid Phone\",\n        description: \"Please enter a valid 10-digit phone number.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    onSubmit(formData);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-bold text-orange-600\">Customer Details</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"h-6 w-6\" />\n            </button>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"mb-6\">\n            <h3 className=\"font-semibold mb-3\">Order Summary</h3>\n            {orderSummary.items.map((item: any, index: number) => (\n              <div key={index} className=\"flex justify-between items-center py-2\">\n                <span>{item.product?.name || item.name} x {item.quantity}</span>\n                <span>₹{item.price}</span>\n              </div>\n            ))}\n            <div className=\"border-t pt-2 mt-2\">\n              <div className=\"flex justify-between items-center font-bold\">\n                <span>Total:</span>\n                <span className=\"text-red-600\">₹{orderSummary.total}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Customer Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"customerName\">Full Name *</Label>\n                <Input\n                  id=\"customerName\"\n                  name=\"customerName\"\n                  type=\"text\"\n                  placeholder=\"Enter your full name\"\n                  value={formData.customerName}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"customerPhone\">Phone Number *</Label>\n                <Input\n                  id=\"customerPhone\"\n                  name=\"customerPhone\"\n                  type=\"tel\"\n                  placeholder=\"Enter 10-digit phone number\"\n                  value={formData.customerPhone}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"customerEmail\">Email Address</Label>\n              <Input\n                id=\"customerEmail\"\n                name=\"customerEmail\"\n                type=\"email\"\n                placeholder=\"Enter your email address\"\n                value={formData.customerEmail}\n                onChange={handleInputChange}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"shippingAddress\">Delivery Address *</Label>\n              <Textarea\n                id=\"shippingAddress\"\n                name=\"shippingAddress\"\n                placeholder=\"Enter your complete delivery address\"\n                value={formData.shippingAddress}\n                onChange={handleInputChange}\n                rows={3}\n                required\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n            >\n              Proceed to Payment\n            </Button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5160},"client/src/components/payment-options-modal.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { X, Smartphone, QrCode, CreditCard, Wallet } from 'lucide-react';\n\ninterface PaymentOption {\n  id: string;\n  icon: React.ComponentType<any>;\n  title: string;\n  subtitle: string;\n  badge?: string;\n  badgeColor?: string;\n}\n\ninterface PaymentOptionsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectMethod: (method: string) => void;\n  total: number;\n}\n\nexport default function PaymentOptionsModal({ \n  isOpen, \n  onClose, \n  onSelectMethod, \n  total \n}: PaymentOptionsModalProps) {\n  if (!isOpen) return null;\n\n  const paymentOptions: PaymentOption[] = [\n    {\n      id: 'phonepe',\n      icon: Smartphone,\n      title: 'PhonePe',\n      subtitle: 'Pay securely with PhonePe UPI',\n      badge: 'Secure',\n      badgeColor: 'text-green-600'\n    },\n    {\n      id: 'qr',\n      icon: QrCode,\n      title: 'UPI QR Code',\n      subtitle: 'Scan QR code with any UPI app',\n      badge: 'Instant',\n      badgeColor: 'text-blue-600'\n    },\n    {\n      id: 'gpay',\n      icon: Smartphone,\n      title: 'Google Pay',\n      subtitle: 'Quick payment with Google Pay',\n      badge: 'Fast',\n      badgeColor: 'text-green-600'\n    },\n    {\n      id: 'cod',\n      icon: Wallet,\n      title: 'Cash on Delivery',\n      subtitle: 'Pay when your order arrives',\n      badge: 'Convenient',\n      badgeColor: 'text-orange-600'\n    }\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg max-w-md w-full\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-xl font-bold\">Payment Options</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Total Amount */}\n        <div className=\"px-6 py-4 bg-red-50 border-b\">\n          <div className=\"text-2xl font-bold text-red-600\">₹{total}</div>\n          <div className=\"text-sm text-gray-600\">Choose Payment Method</div>\n        </div>\n\n        {/* Payment Options */}\n        <div className=\"p-6 space-y-3\">\n          {paymentOptions.map((option) => (\n            <div\n              key={option.id}\n              onClick={() => onSelectMethod(option.id)}\n              className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 cursor-pointer transition-colors\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <option.icon className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div>\n                  <div className=\"font-medium\">{option.title}</div>\n                  <div className=\"text-sm text-gray-500\">{option.subtitle}</div>\n                </div>\n              </div>\n              {option.badge && (\n                <div className={`text-sm font-medium ${option.badgeColor}`}>\n                  {option.badge}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3279},"client/src/components/receipt-modal.tsx":{"content":"import React from 'react';\nimport { X, Download, Printer, CheckCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface ReceiptModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  orderData: any;\n}\n\nexport default function ReceiptModal({ isOpen, onClose, orderData }: ReceiptModalProps) {\n  if (!isOpen || !orderData) return null;\n\n  const handleDownloadReceipt = () => {\n    const receiptContent = generateReceiptContent();\n    const blob = new Blob([receiptContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `receipt-${orderData.id}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handlePrintReceipt = () => {\n    const receiptContent = generateReceiptContent();\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(receiptContent);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const generateReceiptContent = () => {\n    const currentDate = new Date().toLocaleDateString('en-IN', {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Receipt - Order #${orderData.id}</title>\n        <style>\n          body { \n            font-family: Arial, sans-serif; \n            max-width: 800px; \n            margin: 0 auto; \n            padding: 20px; \n            position: relative;\n            background-image: url('data:image/svg+xml;base64,${btoa(`\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n                <text x=\"100\" y=\"100\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" text-anchor=\"middle\" fill=\"rgba(139, 69, 19, 0.1)\" transform=\"rotate(-45 100 100)\">\n                  IndoSaga\n                </text>\n              </svg>\n            `)}');\n            background-repeat: repeat;\n            background-position: center;\n            background-size: 200px 200px;\n          }\n          .header { text-align: center; border-bottom: 2px solid #8B4513; padding-bottom: 20px; margin-bottom: 30px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); }\n          .company-name { font-size: 28px; font-weight: bold; color: #8B4513; margin-bottom: 5px; }\n          .company-tagline { color: #666; font-size: 14px; }\n          .receipt-title { font-size: 24px; color: #8B4513; margin: 20px 0; position: relative; z-index: 1; }\n          .order-info { display: flex; justify-content: space-between; margin-bottom: 30px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); padding: 15px; border-radius: 5px; }\n          .info-section { flex: 1; }\n          .info-label { font-weight: bold; color: #8B4513; }\n          .info-value { color: #333; margin-bottom: 10px; }\n          .items-table { width: 100%; border-collapse: collapse; margin-bottom: 30px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); }\n          .items-table th, .items-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n          .items-table th { background-color: #f5f5f5; font-weight: bold; color: #8B4513; }\n          .total-section { text-align: right; margin-top: 20px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); padding: 15px; border-radius: 5px; }\n          .total-line { margin-bottom: 10px; }\n          .grand-total { font-size: 18px; font-weight: bold; color: #8B4513; border-top: 2px solid #8B4513; padding-top: 10px; }\n          .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); border-radius: 5px; }\n          .success-badge { background-color: #d4edda; color: #155724; padding: 10px; border-radius: 5px; text-align: center; margin-bottom: 20px; position: relative; z-index: 1; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <div class=\"company-name\">IndoSaga Furniture</div>\n          <div class=\"company-tagline\">Premium Teak Furniture Collection</div>\n        </div>\n        \n        <div class=\"success-badge\">\n          ✅ Payment Successful - Order Confirmed\n        </div>\n        \n        <h2 class=\"receipt-title\">PAYMENT RECEIPT</h2>\n        \n        <div class=\"order-info\">\n          <div class=\"info-section\">\n            <div class=\"info-label\">Order Details:</div>\n            <div class=\"info-value\">Order ID: ${orderData.id}</div>\n            <div class=\"info-value\">Tracking ID: ${orderData.trackingId || 'N/A'}</div>\n            <div class=\"info-value\">Date: ${currentDate}</div>\n            <div class=\"info-value\">Payment Method: ${orderData.paymentMethod?.toUpperCase() || 'N/A'}</div>\n            <div class=\"info-value\">Payment Status: ${orderData.paymentStatus || 'N/A'}</div>\n          </div>\n          \n          <div class=\"info-section\">\n            <div class=\"info-label\">Customer Details:</div>\n            <div class=\"info-value\">${orderData.customerName}</div>\n            <div class=\"info-value\">${orderData.customerPhone}</div>\n            ${orderData.customerEmail ? `<div class=\"info-value\">${orderData.customerEmail}</div>` : ''}\n            <div class=\"info-value\">${orderData.shippingAddress}</div>\n            <div class=\"info-value\">PIN: ${orderData.pincode}</div>\n          </div>\n        </div>\n        \n        <table class=\"items-table\">\n          <thead>\n            <tr>\n              <th>Item</th>\n              <th>Quantity</th>\n              <th>Unit Price</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${orderData.orderItems?.map((item: any) => `\n              <tr>\n                <td>${item.product?.name || 'Product'}</td>\n                <td>${item.quantity}</td>\n                <td>₹${parseFloat(item.price).toLocaleString('en-IN')}</td>\n                <td>₹${(parseFloat(item.price) * item.quantity).toLocaleString('en-IN')}</td>\n              </tr>\n            `).join('') || '<tr><td colspan=\"4\">No items found</td></tr>'}\n          </tbody>\n        </table>\n        \n        <div class=\"total-section\">\n          <div class=\"total-line\">Subtotal: ₹${parseFloat(orderData.total).toLocaleString('en-IN')}</div>\n          ${orderData.paymentMethod === 'cod' ? '<div class=\"total-line\">COD Fee: ₹99</div>' : ''}\n          <div class=\"grand-total\">Grand Total: ₹${orderData.paymentMethod === 'cod' ? (parseFloat(orderData.total) + 99).toLocaleString('en-IN') : parseFloat(orderData.total).toLocaleString('en-IN')}</div>\n        </div>\n        \n        <div style=\"margin-top: 30px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); padding: 15px; border-radius: 5px;\">\n          <h3 style=\"color: #8B4513; margin-bottom: 10px;\">Important Instructions</h3>\n          <ul style=\"font-size: 12px; margin-bottom: 20px;\">\n            <li>• <strong>Delivery Timeline:</strong> Your furniture will be delivered within 7-14 business days.</li>\n            <li>• <strong>Contact for Queries:</strong> Call +91 88650 09032 or email info@indosaga.com</li>\n            <li>• <strong>Inspection:</strong> Please inspect all items upon delivery before signing receipt.</li>\n            <li>• <strong>Assembly:</strong> Free assembly service included with all furniture items.</li>\n            <li>• <strong>Payment (COD):</strong> Please keep exact change ready at the time of delivery.</li>\n            <li>• <strong>Installation:</strong> Our team will handle complete setup and installation.</li>\n          </ul>\n        </div>\n        \n        <div style=\"margin-top: 20px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); padding: 15px; border-radius: 5px;\">\n          <h3 style=\"color: #8B4513; margin-bottom: 10px;\">Warranty & Guarantee</h3>\n          <ul style=\"font-size: 12px; margin-bottom: 20px;\">\n            <li>• <strong>Structural Warranty:</strong> 10 years warranty on all structural components</li>\n            <li>• <strong>Finish Warranty:</strong> 2 years warranty on wood finish and polish</li>\n            <li>• <strong>Hardware Warranty:</strong> 5 years warranty on hinges, handles, and fittings</li>\n            <li>• <strong>Quality Guarantee:</strong> 100% genuine teak wood with quality certificate</li>\n            <li>• <strong>Replacement:</strong> Free replacement if any manufacturing defect found within 30 days</li>\n            <li>• <strong>Service:</strong> Lifetime maintenance support and servicing available</li>\n            <li>• <strong>Termite Protection:</strong> All products treated with anti-termite chemicals</li>\n          </ul>\n        </div>\n        \n        <div style=\"margin-top: 20px; position: relative; z-index: 1; background: rgba(255, 255, 255, 0.9); padding: 15px; border-radius: 5px;\">\n          <h3 style=\"color: #8B4513; margin-bottom: 10px;\">Privacy Policy & Terms</h3>\n          <ul style=\"font-size: 12px; margin-bottom: 20px;\">\n            <li>• <strong>Data Protection:</strong> Your personal information is secure and encrypted with us</li>\n            <li>• <strong>Privacy:</strong> We do not share your data with third parties without consent</li>\n            <li>• <strong>Communication:</strong> We may contact you for order updates and customer feedback</li>\n            <li>• <strong>Returns:</strong> 15-day return policy for unused items in original condition</li>\n            <li>• <strong>Cancellation:</strong> Orders can be cancelled within 24 hours of placement</li>\n            <li>• <strong>Disputes:</strong> All disputes subject to Pune jurisdiction only</li>\n            <li>• <strong>Terms:</strong> Purchase constitutes acceptance of our terms and conditions</li>\n          </ul>\n        </div>\n        \n        <div class=\"footer\">\n          <div style=\"text-align: center; margin-bottom: 20px; border-top: 2px solid #8B4513; padding-top: 15px;\">\n            <p style=\"font-weight: bold; color: #8B4513;\">IndoSaga Furniture Pvt. Ltd.</p>\n            <p style=\"font-size: 12px;\">123 Furniture Street, Balewadi, Pune - 411045, Maharashtra</p>\n            <p style=\"font-size: 12px;\">Phone: +91 88650 09032 | Email: info@indosaga.com</p>\n            <p style=\"font-size: 12px;\">Website: www.indosaga.com | GSTIN: 27AAAAA0000A1Z5</p>\n            <p style=\"font-size: 12px; color: #D2691E; margin-top: 10px;\"><strong>Thank you for choosing IndoSaga Premium Teak Furniture!</strong></p>\n          </div>\n          <p style=\"margin-top: 20px; font-size: 10px; text-align: center;\">This is a computer-generated receipt.</p>\n        </div>\n      </body>\n      </html>\n    `;\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[95vh] overflow-hidden flex flex-col\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-2xl font-bold text-darkBrown\">Payment Receipt</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto flex-1 receipt-modal-scroll\">\n          {/* Success Message */}\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6 text-center\">\n            <CheckCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n            <h3 className=\"text-lg font-semibold text-green-800\">Payment Successful!</h3>\n            <p className=\"text-green-600\">Your order has been confirmed and is being processed.</p>\n          </div>\n\n          {/* Receipt Content */}\n          <div className=\"border rounded-lg p-6 bg-gray-50 relative\" \n               style={{\n                 backgroundImage: `url(\"data:image/svg+xml;base64,${btoa(`\n                   <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n                     <text x=\"100\" y=\"100\" font-family=\"Arial, sans-serif\" font-size=\"24\" font-weight=\"bold\" text-anchor=\"middle\" fill=\"rgba(139, 69, 19, 0.08)\" transform=\"rotate(-45 100 100)\">\n                       IndoSaga\n                     </text>\n                   </svg>\n                 `)}\")`,\n                 backgroundRepeat: 'repeat',\n                 backgroundPosition: 'center',\n                 backgroundSize: '200px 200px'\n               }}>\n            {/* Company Header */}\n            <div className=\"text-center border-b border-gray-300 pb-4 mb-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <img \n                  src=\"/indosaga-logo.png\" \n                  alt=\"IndoSaga Logo\" \n                  className=\"h-12 w-12 mr-3\"\n                />\n                <h1 className=\"text-3xl font-bold text-darkBrown\">IndoSaga Furniture</h1>\n              </div>\n              <p className=\"text-gray-600\">Premium Teak Furniture Collection</p>\n            </div>\n\n            {/* Order Info */}\n            <div className=\"grid md:grid-cols-2 gap-6 mb-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <div>\n                <h4 className=\"font-semibold text-darkBrown mb-3\">Order Details</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div>Order ID: <span className=\"font-medium\">{orderData.id}</span></div>\n                  {orderData.trackingId && (\n                    <div>Tracking ID: <span className=\"font-medium\">{orderData.trackingId}</span></div>\n                  )}\n                  <div>Date: <span className=\"font-medium\">{new Date().toLocaleDateString('en-IN')}</span></div>\n                  <div>Payment Method: <span className=\"font-medium\">{orderData.paymentMethod?.toUpperCase()}</span></div>\n                  <div>Payment Status: <span className=\"font-medium\">{orderData.paymentStatus}</span></div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold text-darkBrown mb-3\">Customer Details</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div>{orderData.customerName}</div>\n                  <div>{orderData.customerPhone}</div>\n                  {orderData.customerEmail && <div>{orderData.customerEmail}</div>}\n                  <div>{orderData.shippingAddress}</div>\n                  <div>PIN: {orderData.pincode}</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Items Table */}\n            <div className=\"mb-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-darkBrown mb-3\">Order Items</h4>\n              <div className=\"border rounded-lg overflow-hidden\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-100\">\n                    <tr>\n                      <th className=\"text-left p-3 font-semibold\">Item</th>\n                      <th className=\"text-left p-3 font-semibold\">Qty</th>\n                      <th className=\"text-left p-3 font-semibold\">Price</th>\n                      <th className=\"text-left p-3 font-semibold\">Total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderData.orderItems?.map((item: any, index: number) => (\n                      <tr key={index} className=\"border-t\">\n                        <td className=\"p-3\">{item.product?.name || 'Product'}</td>\n                        <td className=\"p-3\">{item.quantity}</td>\n                        <td className=\"p-3\">₹{parseFloat(item.price).toLocaleString('en-IN')}</td>\n                        <td className=\"p-3\">₹{(parseFloat(item.price) * item.quantity).toLocaleString('en-IN')}</td>\n                      </tr>\n                    )) || (\n                      <tr>\n                        <td colSpan={4} className=\"p-3 text-center text-gray-500\">No items found</td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            {/* Total */}\n            <div className=\"text-right relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <div className=\"text-lg\">\n                Subtotal: <span className=\"font-semibold\">₹{parseFloat(orderData.total).toLocaleString('en-IN')}</span>\n              </div>\n              {orderData.paymentMethod === 'cod' && (\n                <div className=\"text-lg\">\n                  COD Fee: <span className=\"font-semibold\">₹99</span>\n                </div>\n              )}\n              <div className=\"text-xl font-bold text-darkBrown border-t border-gray-300 pt-2 mt-2\">\n                Grand Total: ₹{orderData.paymentMethod === 'cod' \n                  ? (parseFloat(orderData.total) + 99).toLocaleString('en-IN')\n                  : parseFloat(orderData.total).toLocaleString('en-IN')\n                }\n              </div>\n            </div>\n\n            {/* Customer Instructions */}\n            <div className=\"mt-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-darkBrown mb-3\">Important Instructions</h4>\n              <div className=\"space-y-2 text-sm text-gray-700\">\n                <p>• <strong>Delivery Timeline:</strong> Your furniture will be delivered within 7-14 business days.</p>\n                <p>• <strong>Contact for Queries:</strong> Call +91 88650 09032 or email info@indosaga.com</p>\n                <p>• <strong>Inspection:</strong> Please inspect all items upon delivery before signing receipt.</p>\n                <p>• <strong>Assembly:</strong> Free assembly service included with all furniture items.</p>\n                <p>• <strong>Payment (COD):</strong> Please keep exact change ready at the time of delivery.</p>\n                <p>• <strong>Installation:</strong> Our team will handle complete setup and installation.</p>\n              </div>\n            </div>\n\n            {/* Warranty & Guarantee */}\n            <div className=\"mt-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-darkBrown mb-3\">Warranty & Guarantee</h4>\n              <div className=\"space-y-2 text-sm text-gray-700\">\n                <p>• <strong>Structural Warranty:</strong> 10 years warranty on all structural components</p>\n                <p>• <strong>Finish Warranty:</strong> 2 years warranty on wood finish and polish</p>\n                <p>• <strong>Hardware Warranty:</strong> 5 years warranty on hinges, handles, and fittings</p>\n                <p>• <strong>Quality Guarantee:</strong> 100% genuine teak wood with quality certificate</p>\n                <p>• <strong>Replacement:</strong> Free replacement if any manufacturing defect found within 30 days</p>\n                <p>• <strong>Service:</strong> Lifetime maintenance support and servicing available</p>\n                <p>• <strong>Termite Protection:</strong> All products treated with anti-termite chemicals</p>\n              </div>\n            </div>\n\n            {/* Privacy Policy & Terms */}\n            <div className=\"mt-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4\">\n              <h4 className=\"font-semibold text-darkBrown mb-3\">Privacy Policy & Terms</h4>\n              <div className=\"space-y-2 text-sm text-gray-700\">\n                <p>• <strong>Data Protection:</strong> Your personal information is secure and encrypted with us</p>\n                <p>• <strong>Privacy:</strong> We do not share your data with third parties without consent</p>\n                <p>• <strong>Communication:</strong> We may contact you for order updates and customer feedback</p>\n                <p>• <strong>Returns:</strong> 15-day return policy for unused items in original condition</p>\n                <p>• <strong>Cancellation:</strong> Orders can be cancelled within 24 hours of placement</p>\n                <p>• <strong>Disputes:</strong> All disputes subject to Pune jurisdiction only</p>\n                <p>• <strong>Terms:</strong> Purchase constitutes acceptance of our terms and conditions</p>\n              </div>\n            </div>\n\n            {/* Company Contact Information */}\n            <div className=\"mt-6 relative z-10 bg-white bg-opacity-90 rounded-lg p-4 border-t-2 border-darkBrown\">\n              <div className=\"text-center space-y-1 text-sm text-gray-600\">\n                <p className=\"font-semibold text-darkBrown\">IndoSaga Furniture Pvt. Ltd.</p>\n                <p>123 Furniture Street, Balewadi, Pune - 411045, Maharashtra</p>\n                <p>Phone: +91 88650 09032 | Email: info@indosaga.com</p>\n                <p>Website: www.indosaga.com | GSTIN: 27AAAAA0000A1Z5</p>\n                <p className=\"text-xs mt-2 text-amber-600 font-medium\">Thank you for choosing IndoSaga Premium Teak Furniture!</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-between items-center p-6 border-t bg-gray-50 flex-shrink-0\">\n          <p className=\"text-sm text-gray-600\">\n            Receipt generated on {new Date().toLocaleDateString('en-IN')}\n          </p>\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={handlePrintReceipt}\n              variant=\"outline\"\n              className=\"border-primary text-primary hover:bg-primary hover:text-white\"\n            >\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Print\n            </Button>\n            <Button\n              onClick={handleDownloadReceipt}\n              className=\"bg-primary text-white hover:bg-primary/90\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22301},"client/src/components/real-time-payment.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, CheckCircle, XCircle, CreditCard, Smartphone, Building, Truck } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { createRazorpayOrder, verifyPayment } from '@/lib/razorpay';\n\ninterface RealTimePaymentProps {\n  amount: number;\n  customerDetails: {\n    name: string;\n    email: string;\n    contact: string;\n    address: string;\n  };\n  orderItems: any[];\n  onPaymentSuccess: (paymentData: any) => void;\n  onPaymentFailure: (error: string) => void;\n  onCancel: () => void;\n}\n\nexport default function RealTimePayment({ \n  amount, \n  customerDetails, \n  orderItems,\n  onPaymentSuccess, \n  onPaymentFailure,\n  onCancel \n}: RealTimePaymentProps) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentStatus, setPaymentStatus] = useState<'idle' | 'creating' | 'processing' | 'verifying' | 'success' | 'failed'>('idle');\n  const [razorpayConfig, setRazorpayConfig] = useState<any>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Fetch Razorpay configuration\n    fetch('/api/payment/config')\n      .then(res => res.json())\n      .then(config => {\n        setRazorpayConfig(config);\n        if (!config.enabled) {\n          toast({\n            title: \"Payment Service Unavailable\",\n            description: \"Payment service is not configured. Please try again later.\",\n            variant: \"destructive\",\n          });\n        }\n      })\n      .catch(err => {\n        console.error('Failed to load payment config:', err);\n        toast({\n          title: \"Configuration Error\",\n          description: \"Failed to load payment configuration.\",\n          variant: \"destructive\",\n        });\n      });\n  }, [toast]);\n\n  const handlePayment = async (method: 'card' | 'upi' | 'netbanking') => {\n    if (!razorpayConfig?.enabled) {\n      toast({\n        title: \"Payment Unavailable\",\n        description: \"Payment service is not configured.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    setPaymentStatus('creating');\n\n    try {\n      // Create Razorpay order\n      const razorpayOrder = await createRazorpayOrder(amount, customerDetails);\n      console.log('Razorpay order created:', razorpayOrder);\n\n      setPaymentStatus('processing');\n\n      // Wait for Razorpay SDK to load\n      const Razorpay = await (window as any).razorpayLoaded;\n      \n      if (!Razorpay) {\n        throw new Error('Razorpay SDK not loaded');\n      }\n\n      const options = {\n        key: razorpayConfig.key,\n        amount: razorpayOrder.amount,\n        currency: razorpayOrder.currency,\n        name: 'IndoSaga Furniture',\n        description: 'Premium Teak Wood Furniture',\n        order_id: razorpayOrder.id,\n        prefill: {\n          name: customerDetails.name,\n          email: customerDetails.email,\n          contact: customerDetails.contact,\n        },\n        notes: {\n          address: customerDetails.address,\n          items: JSON.stringify(orderItems.map(item => ({\n            name: item.product?.name || 'Product',\n            quantity: item.quantity,\n            price: item.price\n          })))\n        },\n        theme: {\n          color: '#dc2626' // Red theme matching IndoSaga\n        },\n        method: {\n          card: method === 'card',\n          upi: method === 'upi',\n          netbanking: method === 'netbanking',\n          wallet: false,\n        },\n        handler: async (response: any) => {\n          console.log('Payment response:', response);\n          setPaymentStatus('verifying');\n          \n          try {\n            // Verify payment with backend\n            const verificationResult = await verifyPayment({\n              razorpay_order_id: response.razorpay_order_id,\n              razorpay_payment_id: response.razorpay_payment_id,\n              razorpay_signature: response.razorpay_signature\n            });\n\n            if (verificationResult.success) {\n              setPaymentStatus('success');\n              toast({\n                title: \"Payment Successful!\",\n                description: \"Your order has been confirmed.\",\n                variant: \"default\",\n              });\n              \n              onPaymentSuccess({\n                razorpayOrderId: response.razorpay_order_id,\n                razorpayPaymentId: response.razorpay_payment_id,\n                razorpaySignature: response.razorpay_signature,\n                paymentMethod: method,\n                paymentStatus: 'paid',\n                amount: amount\n              });\n            } else {\n              throw new Error(verificationResult.message || 'Payment verification failed');\n            }\n          } catch (verifyError: any) {\n            console.error('Payment verification failed:', verifyError);\n            setPaymentStatus('failed');\n            toast({\n              title: \"Payment Verification Failed\",\n              description: verifyError.message || \"Please contact support.\",\n              variant: \"destructive\",\n            });\n            onPaymentFailure(verifyError.message || 'Payment verification failed');\n          }\n        },\n        modal: {\n          ondismiss: () => {\n            console.log('Payment modal dismissed');\n            setPaymentStatus('idle');\n            setIsProcessing(false);\n            onCancel();\n          }\n        }\n      };\n\n      const razorpayInstance = new Razorpay(options);\n      \n      razorpayInstance.on('payment.failed', (response: any) => {\n        console.error('Payment failed:', response.error);\n        setPaymentStatus('failed');\n        setIsProcessing(false);\n        toast({\n          title: \"Payment Failed\",\n          description: response.error.description || \"Payment could not be processed.\",\n          variant: \"destructive\",\n        });\n        onPaymentFailure(response.error.description || 'Payment failed');\n      });\n\n      razorpayInstance.open();\n\n    } catch (error: any) {\n      console.error('Payment initiation error:', error);\n      setPaymentStatus('failed');\n      setIsProcessing(false);\n      toast({\n        title: \"Payment Error\",\n        description: error.message || \"Failed to initiate payment.\",\n        variant: \"destructive\",\n      });\n      onPaymentFailure(error.message || 'Payment initiation failed');\n    }\n  };\n\n  const handleCOD = () => {\n    toast({\n      title: \"COD Order Confirmed\",\n      description: \"Your order will be delivered. Pay when you receive it.\",\n      variant: \"default\",\n    });\n    \n    onPaymentSuccess({\n      paymentMethod: 'cod',\n      paymentStatus: 'pending',\n      amount: amount // No COD fee\n    });\n  };\n\n  return (\n    <Card className=\"w-full rounded-2xl shadow-2xl border-0 bg-gradient-to-br from-white via-warmWhite to-white\">\n      <CardHeader className=\"text-center p-6 bg-gradient-to-r from-amber-50 to-orange-50 border-b border-amber-100\">\n        <CardTitle className=\"flex items-center justify-center gap-2 text-xl text-darkBrown font-display\">\n          {paymentStatus === 'success' ? (\n            <CheckCircle className=\"h-6 w-6 text-green-600\" />\n          ) : paymentStatus === 'failed' ? (\n            <XCircle className=\"h-6 w-6 text-red-600\" />\n          ) : (\n            <CreditCard className=\"h-6 w-6 text-primary\" />\n          )}\n          Choose Payment Method\n        </CardTitle>\n        <div className=\"mt-4 p-4 bg-gradient-to-r from-amber-100 to-orange-100 rounded-xl\">\n          <div className=\"text-2xl font-bold text-primary\">₹{amount.toFixed(2)}</div>\n          <div className=\"text-sm text-gray-600\">Total Amount</div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-6 space-y-4\">\n\n        {paymentStatus === 'idle' && (\n          <div className=\"space-y-3\">\n            {/* UPI Payment */}\n            <Button\n              onClick={() => handlePayment('upi')}\n              disabled={isProcessing || !razorpayConfig?.enabled}\n              className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-blue-50 to-blue-100 hover:from-blue-100 hover:to-blue-200 border border-blue-200 rounded-xl text-left transition-all duration-300\"\n              variant=\"ghost\"\n              data-testid=\"button-pay-upi\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                  <Smartphone className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <div className=\"font-semibold text-darkBrown\">UPI Payment</div>\n                  <div className=\"text-sm text-gray-600\">PhonePe, GooglePay, Paytm</div>\n                </div>\n              </div>\n              <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">Instant</div>\n            </Button>\n\n            {/* Credit/Debit Card */}\n            <Button\n              onClick={() => handlePayment('card')}\n              disabled={isProcessing || !razorpayConfig?.enabled}\n              className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-purple-100 hover:from-purple-100 hover:to-purple-200 border border-purple-200 rounded-xl text-left transition-all duration-300\"\n              variant=\"ghost\"\n              data-testid=\"button-pay-card\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n                  <CreditCard className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <div className=\"font-semibold text-darkBrown\">Credit/Debit Card</div>\n                  <div className=\"text-sm text-gray-600\">Visa, MasterCard, RuPay</div>\n                </div>\n              </div>\n              <div className=\"text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full font-medium\">Secure</div>\n            </Button>\n\n            {/* Net Banking */}\n            <Button\n              onClick={() => handlePayment('netbanking')}\n              disabled={isProcessing || !razorpayConfig?.enabled}\n              className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-green-100 hover:from-green-100 hover:to-green-200 border border-green-200 rounded-xl text-left transition-all duration-300\"\n              variant=\"ghost\"\n              data-testid=\"button-pay-netbanking\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center\">\n                  <Building className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <div className=\"font-semibold text-darkBrown\">Net Banking</div>\n                  <div className=\"text-sm text-gray-600\">All major banks supported</div>\n                </div>\n              </div>\n              <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">Trusted</div>\n            </Button>\n\n            {/* Cash on Delivery */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-200\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or</span>\n              </div>\n            </div>\n            \n            <Button\n              onClick={handleCOD}\n              className=\"w-full h-14 flex items-center justify-between p-4 bg-gradient-to-r from-orange-50 to-amber-100 hover:from-orange-100 hover:to-amber-200 border border-orange-200 rounded-xl text-left transition-all duration-300\"\n              variant=\"ghost\"\n              data-testid=\"button-pay-cod\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n                  <Truck className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <div className=\"font-semibold text-darkBrown\">Cash on Delivery</div>\n                  <div className=\"text-sm text-gray-600\">Pay when you receive</div>\n                </div>\n              </div>\n              <div className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full font-medium\">Free</div>\n            </Button>\n          </div>\n        )}\n\n        {paymentStatus !== 'idle' && paymentStatus !== 'success' && paymentStatus !== 'failed' && (\n          <div className=\"text-center space-y-2\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto text-blue-600\" />\n            <div className=\"text-sm text-gray-600\">\n              {paymentStatus === 'creating' && 'Creating payment order...'}\n              {paymentStatus === 'processing' && 'Processing payment...'}\n              {paymentStatus === 'verifying' && 'Verifying payment...'}\n            </div>\n          </div>\n        )}\n\n        {paymentStatus === 'success' && (\n          <div className=\"text-center space-y-2\">\n            <CheckCircle className=\"h-12 w-12 text-green-600 mx-auto\" />\n            <div className=\"text-lg font-semibold text-green-700\">Payment Successful!</div>\n            <div className=\"text-sm text-gray-600\">Your order is being processed.</div>\n          </div>\n        )}\n\n        {paymentStatus === 'failed' && (\n          <div className=\"text-center space-y-2\">\n            <XCircle className=\"h-12 w-12 text-red-600 mx-auto\" />\n            <div className=\"text-lg font-semibold text-red-700\">Payment Failed</div>\n            <div className=\"text-sm text-gray-600\">Please try again or contact support.</div>\n            <Button\n              onClick={() => {\n                setPaymentStatus('idle');\n                setIsProcessing(false);\n              }}\n              className=\"mt-2 w-full h-12 bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 hover:from-amber-700 hover:via-orange-700 hover:to-amber-800 text-white font-semibold shadow-lg rounded-xl\"\n            >\n              Try Again\n            </Button>\n          </div>\n        )}\n\n        {!razorpayConfig?.enabled && (\n          <div className=\"text-center text-sm text-gray-500 p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n            Payment service is currently unavailable. Please try again later.\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14691},"client/src/pages/checkout.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { ShoppingBag, Truck, CreditCard, MapPin, User } from 'lucide-react';\nimport RealTimePayment from '@/components/real-time-payment';\nimport { createFinalOrder } from '@/lib/razorpay';\n\nexport default function CheckoutPage() {\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form state\n  const [customerDetails, setCustomerDetails] = useState({\n    name: '',\n    email: '',\n    contact: '',\n    address: '',\n    pincode: ''\n  });\n\n  // Checkout state\n  const [checkoutStep, setCheckoutStep] = useState<'details' | 'payment' | 'success'>('details');\n  const [orderItems, setOrderItems] = useState<any[]>([]);\n  const [orderTotal, setOrderTotal] = useState(0);\n  const [isDirectCheckout, setIsDirectCheckout] = useState(false);\n\n  // Load cart items\n  const { data: cartItems = [], isLoading: cartLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    enabled: !isDirectCheckout\n  });\n\n  // Load user profile and redirect if not authenticated\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!userLoading && !user) {\n      window.location.href = '/login';\n    }\n  }, [user, userLoading]);\n\n  // Create final order mutation\n  const createOrderMutation = useMutation({\n    mutationFn: createFinalOrder,\n    onSuccess: (order) => {\n      toast({\n        title: \"Order Created Successfully!\",\n        description: `Order #${order.id.slice(-8)} has been placed.`,\n        variant: \"default\",\n      });\n      \n      // Clear local storage and cart\n      localStorage.removeItem('checkoutType');\n      localStorage.removeItem('buyNowItem');\n      localStorage.removeItem('checkoutItems');\n      localStorage.removeItem('localCart'); // Clear local cart as well\n      \n      // Invalidate cart queries to refresh cart state\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      \n      // Navigate to success page\n      navigate(`/order-success?orderId=${order.id}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Order Creation Failed\",\n        description: error.message || \"Failed to create order. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  useEffect(() => {\n    // Check checkout type and load appropriate data - only once on mount\n    const checkoutType = localStorage.getItem('checkoutType');\n    const buyNowData = localStorage.getItem('buyNowItem');\n    const cartData = localStorage.getItem('checkoutItems');\n\n    if (checkoutType === 'direct' && buyNowData) {\n      const item = JSON.parse(buyNowData);\n      setIsDirectCheckout(true);\n      setOrderItems([item]);\n      setOrderTotal(item.total);\n    } else if (checkoutType === 'cart' && cartData) {\n      const items = JSON.parse(cartData);\n      \n      // Recalculate prices to apply deal prices\n      const updatedItems = items.map((item: any) => {\n        const now = new Date();\n        const dealExpiry = item.product.dealExpiry ? new Date(item.product.dealExpiry) : null;\n        const isValidDeal = item.product.isDeal && item.product.dealPrice && (!dealExpiry || dealExpiry > now);\n        \n        const effectivePrice = isValidDeal ? parseFloat(item.product.dealPrice) : parseFloat(item.product.price);\n        \n        return {\n          ...item,\n          price: effectivePrice,\n          total: effectivePrice * item.quantity\n        };\n      });\n      \n      setOrderItems(updatedItems);\n      setOrderTotal(updatedItems.reduce((sum: number, item: any) => sum + item.total, 0));\n    }\n    // Don't fall back to current cart items to prevent loops\n  }, []); // Empty dependency array - run only on mount\n\n  // Load cart items only when needed and no checkout data exists\n  useEffect(() => {\n    if (orderItems.length === 0 && !isDirectCheckout && Array.isArray(cartItems) && cartItems.length > 0) {\n      const items = (cartItems as any[]).map((item: any) => {\n        // Use deal price if product is on deal and deal hasn't expired\n        const now = new Date();\n        const dealExpiry = item.product.dealExpiry ? new Date(item.product.dealExpiry) : null;\n        const isValidDeal = item.product.isDeal && item.product.dealPrice && (!dealExpiry || dealExpiry > now);\n        \n        const effectivePrice = isValidDeal ? parseFloat(item.product.dealPrice) : parseFloat(item.product.price);\n        \n        return {\n          product: item.product,\n          quantity: item.quantity,\n          price: effectivePrice,\n          total: effectivePrice * item.quantity\n        };\n      });\n      setOrderItems(items);\n      setOrderTotal(items.reduce((sum: number, item: any) => sum + item.total, 0));\n    }\n  }, [cartItems, orderItems.length, isDirectCheckout]);\n\n  // User details effect - only run when user changes and fields are empty\n  useEffect(() => {\n    if (user && typeof user === 'object' && (!customerDetails.name || !customerDetails.email)) {\n      const userObj = user as any;\n      setCustomerDetails(prev => ({\n        ...prev,\n        name: prev.name || userObj.name || `${userObj.firstName || ''} ${userObj.lastName || ''}`.trim(),\n        email: prev.email || userObj.email || '',\n      }));\n    }\n  }, [user, customerDetails.name, customerDetails.email]); // Only depend on user and empty fields\n\n  const handleDetailsSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate required fields\n    if (!customerDetails.name || !customerDetails.contact || !customerDetails.address || !customerDetails.pincode) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setCheckoutStep('payment');\n  };\n\n  const handlePaymentSuccess = async (paymentData: any) => {\n    const orderData = {\n      orderItems: orderItems.map(item => ({\n        productId: item.product.id,\n        quantity: item.quantity,\n        price: item.price.toString()\n      })),\n      customerName: customerDetails.name,\n      customerPhone: customerDetails.contact,\n      customerEmail: customerDetails.email,\n      shippingAddress: customerDetails.address,\n      pincode: customerDetails.pincode,\n      total: (paymentData.paymentMethod === 'cod' ? paymentData.amount : orderTotal).toString(),\n      ...paymentData\n    };\n\n    createOrderMutation.mutate(orderData);\n  };\n\n  const handlePaymentFailure = (error: string) => {\n    toast({\n      title: \"Payment Failed\",\n      description: error,\n      variant: \"destructive\",\n    });\n    // Stay on payment step for retry\n  };\n\n  if (orderItems.length === 0 && !cartLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center p-8\">\n            <ShoppingBag className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">No Items to Checkout</h2>\n            <p className=\"text-gray-600 mb-4\">Your cart is empty or checkout session expired.</p>\n            <Button onClick={() => navigate('/')} className=\"w-full\">\n              Continue Shopping\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warmWhite\">\n      <div className=\"max-w-4xl mx-auto p-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-darkBrown mb-2\">Secure Checkout</h1>\n          <p className=\"text-primary\">Complete your order with real-time payment processing</p>\n        </div>\n\n        {/* Progress indicator */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <div className={`flex items-center space-x-2 ${checkoutStep === 'details' ? 'text-primary' : 'text-green-600'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                checkoutStep === 'details' ? 'wood-texture text-white' : 'bg-green-600 text-white'\n              }`}>\n                {checkoutStep === 'details' ? '1' : '✓'}\n              </div>\n              <span className=\"font-medium\">Details</span>\n            </div>\n            \n            <div className=\"w-16 h-0.5 bg-primary/30\"></div>\n            \n            <div className={`flex items-center space-x-2 ${\n              checkoutStep === 'payment' ? 'text-primary' : \n              checkoutStep === 'success' ? 'text-green-600' : 'text-gray-400'\n            }`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                checkoutStep === 'payment' ? 'wood-texture text-white' :\n                checkoutStep === 'success' ? 'bg-green-600 text-white' : 'bg-gray-300 text-gray-600'\n              }`}>\n                {checkoutStep === 'success' ? '✓' : '2'}\n              </div>\n              <span className=\"font-medium\">Payment</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {/* Order Summary */}\n          <div className=\"md:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingBag className=\"h-5 w-5\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {orderItems.map((item, index) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                    <img \n                      src={item.product.imageUrl || '/placeholder-furniture.jpg'} \n                      alt={item.product.name}\n                      className=\"w-12 h-12 object-cover rounded\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"font-medium text-sm truncate\">{item.product.name}</div>\n                      <div className=\"text-xs text-gray-600\">Qty: {item.quantity}</div>\n                    </div>\n                    <div className=\"font-semibold\">₹{item.total.toFixed(2)}</div>\n                  </div>\n                ))}\n                \n                <div className=\"border-t pt-4 space-y-2\">\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Subtotal:</span>\n                    <span>₹{orderTotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-gray-600\">\n                    <span>Shipping:</span>\n                    <span className=\"text-green-600\">Free</span>\n                  </div>\n                  <div className=\"flex justify-between text-xl font-bold border-t pt-2\">\n                    <span>Total:</span>\n                    <span>₹{orderTotal.toFixed(2)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"md:col-span-2\">\n            {checkoutStep === 'details' && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <User className=\"h-5 w-5\" />\n                    Customer Details\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleDetailsSubmit} className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"name\">Full Name *</Label>\n                        <Input\n                          id=\"name\"\n                          value={customerDetails.name}\n                          onChange={(e) => setCustomerDetails(prev => ({ ...prev, name: e.target.value }))}\n                          placeholder=\"Enter your full name\"\n                          required\n                          data-testid=\"input-customer-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"contact\">Phone Number *</Label>\n                        <Input\n                          id=\"contact\"\n                          value={customerDetails.contact}\n                          onChange={(e) => setCustomerDetails(prev => ({ ...prev, contact: e.target.value }))}\n                          placeholder=\"Enter your phone number\"\n                          required\n                          data-testid=\"input-customer-phone\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"email\">Email Address</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={customerDetails.email}\n                        onChange={(e) => setCustomerDetails(prev => ({ ...prev, email: e.target.value }))}\n                        placeholder=\"Enter your email (optional)\"\n                        data-testid=\"input-customer-email\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"address\">Shipping Address *</Label>\n                      <Textarea\n                        id=\"address\"\n                        value={customerDetails.address}\n                        onChange={(e) => setCustomerDetails(prev => ({ ...prev, address: e.target.value }))}\n                        placeholder=\"Enter your complete shipping address\"\n                        rows={3}\n                        required\n                        data-testid=\"input-customer-address\"\n                      />\n                    </div>\n\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"pincode\">PIN Code *</Label>\n                        <Input\n                          id=\"pincode\"\n                          value={customerDetails.pincode}\n                          onChange={(e) => setCustomerDetails(prev => ({ ...prev, pincode: e.target.value }))}\n                          placeholder=\"Enter PIN code\"\n                          required\n                          data-testid=\"input-customer-pincode\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => window.history.back()}\n                        className=\"flex-1 border-primary text-primary hover:bg-primary/10\"\n                      >\n                        Back\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"flex-1 wood-texture text-white hover:opacity-90 transition-opacity\"\n                        data-testid=\"button-continue-to-payment\"\n                      >\n                        Continue to Payment\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n\n            {checkoutStep === 'payment' && (\n              <div className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Truck className=\"h-5 w-5\" />\n                      Delivery Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"bg-gray-50 rounded-lg p-4 space-y-2\">\n                      <div><strong>Name:</strong> {customerDetails.name}</div>\n                      <div><strong>Phone:</strong> {customerDetails.contact}</div>\n                      {customerDetails.email && <div><strong>Email:</strong> {customerDetails.email}</div>}\n                      <div><strong>Address:</strong> {customerDetails.address}</div>\n                      <div><strong>PIN Code:</strong> {customerDetails.pincode}</div>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      className=\"mt-4 border-primary text-primary hover:bg-primary/10\"\n                      onClick={() => setCheckoutStep('details')}\n                    >\n                      Edit Details\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <RealTimePayment\n                  amount={orderTotal}\n                  customerDetails={customerDetails}\n                  orderItems={orderItems}\n                  onPaymentSuccess={handlePaymentSuccess}\n                  onPaymentFailure={handlePaymentFailure}\n                  onCancel={() => setCheckoutStep('details')}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17691},"client/src/components/auth-redirect-handler.tsx":{"content":"import { useEffect } from 'react';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AuthRedirectHandler() {\n  const { toast } = useToast();\n  \n  // Check authentication status\n  const { data: user } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    // Only run if user is authenticated\n    if (!user) return;\n\n    // Check for pending actions after login\n    const pendingAction = sessionStorage.getItem('pendingAction');\n    const pendingProductId = sessionStorage.getItem('pendingProductId');\n    const pendingQuantity = sessionStorage.getItem('pendingQuantity');\n\n    if (pendingAction && pendingProductId) {\n      // Clear the pending action first\n      sessionStorage.removeItem('pendingAction');\n      sessionStorage.removeItem('pendingProductId');\n      sessionStorage.removeItem('pendingQuantity');\n\n      if (pendingAction === 'add-to-cart') {\n        // Add the product to cart\n        handleAddToCart(pendingProductId, parseInt(pendingQuantity || '1'));\n      } else if (pendingAction === 'buy-now') {\n        // Redirect to the specific product for buy now\n        // We could also trigger the buy now flow directly\n        toast({\n          title: \"Welcome back!\",\n          description: \"You can now proceed with your purchase.\",\n        });\n      }\n    }\n  }, [user]);\n\n  const handleAddToCart = async (productId: string, quantity: number = 1) => {\n    try {\n      await apiRequest(\"POST\", \"/api/cart\", { \n        productId,\n        quantity\n      });\n      \n      toast({\n        title: \"Added to cart\",\n        description: \"Product has been added to your cart successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // This component doesn't render anything\n  return null;\n}","size_bytes":2015},"client/src/components/auth-test-button.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AuthTestButton() {\n  const { toast } = useToast();\n\n  const testLogin = () => {\n    toast({\n      title: \"Redirecting to login...\",\n      description: \"Testing Auth0 authentication\",\n    });\n    \n    // Direct redirect to login\n    window.location.href = '/login';\n  };\n\n  return (\n    <Button \n      onClick={testLogin}\n      className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg\"\n    >\n      Test Auth0 Login\n    </Button>\n  );\n}","size_bytes":570},"client/src/components/auth0-provider.tsx":{"content":"import { Auth0Provider } from '@auth0/auth0-react';\nimport { auth0Config } from '@/lib/auth0-config';\n\ninterface Auth0ProviderWrapperProps {\n  children: React.ReactNode;\n}\n\nexport default function Auth0ProviderWrapper({ children }: Auth0ProviderWrapperProps) {\n  return (\n    <Auth0Provider\n      domain={auth0Config.domain}\n      clientId={auth0Config.clientId}\n      authorizationParams={{\n        redirect_uri: auth0Config.redirectUri,\n        audience: auth0Config.audience,\n        scope: auth0Config.scope\n      }}\n      cacheLocation=\"localstorage\"\n    >\n      {children}\n    </Auth0Provider>\n  );\n}","size_bytes":606},"client/src/hooks/use-demo-auth.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface DemoUser {\n  sub: string;\n  name: string;\n  email: string;\n  given_name: string;\n  family_name: string;\n  picture: string;\n  provider: string;\n}\n\nexport function useDemoAuth() {\n  const [user, setUser] = useState<DemoUser | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const demoUserData = localStorage.getItem('demoUser');\n    if (demoUserData) {\n      const parsedUser = JSON.parse(demoUserData);\n      setUser(parsedUser);\n      setIsAuthenticated(true);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const logout = () => {\n    localStorage.removeItem('demoUser');\n    setUser(null);\n    setIsAuthenticated(false);\n    window.location.href = '/';\n  };\n\n  return {\n    user,\n    isAuthenticated,\n    isLoading,\n    logout\n  };\n}","size_bytes":894},"client/src/lib/auth0-config.ts":{"content":"// Auth0 configuration using environment variables\nconst domain = import.meta.env.VITE_AUTH0_DOMAIN || 'dev-xi31sc33g5dzke7b.us.auth0.com';\nconst clientId = import.meta.env.VITE_AUTH0_CLIENT_ID || 'PjevU1GrQZxrQtSxA1osNDAWVvDkxg4R';\n\nexport const auth0Config = {\n  domain,\n  clientId,\n  redirectUri: typeof window !== 'undefined' ? `${window.location.origin}/callback` : '',\n  audience: domain ? `https://${domain}/api/v2/` : '',\n  scope: 'openid profile email'\n};\n\n// Check if Auth0 is properly configured\nexport const isAuth0Configured = () => {\n  return auth0Config.domain && \n         auth0Config.clientId &&\n         auth0Config.domain !== '' && \n         auth0Config.clientId !== '';\n};","size_bytes":692},"client/src/pages/callback.tsx":{"content":"import { useAuth0 } from '@auth0/auth0-react';\nimport { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport default function Callback() {\n  const { isAuthenticated, isLoading, error, user } = useAuth0();\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleAddToCart = async (productId: string, quantity: number = 1) => {\n    try {\n      const response = await fetch('/api/cart', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ productId, quantity })\n      });\n      \n      if (response.ok) {\n        queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n        toast({\n          title: 'Added to Cart!',\n          description: 'Product has been added to your cart successfully.',\n        });\n        // Navigate to cart after successful addition\n        navigate('/cart');\n      } else {\n        throw new Error('Failed to add to cart');\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to add product to cart. Please try again.',\n        variant: 'destructive',\n      });\n      navigate('/');\n    }\n  };\n\n  const handleAppointmentBooking = async (appointmentData: any) => {\n    try {\n      const appointmentDateTime = new Date(`${appointmentData.appointmentDate}T${appointmentData.appointmentTime}`);\n      \n      const response = await apiRequest('POST', '/api/appointments', {\n        ...appointmentData,\n        appointmentDate: appointmentDateTime.toISOString(),\n      });\n      const result = await response.json();\n      \n      toast({\n        title: '✅ Your appointment has been successfully booked!',\n        description: `Appointment scheduled for ${new Date(appointmentData.appointmentDate).toLocaleDateString()} at ${appointmentData.appointmentTime}`,\n      });\n      \n      // Store appointment success data and navigate to home with a success indicator\n      sessionStorage.setItem('appointmentSuccess', JSON.stringify({\n        id: result.id,\n        customerName: appointmentData.customerName,\n        date: appointmentData.appointmentDate,\n        time: appointmentData.appointmentTime,\n        type: appointmentData.meetingType,\n        email: appointmentData.customerEmail\n      }));\n      \n      navigate('/');\n    } catch (error) {\n      toast({\n        title: 'Authentication required to confirm your appointment',\n        description: 'Please try booking again.',\n        variant: 'destructive',\n      });\n      navigate('/');\n    }\n  };\n\n  const handleSupportTicketSubmission = async (ticketData: any) => {\n    try {\n      const response = await apiRequest('POST', '/api/support/tickets', ticketData);\n      const result = await response.json();\n      \n      toast({\n        title: '✅ Support ticket created successfully!',\n        description: `Your ticket #${result.ticketId} has been submitted. We'll respond within 24 hours.`,\n      });\n      \n      // Store ticket success data and navigate to home with a success indicator\n      sessionStorage.setItem('ticketSuccess', JSON.stringify({\n        ticketId: result.ticketId,\n        customerName: ticketData.customerName,\n        subject: ticketData.subject,\n        priority: ticketData.priority,\n        email: ticketData.customerEmail\n      }));\n      \n      navigate('/');\n    } catch (error) {\n      toast({\n        title: 'Authentication required to submit your support ticket',\n        description: 'Please try submitting again.',\n        variant: 'destructive',\n      });\n      navigate('/');\n    }\n  };\n\n  useEffect(() => {\n    const handleAuth = async () => {\n      if (!isLoading) {\n        if (error) {\n          console.error('Auth0 error:', error);\n          navigate('/login');\n          return;\n        }\n\n        if (isAuthenticated && user) {\n          // Handle pending actions after authentication\n          const pendingAction = sessionStorage.getItem('pendingAction');\n          const pendingProductId = sessionStorage.getItem('pendingProductId');\n          const pendingQuantity = sessionStorage.getItem('pendingQuantity');\n          const pendingAppointmentData = sessionStorage.getItem('pendingAppointmentData');\n          const pendingSupportTicketData = sessionStorage.getItem('pendingSupportTicketData');\n          const returnUrl = sessionStorage.getItem('returnUrl');\n          \n          if (pendingAction === 'book-appointment' && pendingAppointmentData) {\n            sessionStorage.removeItem('pendingAction');\n            sessionStorage.removeItem('pendingAppointmentData');\n            \n            const appointmentData = JSON.parse(pendingAppointmentData);\n            await handleAppointmentBooking(appointmentData);\n          } else if (pendingAction === 'submit-ticket' && pendingSupportTicketData) {\n            sessionStorage.removeItem('pendingAction');\n            sessionStorage.removeItem('pendingSupportTicketData');\n            \n            const ticketData = JSON.parse(pendingSupportTicketData);\n            await handleSupportTicketSubmission(ticketData);\n          } else if (pendingAction && pendingProductId) {\n            sessionStorage.removeItem('pendingAction');\n            sessionStorage.removeItem('pendingProductId');\n            sessionStorage.removeItem('pendingQuantity');\n            \n            if (pendingAction === 'buy-now') {\n              // Store flag to trigger buy-now flow after redirect to product page\n              sessionStorage.setItem('triggerBuyNow', 'true');\n              navigate(`/product/${pendingProductId}`);\n            } else if (pendingAction === 'add-to-cart') {\n              // Store flag to trigger add-to-cart after redirect to product page\n              sessionStorage.setItem('triggerAddToCart', 'true');\n              navigate(`/product/${pendingProductId}`);\n            }\n          } else if (pendingAction === 'checkout') {\n            sessionStorage.removeItem('pendingAction');\n            navigate('/address');\n          } else if (returnUrl) {\n            sessionStorage.removeItem('returnUrl');\n            navigate(returnUrl);\n          } else {\n            navigate('/');\n          }\n        }\n      }\n    };\n    \n    handleAuth();\n  }, [isAuthenticated, isLoading, error, user, navigate]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-warmWhite flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <h2 className=\"text-xl font-semibold text-darkBrown mb-2\">Completing Authentication</h2>\n          <p className=\"text-gray-600\">Please wait while we sign you in...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-warmWhite flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-500 text-6xl mb-4\">⚠️</div>\n          <h2 className=\"text-xl font-semibold text-darkBrown mb-2\">Authentication Error</h2>\n          <p className=\"text-gray-600 mb-4\">There was a problem signing you in.</p>\n          <button\n            onClick={() => navigate('/login')}\n            className=\"bg-primary text-white px-6 py-2 rounded-lg hover:bg-primary/90 transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warmWhite flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n        <p className=\"text-gray-600\">Redirecting...</p>\n      </div>\n    </div>\n  );\n}","size_bytes":7916},"client/src/pages/login.tsx":{"content":"import { useAuth0 } from '@auth0/auth0-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Mail, LogIn, ArrowLeft, X } from 'lucide-react';\nimport { FaGoogle, FaFacebook } from 'react-icons/fa';\nimport { Link } from 'wouter';\nimport { useEffect, useState } from 'react';\nimport { auth0Config, isAuth0Configured } from '@/lib/auth0-config';\n\nexport default function Login() {\n  const { loginWithRedirect, isAuthenticated, user, isLoading } = useAuth0();\n  const [showGoogleConfirm, setShowGoogleConfirm] = useState(false);\n  const [showFacebookConfirm, setShowFacebookConfirm] = useState(false);\n  const [showEmailConfirm, setShowEmailConfirm] = useState(false);\n\n  // Handle redirect after login - Let callback.tsx handle this instead\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Redirect to callback to handle pending actions properly\n      window.location.href = '/callback';\n    }\n  }, [isAuthenticated, user]);\n\n  const handleGoogleLogin = () => {\n    setShowGoogleConfirm(true);\n  };\n\n  const handleFacebookLogin = () => {\n    setShowFacebookConfirm(true);\n  };\n\n  const handleEmailLogin = () => {\n    setShowEmailConfirm(true);\n  };\n\n  const proceedWithGoogleLogin = () => {\n    setShowGoogleConfirm(false);\n    loginWithRedirect({\n      authorizationParams: {\n        connection: 'google-oauth2'\n      },\n      appState: {\n        returnTo: window.location.origin\n      }\n    });\n  };\n\n  const proceedWithFacebookLogin = () => {\n    setShowFacebookConfirm(false);\n    loginWithRedirect({\n      appState: {\n        returnTo: window.location.origin\n      }\n    });\n  };\n\n  const proceedWithEmailLogin = () => {\n    setShowEmailConfirm(false);\n    loginWithRedirect({\n      appState: {\n        returnTo: window.location.origin\n      }\n    });\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-warmWhite flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-warmWhite flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Redirecting...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-warmWhite flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-xl border-0 bg-white\">\n        <CardHeader className=\"text-center pb-2\">\n          <div className=\"mx-auto mb-4\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center\">\n              <LogIn className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-display text-darkBrown\">\n            Welcome to IndoSaga\n          </CardTitle>\n          <p className=\"text-gray-600 mt-2\">\n            Sign in to continue your furniture shopping experience\n          </p>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <Button\n            onClick={handleGoogleLogin}\n            className=\"w-full bg-red-500 hover:bg-red-600 text-white py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors\"\n            data-testid=\"button-google-login\"\n          >\n            <FaGoogle className=\"w-5 h-5\" />\n            <span>Continue with Google</span>\n          </Button>\n\n          <Button\n            onClick={handleFacebookLogin}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors\"\n            data-testid=\"button-facebook-login\"\n          >\n            <FaFacebook className=\"w-5 h-5\" />\n            <span>Continue with Facebook</span>\n          </Button>\n\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-300\" />\n            </div>\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-2 bg-white text-gray-500\">Or</span>\n            </div>\n          </div>\n\n          <Button\n            onClick={handleEmailLogin}\n            variant=\"outline\"\n            className=\"w-full border-2 border-primary text-primary hover:bg-primary hover:text-white py-3 rounded-lg flex items-center justify-center space-x-2 transition-colors\"\n            data-testid=\"button-email-login\"\n          >\n            <Mail className=\"w-5 h-5\" />\n            <span>Continue with Email</span>\n          </Button>\n\n          <div className=\"text-center mt-6\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"text-gray-600 hover:text-primary\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"text-xs text-gray-500 text-center mt-4\">\n            By continuing, you agree to our Terms of Service and Privacy Policy\n          </div>\n          \n          {/* Real Authentication Notice */}\n          <div className=\"text-center mt-4 p-3 bg-green-50 rounded-lg border border-green-200\">\n            <p className=\"text-sm text-green-700 font-medium\">Real Authentication Enabled</p>\n            <p className=\"text-xs text-green-600 mt-1\">\n              Secure login with your Google, Facebook, or email account\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Google Login Confirmation Dialog */}\n      <Dialog open={showGoogleConfirm} onOpenChange={setShowGoogleConfirm}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <FaGoogle className=\"w-5 h-5 text-red-500\" />\n              <span>Continue with Google</span>\n            </DialogTitle>\n            <DialogDescription>\n              Confirm your Google authentication to access your IndoSaga account\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">\n              You will be redirected to Google to sign in with your Google account. This will allow you to securely access your IndoSaga account.\n            </p>\n            <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>Note:</strong> If you want to cancel after being redirected, simply close the login window or click your browser's back button to return to IndoSaga.\n              </p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={proceedWithGoogleLogin}\n                className=\"flex-1 bg-red-500 hover:bg-red-600 text-white\"\n              >\n                Continue to Google\n              </Button>\n              <Button\n                onClick={() => setShowGoogleConfirm(false)}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Facebook Login Confirmation Dialog */}\n      <Dialog open={showFacebookConfirm} onOpenChange={setShowFacebookConfirm}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <FaFacebook className=\"w-5 h-5 text-blue-600\" />\n              <span>Continue with Facebook</span>\n            </DialogTitle>\n            <DialogDescription>\n              Confirm your Facebook authentication to access your IndoSaga account\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">\n              You will be redirected to Facebook to sign in with your Facebook account. This will allow you to securely access your IndoSaga account.\n            </p>\n            <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>Note:</strong> If you want to cancel after being redirected, simply close the login window or click your browser's back button to return to IndoSaga.\n              </p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={proceedWithFacebookLogin}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                Continue to Facebook\n              </Button>\n              <Button\n                onClick={() => setShowFacebookConfirm(false)}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Email Login Confirmation Dialog */}\n      <Dialog open={showEmailConfirm} onOpenChange={setShowEmailConfirm}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Mail className=\"w-5 h-5 text-primary\" />\n              <span>Continue with Email</span>\n            </DialogTitle>\n            <DialogDescription>\n              Confirm your email authentication to access your IndoSaga account\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">\n              You will be redirected to our secure login page where you can sign in with your email address or create a new account.\n            </p>\n            <div className=\"bg-blue-50 p-3 rounded-lg border border-blue-200\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>Note:</strong> If you want to cancel after being redirected, simply close the login window or click your browser's back button to return to IndoSaga.\n              </p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={proceedWithEmailLogin}\n                className=\"flex-1 bg-primary hover:bg-primary/90 text-white\"\n              >\n                Continue with Email\n              </Button>\n              <Button\n                onClick={() => setShowEmailConfirm(false)}\n                variant=\"outline\"\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":11090},"server/run-seed.ts":{"content":"#!/usr/bin/env tsx\n\nimport { checkAndSeed } from \"./seed\";\n\nconsole.log(\"Running database seed script...\");\n\ncheckAndSeed()\n  .then(() => {\n    console.log(\"Seed script completed successfully!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Seed script failed:\", error);\n    process.exit(1);\n  });","size_bytes":319},"client/src/pages/product-detail.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, useLocation, Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useQuery as useAuthQuery } from \"@tanstack/react-query\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogTrigger, DialogTitle } from \"@/components/ui/dialog\";\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  ArrowLeft, \n  Heart, \n  ShoppingCart, \n  Share2, \n  Star, \n  Check, \n  Truck, \n  Shield, \n  Award,\n  Info,\n  Package,\n  Ruler,\n  Palette,\n  Zap,\n  RotateCw,\n  MousePointer,\n  Eye,\n  Play,\n  Pause,\n  Camera,\n  X,\n  ChevronLeft,\n  ChevronRight\n} from \"lucide-react\";\nimport RazorpayPaymentModal from \"@/components/razorpay-payment-modal\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function ProductDetail() {\n  const params = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedQuantity, setSelectedQuantity] = useState(1);\n  const [isWishlisted, setIsWishlisted] = useState(false);\n  \n  // Customer details and Buy Now flow states\n  const [showCustomerForm, setShowCustomerForm] = useState(false);\n  const [showPaymentOptions, setShowPaymentOptions] = useState(false);\n  const [showOrderConfirm, setShowOrderConfirm] = useState(false);\n  const [customerDetails, setCustomerDetails] = useState({\n    name: '',\n    email: '',\n    contact: '',\n    address: '',\n    city: '',\n    district: '',\n    state: '',\n    pincode: ''\n  });\n  \n  // Review form states\n  const [showReviewForm, setShowReviewForm] = useState(false);\n  const [reviewRating, setReviewRating] = useState(5);\n  const [reviewName, setReviewName] = useState(\"\");\n  const [reviewComment, setReviewComment] = useState(\"\");\n  const [reviewImages, setReviewImages] = useState<File[]>([]);\n  const [reviewImagePreviews, setReviewImagePreviews] = useState<string[]>([]);\n  const [uploadingImages, setUploadingImages] = useState(false);\n  const [selectedImageModal, setSelectedImageModal] = useState<string | null>(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [allReviewImages, setAllReviewImages] = useState<string[]>([]);\n\n  // Q&A form states\n  const [showQuestionForm, setShowQuestionForm] = useState(false);\n  const [questionText, setQuestionText] = useState(\"\");\n  const [questionName, setQuestionName] = useState(\"\");\n  \n  // Admin answer states\n  const [showAdminView, setShowAdminView] = useState(false);\n  const [answeringQuestionId, setAnsweringQuestionId] = useState<string | null>(null);\n  const [answerText, setAnswerText] = useState(\"\");\n  \n  // Zoom effect states\n  const [isZooming, setIsZooming] = useState(false);\n  const [zoomPosition, setZoomPosition] = useState({ x: 0, y: 0 });\n  \n  // 360-degree view states\n  const [is360View, setIs360View] = useState(false);\n  const [currentAngle, setCurrentAngle] = useState(0);\n  const [isRotating, setIsRotating] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStartX, setDragStartX] = useState(0);\n  const [showInstructions, setShowInstructions] = useState(false);\n\n  const productId = params.id;\n\n  const { data: product, isLoading, error } = useQuery<Product>({\n    queryKey: [`/api/products/${productId}`],\n    enabled: !!productId,\n  });\n\n  // Fetch product reviews\n  const { data: reviews = [], refetch: refetchReviews } = useQuery<any[]>({\n    queryKey: [`/api/products/${productId}/reviews`],\n    enabled: !!productId,\n  });\n\n  // Collect all review images when reviews change\n  useEffect(() => {\n    const allImages: string[] = [];\n    reviews.forEach((review: any) => {\n      if (review.images && review.images.length > 0) {\n        allImages.push(...review.images);\n      }\n    });\n    setAllReviewImages(allImages);\n  }, [reviews]);\n\n  // Navigation functions for image gallery\n  const handlePreviousImage = () => {\n    setCurrentImageIndex((prev) => (prev > 0 ? prev - 1 : allReviewImages.length - 1));\n  };\n\n  const handleNextImage = () => {\n    setCurrentImageIndex((prev) => (prev < allReviewImages.length - 1 ? prev + 1 : 0));\n  };\n\n  const openImageModal = (imageUrl: string) => {\n    const imageIndex = allReviewImages.findIndex(img => img === imageUrl);\n    setCurrentImageIndex(imageIndex >= 0 ? imageIndex : 0);\n    setSelectedImageModal(imageUrl);\n  };\n\n  // Fetch product questions\n  const { data: questions = [], refetch: refetchQuestions } = useQuery<any[]>({\n    queryKey: [`/api/products/${productId}/questions`],\n    enabled: !!productId,\n  });\n\n  // Image upload handler\n  const handleImageUpload = (files: FileList | null) => {\n    if (!files) return;\n    \n    const selectedFiles = Array.from(files);\n    const maxImages = 5;\n    \n    if (selectedFiles.length > maxImages) {\n      toast({\n        title: \"Too Many Images\",\n        description: `Please select up to ${maxImages} images only.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Check file sizes (max 5MB each)\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    const validFiles = selectedFiles.filter(file => {\n      if (file.size > maxSize) {\n        toast({\n          title: \"File Too Large\",\n          description: `${file.name} is too large. Please select images under 5MB.`,\n          variant: \"destructive\",\n        });\n        return false;\n      }\n      return true;\n    });\n    \n    setReviewImages(prev => [...prev, ...validFiles].slice(0, maxImages));\n    \n    // Create preview URLs\n    validFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setReviewImagePreviews(prev => [...prev, e.target?.result as string]);\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n  \n  // Remove image from upload\n  const removeImage = (index: number) => {\n    setReviewImages(prev => prev.filter((_, i) => i !== index));\n    setReviewImagePreviews(prev => prev.filter((_, i) => i !== index));\n  };\n  \n  // Upload images to server\n  const uploadImages = async (): Promise<string[]> => {\n    if (reviewImages.length === 0) return [];\n    \n    setUploadingImages(true);\n    try {\n      const formData = new FormData();\n      reviewImages.forEach(file => {\n        formData.append('images', file);\n      });\n      \n      const response = await fetch(`/api/products/${productId}/reviews/upload-images`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) throw new Error('Failed to upload images');\n      const result = await response.json();\n      return result.imageUrls || [];\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: \"Failed to upload images. Please try again.\",\n        variant: \"destructive\",\n      });\n      return [];\n    } finally {\n      setUploadingImages(false);\n    }\n  };\n\n  // Create review mutation\n  const createReviewMutation = useMutation({\n    mutationFn: async (reviewData: { userName: string; rating: number; comment: string; images?: string[] }) => {\n      const response = await fetch(`/api/products/${productId}/reviews`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(reviewData),\n      });\n      if (!response.ok) throw new Error('Failed to create review');\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchReviews();\n      setShowReviewForm(false);\n      setReviewName(\"\");\n      setReviewComment(\"\");\n      setReviewRating(5);\n      setReviewImages([]);\n      setReviewImagePreviews([]);\n      toast({\n        title: \"Review Submitted!\",\n        description: \"Thank you for your feedback. Your review has been added.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create question mutation\n  const createQuestionMutation = useMutation({\n    mutationFn: async (questionData: { userName: string; question: string }) => {\n      const response = await fetch(`/api/products/${productId}/questions`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(questionData),\n      });\n      if (!response.ok) throw new Error('Failed to create question');\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchQuestions();\n      setShowQuestionForm(false);\n      setQuestionName(\"\");\n      setQuestionText(\"\");\n      toast({\n        title: \"Question Submitted\",\n        description: \"Your question has been submitted and will be answered soon!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit question. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Answer question mutation (for admins)\n  const answerQuestionMutation = useMutation({\n    mutationFn: async ({ questionId, answer }: { questionId: string; answer: string }) => {\n      const response = await fetch(`/api/products/questions/${questionId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ answer }),\n      });\n      if (!response.ok) throw new Error('Failed to answer question');\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchQuestions();\n      setAnsweringQuestionId(null);\n      setAnswerText(\"\");\n      toast({\n        title: \"Answer Submitted\",\n        description: \"Your answer has been posted and customers can now see it!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit answer. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check if product is in wishlist\n  const { data: wishlistItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/wishlist\"],\n  });\n\n  // Check if current product is in wishlist\n  useEffect(() => {\n    if (product && wishlistItems && Array.isArray(wishlistItems)) {\n      const isInWishlist = wishlistItems.some((item: any) => item.productId === product.id);\n      setIsWishlisted(isInWishlist);\n    }\n  }, [product, wishlistItems]);\n\n  // Generate 360-degree view angles (simulated with rotation transforms)\n  const total360Images = 36; // 10-degree increments\n  const angleIncrement = 360 / total360Images;\n\n  // Zoom effect handlers\n  const handleImageMouseEnter = () => {\n    if (!is360View) {\n      setIsZooming(true);\n    }\n  };\n\n  const handleImageMouseLeave = () => {\n    setIsZooming(false);\n  };\n\n  const handleImageMouseMove = (e: React.MouseEvent) => {\n    if (!isZooming || is360View) return;\n    \n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = ((e.clientX - rect.left) / rect.width) * 100;\n    const y = ((e.clientY - rect.top) / rect.height) * 100;\n    \n    setZoomPosition({ x, y });\n  };\n\n  // 360-degree view handlers\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (!is360View) return;\n    setIsDragging(true);\n    setDragStartX(e.clientX);\n    setIsRotating(false);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!is360View || !isDragging) return;\n    e.preventDefault();\n    const deltaX = e.clientX - dragStartX;\n    const sensitivity = 2;\n    const newAngle = (currentAngle + (deltaX / sensitivity)) % 360;\n    setCurrentAngle(newAngle < 0 ? newAngle + 360 : newAngle);\n    setDragStartX(e.clientX);\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  const toggleAutoRotation = () => {\n    setIsRotating(!isRotating);\n  };\n\n  const toggle360View = () => {\n    const newIs360View = !is360View;\n    setIs360View(newIs360View);\n    setCurrentAngle(0);\n    setIsRotating(false);\n    \n    if (newIs360View) {\n      setShowInstructions(true);\n      // Auto-hide instructions after 4 seconds\n      setTimeout(() => {\n        setShowInstructions(false);\n      }, 4000);\n    } else {\n      setShowInstructions(false);\n    }\n  };\n\n  // Touch event handlers for mobile support\n  const handleTouchStart = (e: React.TouchEvent) => {\n    if (!is360View) return;\n    setIsDragging(true);\n    setDragStartX(e.touches[0].clientX);\n    setIsRotating(false);\n    setShowInstructions(false);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!is360View || !isDragging) return;\n    e.preventDefault();\n    const deltaX = e.touches[0].clientX - dragStartX;\n    const sensitivity = 2;\n    const newAngle = (currentAngle + (deltaX / sensitivity)) % 360;\n    setCurrentAngle(newAngle < 0 ? newAngle + 360 : newAngle);\n    setDragStartX(e.touches[0].clientX);\n  };\n\n  const handleTouchEnd = () => {\n    setIsDragging(false);\n  };\n\n  // Auto-rotation effect\n  useEffect(() => {\n    if (!is360View || !isRotating || isDragging) return;\n    \n    const interval = setInterval(() => {\n      setCurrentAngle((prev) => (prev + angleIncrement) % 360);\n    }, 100); // Smooth rotation\n\n    return () => clearInterval(interval);\n  }, [is360View, isRotating, isDragging, angleIncrement]);\n\n  // Wishlist mutations\n  const addToWishlistMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        const response = await fetch(\"/api/wishlist\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ productId: product?.id }),\n        });\n        if (!response.ok) {\n          if (response.status === 401) {\n            throw new Error(\"Authentication required\");\n          }\n          throw new Error(\"Failed to add to wishlist\");\n        }\n        return response.json();\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // User not logged in - use local storage for wishlist\n          const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n          \n          // Check if already in wishlist\n          const alreadyExists = localWishlist.some((item: any) => item.productId === product?.id);\n          if (!alreadyExists) {\n            localWishlist.push({\n              productId: product?.id,\n              product: product\n            });\n            localStorage.setItem('localWishlist', JSON.stringify(localWishlist));\n          }\n          \n          // Dispatch custom event to update other components\n          window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      setIsWishlisted(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      // Also dispatch the custom event to update localStorage-based components\n      window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n      toast({\n        title: \"Added to Wishlist!\",\n        description: `${product?.name} has been added to your wishlist.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to wishlist. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async () => {\n      try {\n        const response = await fetch(`/api/wishlist/${product?.id}`, {\n          method: \"DELETE\",\n        });\n        if (!response.ok) {\n          if (response.status === 401) {\n            throw new Error(\"Authentication required\");\n          }\n          throw new Error(\"Failed to remove from wishlist\");\n        }\n        return response.json();\n      } catch (error: any) {\n        if (error.message?.includes('Authentication required') || error.message?.includes('401')) {\n          // User not logged in - use local storage for wishlist\n          const localWishlist = JSON.parse(localStorage.getItem('localWishlist') || '[]');\n          const updatedWishlist = localWishlist.filter((item: any) => item.productId !== product?.id);\n          localStorage.setItem('localWishlist', JSON.stringify(updatedWishlist));\n          \n          // Dispatch custom event to update other components\n          window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n          return;\n        }\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      setIsWishlisted(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      // Also dispatch the custom event to update localStorage-based components\n      window.dispatchEvent(new CustomEvent('localWishlistUpdate'));\n      toast({\n        title: \"Removed from Wishlist\",\n        description: `${product?.name} has been removed from your wishlist.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item from wishlist. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleWishlist = () => {\n    if (!product) return;\n    \n    if (isWishlisted) {\n      removeFromWishlistMutation.mutate();\n    } else {\n      addToWishlistMutation.mutate();\n    }\n  };\n\n  // Use Auth0 for authentication status\n  const { isAuthenticated, user } = useAuth0();\n  \n  // Additional states for Buy Now flow\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');\n  const [orderDetails, setOrderDetails] = useState<any>(null);\n  \n  // Check authentication status from API as fallback\n  const { data: apiUser } = useAuthQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n  \n  // Use Auth0 user if available, otherwise fallback to API user\n  const currentUser = user || apiUser;\n\n  // Check for pending actions after authentication\n  useEffect(() => {\n    if (isAuthenticated && currentUser) {\n      const triggerBuyNow = sessionStorage.getItem('triggerBuyNow');\n      const triggerAddToCart = sessionStorage.getItem('triggerAddToCart');\n      \n      console.log('Auth effect triggered:', { triggerBuyNow, triggerAddToCart, isAuthenticated, currentUser });\n      \n      if (triggerBuyNow === 'true') {\n        console.log('Triggering buy now flow...');\n        sessionStorage.removeItem('triggerBuyNow');\n        // Trigger buy now flow - pre-fill customer details and go directly to payment\n        setTimeout(() => {\n          console.log('About to call handleDirectToPayment');\n          handleDirectToPayment();\n        }, 1000); // Increased delay to ensure everything is loaded\n      } else if (triggerAddToCart === 'true') {\n        sessionStorage.removeItem('triggerAddToCart');\n        // Trigger add to cart\n        setTimeout(() => {\n          handleAddToCart();\n        }, 500);\n      }\n    }\n  }, [isAuthenticated, currentUser]);\n\n  const handleAddToCart = async () => {\n    if (!product) return;\n    \n    // Check if user is authenticated\n    if (!isAuthenticated || !currentUser) {\n      // Store pending action for after login\n      sessionStorage.setItem('pendingAction', 'add-to-cart');\n      sessionStorage.setItem('pendingProductId', product.id);\n      sessionStorage.setItem('pendingQuantity', selectedQuantity.toString());\n      sessionStorage.setItem('returnUrl', window.location.pathname);\n      \n      // Redirect to login\n      window.location.href = '/login';\n      return;\n    }\n    \n    try {\n      const response = await fetch(\"/api/cart\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          productId: product.id,\n          quantity: selectedQuantity,\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Added to Cart!\",\n          description: `${product.name} has been added to your cart.`,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      } else {\n        throw new Error('Failed to add to cart');\n      }\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add item to cart. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle Buy Now flow\n  const handleBuyNow = () => {\n    // Pre-fill user information if available\n    if (currentUser && (!customerDetails.name || !customerDetails.email)) {\n      setCustomerDetails({\n        ...customerDetails,\n        name: (currentUser as any).name || `${(currentUser as any).given_name || ''} ${(currentUser as any).family_name || ''}`.trim(),\n        email: (currentUser as any).email || '',\n      });\n    }\n    \n    // Show customer details form for authenticated users\n    setShowCustomerForm(true);\n  };\n\n  // Handle direct to payment after authentication\n  const handleDirectToPayment = () => {\n    console.log('handleDirectToPayment called', { currentUser, isAuthenticated });\n    \n    // Pre-fill user information from authenticated user\n    if (currentUser) {\n      const updatedDetails = {\n        name: (currentUser as any).name || `${(currentUser as any).given_name || ''} ${(currentUser as any).family_name || ''}`.trim(),\n        email: (currentUser as any).email || '',\n        contact: '',\n        address: '',\n        city: '',\n        district: '',\n        state: '',\n        pincode: ''\n      };\n      console.log('Setting customer details and showing payment options', updatedDetails);\n      setCustomerDetails(updatedDetails);\n    }\n    \n    // Go directly to payment options\n    setShowPaymentOptions(true);\n    console.log('Payment options should now be visible');\n  };\n\n  // Handle customer form submission\n  const handleCustomerFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!customerDetails.name || !customerDetails.email || !customerDetails.contact || !customerDetails.address || !customerDetails.city || !customerDetails.district || !customerDetails.state || !customerDetails.pincode) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowCustomerForm(false);\n    // Show payment options modal\n    setShowPaymentOptions(true);\n  };\n\n  // Handle payment method selection\n  const handlePaymentMethod = (method: string) => {\n    setSelectedPaymentMethod(method);\n  };\n\n  const handleShare = async () => {\n    if (!product) return;\n    \n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: product.name,\n          text: `Check out this amazing ${product.name} from IndoSaga Furniture`,\n          url: window.location.href,\n        });\n      } catch (error) {\n        console.error(\"Error sharing:\", error);\n      }\n    } else {\n      // Fallback to copying URL\n      navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Link Copied!\",\n        description: \"Product link has been copied to clipboard.\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-warmWhite py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"flex items-center space-x-4 mb-8\">\n              <div className=\"w-8 h-8 bg-gray-300 rounded\"></div>\n              <div className=\"h-6 bg-gray-300 rounded w-32\"></div>\n            </div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n              <div className=\"w-full h-96 bg-gray-300 rounded-2xl\"></div>\n              <div className=\"space-y-6\">\n                <div className=\"h-8 bg-gray-300 rounded w-3/4\"></div>\n                <div className=\"h-4 bg-gray-300 rounded w-1/2\"></div>\n                <div className=\"h-6 bg-gray-300 rounded w-1/4\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-gray-300 rounded\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"min-h-screen bg-warmWhite py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Product Not Found</h1>\n            <p className=\"text-gray-600 mb-8\">The product you're looking for doesn't exist or has been removed.</p>\n            <Link href=\"/products\">\n              <Button className=\"wood-texture text-white\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const displayPrice = product.isDeal && product.dealPrice\n    ? Number(product.dealPrice).toFixed(2)\n    : Number(product.price).toFixed(2);\n\n  const hasDiscount = product.originalPrice && Number(product.originalPrice) > Number(displayPrice);\n  const discountPercentage = hasDiscount \n    ? Math.round(((Number(product.originalPrice) - Number(displayPrice)) / Number(product.originalPrice)) * 100)\n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-warmWhite py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Breadcrumb Navigation */}\n        <div className=\"flex items-center space-x-2 mb-8\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(\"/products\")}\n            className=\"text-primary hover:text-primary/80\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Products\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Enhanced Product Image with 360° View */}\n          <div className=\"space-y-4\">\n            <Card className=\"overflow-hidden border-0 shadow-2xl rounded-3xl\">\n              <div className=\"aspect-square relative bg-gradient-to-br from-amber-50 to-orange-50\">\n                {/* 360-degree viewer or normal image */}\n                <div\n                  className={`w-full h-full relative overflow-hidden ${is360View ? 'cursor-grab' : 'cursor-crosshair'} ${isDragging ? 'cursor-grabbing' : ''}`}\n                  onMouseDown={handleMouseDown}\n                  onMouseMove={is360View ? handleMouseMove : handleImageMouseMove}\n                  onMouseUp={handleMouseUp}\n                  onMouseLeave={handleMouseUp}\n                  onMouseEnter={handleImageMouseEnter}\n                  onTouchStart={handleTouchStart}\n                  onTouchMove={handleTouchMove}\n                  onTouchEnd={handleTouchEnd}\n                >\n                  <img\n                    src={product.imageUrl || '/placeholder-furniture.jpg'}\n                    alt={product.name}\n                    className={`w-full h-full object-cover transition-transform duration-300 ${\n                      is360View \n                        ? 'transform-gpu' \n                        : isZooming ? 'scale-150' : 'hover:scale-105 transition-transform duration-700'\n                    }`}\n                    style={is360View ? {\n                      transform: `rotateY(${currentAngle}deg)`,\n                      transformStyle: 'preserve-3d',\n                      filter: 'drop-shadow(0 0 20px rgba(0,0,0,0.1))'\n                    } : isZooming ? {\n                      transformOrigin: `${zoomPosition.x}% ${zoomPosition.y}%`,\n                      transition: 'none'\n                    } : {}}\n                    draggable={false}\n                    onMouseLeave={handleImageMouseLeave}\n                  />\n                  \n                  {/* Large Zoom Overlay */}\n                  {isZooming && !is360View && (\n                    <div \n                      className=\"absolute top-4 right-4 w-80 h-80 border-4 border-white shadow-2xl rounded-xl overflow-hidden bg-white z-30 pointer-events-none\"\n                      style={{\n                        backgroundImage: `url(${product.imageUrl || '/placeholder-furniture.jpg'})`,\n                        backgroundSize: '300% 300%',\n                        backgroundPosition: `${zoomPosition.x}% ${zoomPosition.y}%`,\n                        backgroundRepeat: 'no-repeat'\n                      }}\n                    >\n                      <div className=\"absolute inset-0 border-2 border-amber-400 rounded-xl\"></div>\n                      <div className=\"absolute top-2 left-2 bg-black/70 text-white text-xs px-2 py-1 rounded backdrop-blur-sm\">\n                        Magnified View\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Zoom Instructions */}\n                  {isZooming && !is360View && (\n                    <div className=\"absolute bottom-4 left-4 bg-black/70 text-white text-xs px-3 py-2 rounded-lg backdrop-blur-sm z-30 pointer-events-none\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Eye className=\"w-3 h-3\" />\n                        <span>Zoom View Active</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Badges */}\n                {product.isDeal && (\n                  <Badge className=\"absolute top-4 left-4 bg-red-600 text-white px-3 py-1 text-sm font-semibold animate-pulse z-20\">\n                    {discountPercentage}% OFF\n                  </Badge>\n                )}\n                {product.featured && (\n                  <Badge className=\"absolute top-4 right-4 bg-amber-600 text-white px-3 py-1 text-sm font-semibold z-20\">\n                    <Star className=\"w-3 h-3 mr-1\" />\n                    Featured\n                  </Badge>\n                )}\n\n                {/* 360-degree View Controls */}\n                <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between z-20\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      onClick={toggle360View}\n                      className=\"bg-black/70 text-white hover:bg-black/80 border-0 backdrop-blur-sm\"\n                    >\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      {is360View ? 'Normal View' : '360° View'}\n                    </Button>\n                  </div>\n\n                  {/* 360-degree controls (show only when in 360 view) */}\n                  {is360View && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={toggleAutoRotation}\n                        className=\"bg-black/70 text-white hover:bg-black/80 border-0 backdrop-blur-sm\"\n                      >\n                        {isRotating ? (\n                          <Pause className=\"w-4 h-4\" />\n                        ) : (\n                          <Play className=\"w-4 h-4\" />\n                        )}\n                      </Button>\n                      <div className=\"text-xs text-white bg-black/70 px-2 py-1 rounded backdrop-blur-sm\">\n                        {Math.round(currentAngle)}°\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* 360-degree Instructions (show when first entering 360 view) */}\n                {is360View && showInstructions && (\n                  <div className=\"absolute inset-0 flex items-center justify-center bg-black/40 z-10 transition-opacity duration-500\">\n                    <div className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 m-8 text-center\">\n                      <MousePointer className=\"w-8 h-8 text-amber-600 mx-auto mb-3\" />\n                      <p className=\"text-sm font-semibold text-gray-800 mb-2\">360° Interactive View</p>\n                      <p className=\"text-xs text-gray-600\">\n                        Drag to rotate • Click play for auto-rotation\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Rotation indicator */}\n                {is360View && (\n                  <div className=\"absolute top-1/2 left-4 transform -translate-y-1/2 z-20\">\n                    <div className=\"bg-black/70 text-white p-2 rounded-full backdrop-blur-sm\">\n                      <RotateCw className={`w-5 h-5 ${isRotating ? 'animate-spin' : ''}`} />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n\n            {/* Product Gallery - Additional Images */}\n            {product.images && product.images.length > 0 && (\n              <div className=\"grid grid-cols-3 gap-4\">\n                {product.images.slice(0, 3).map((image, index) => (\n                  <Card key={index} className=\"overflow-hidden border-0 shadow-lg rounded-2xl\">\n                    <div className=\"aspect-square relative bg-gradient-to-br from-amber-50 to-orange-50\">\n                      <img\n                        src={image}\n                        alt={`${product.name} view ${index + 1}`}\n                        className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-300\"\n                      />\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Details */}\n          <div className=\"space-y-8\">\n            {/* Header */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start justify-between\">\n                <h1 className=\"text-4xl font-display font-bold text-darkBrown leading-tight\">\n                  {product.name}\n                </h1>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleToggleWishlist}\n                    className={`p-2 ${isWishlisted ? \"text-red-500\" : \"text-gray-400\"} hover:text-red-500`}\n                  >\n                    <Heart className={`h-6 w-6 ${isWishlisted ? \"fill-current\" : \"\"}`} />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleShare}\n                    className=\"p-2 text-gray-400 hover:text-primary\"\n                  >\n                    <Share2 className=\"h-6 w-6\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Rating */}\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex items-center\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <Star\n                      key={star}\n                      className=\"h-5 w-5 fill-current text-amber-500\"\n                    />\n                  ))}\n                </div>\n                <span className=\"text-sm text-gray-600\">(4.9 out of 5 stars)</span>\n                <span className=\"text-sm text-primary font-medium\">234 reviews</span>\n              </div>\n\n              {/* Price */}\n              <div className=\"flex items-end space-x-4\">\n                <span className=\"text-4xl font-bold text-primary\">\n                  ₹{displayPrice}\n                </span>\n                {hasDiscount && (\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-2xl text-gray-500 line-through\">\n                      ₹{Number(product.originalPrice).toFixed(2)}\n                    </span>\n                    <Badge variant=\"destructive\" className=\"text-sm font-semibold\">\n                      Save ₹{(Number(product.originalPrice) - Number(displayPrice)).toFixed(2)}\n                    </Badge>\n                  </div>\n                )}\n              </div>\n\n              {/* Stock Status */}\n              <div className=\"flex items-center space-x-2\">\n                {product.inStock ? (\n                  <>\n                    <Check className=\"h-5 w-5 text-green-600\" />\n                    <span className=\"text-green-600 font-medium\">In Stock</span>\n                    {product.stock && product.stock < 10 && (\n                      <span className=\"text-orange-600 text-sm\">\n                        ({product.stock} left)\n                      </span>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    <Info className=\"h-5 w-5 text-red-600\" />\n                    <span className=\"text-red-600 font-medium\">Out of Stock</span>\n                  </>\n                )}\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Quick Features */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-200\">\n                <Shield className=\"h-6 w-6 text-amber-600\" />\n                <div>\n                  <div className=\"font-semibold text-darkBrown\">Lifetime Warranty</div>\n                  <div className=\"text-sm text-gray-600\">Premium quality assured</div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-4 bg-gradient-to-r from-orange-50 to-amber-50 rounded-2xl border border-orange-200\">\n                <Truck className=\"h-6 w-6 text-orange-600\" />\n                <div>\n                  <div className=\"font-semibold text-darkBrown\">Free Delivery</div>\n                  <div className=\"text-sm text-gray-600\">7-15 days nationwide</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Quantity Selector & Actions */}\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"font-semibold text-darkBrown\">Quantity:</span>\n                <div className=\"flex items-center border border-amber-200 rounded-lg overflow-hidden\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedQuantity(Math.max(1, selectedQuantity - 1))}\n                    className=\"px-3 py-2 hover:bg-amber-50\"\n                  >\n                    -\n                  </Button>\n                  <span className=\"px-4 py-2 border-x border-amber-200 font-semibold min-w-[3rem] text-center\">\n                    {selectedQuantity}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedQuantity(selectedQuantity + 1)}\n                    className=\"px-3 py-2 hover:bg-amber-50\"\n                  >\n                    +\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <Button\n                  onClick={handleAddToCart}\n                  disabled={!product.inStock}\n                  className=\"flex-1 h-14 bg-primary text-white hover:bg-primary/90 transition-colors font-semibold text-lg shadow-lg rounded-xl\"\n                >\n                  <ShoppingCart className=\"mr-3 h-5 w-5\" />\n                  Add to Cart\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (!isAuthenticated || !currentUser) {\n                      // Store pending action for after login\n                      sessionStorage.setItem('pendingAction', 'buy-now');\n                      sessionStorage.setItem('pendingProductId', product.id);\n                      sessionStorage.setItem('pendingQuantity', selectedQuantity.toString());\n                      sessionStorage.setItem('returnUrl', window.location.pathname);\n                      \n                      // Redirect to login\n                      window.location.href = '/login';\n                    } else {\n                      handleBuyNow();\n                    }\n                  }}\n                  disabled={!product.inStock}\n                  className=\"flex-1 h-14 wood-texture text-white hover:opacity-90 transition-opacity font-semibold text-lg shadow-lg rounded-xl\"\n                >\n                  <Zap className=\"mr-3 h-5 w-5\" />\n                  Buy Now\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed Information Tabs */}\n        <div className=\"mt-16\">\n          <Tabs defaultValue=\"description\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-5 bg-gradient-to-r from-amber-100 to-orange-100 rounded-2xl p-3 h-16\">\n              <TabsTrigger value=\"description\" className=\"rounded-xl h-12 flex items-center justify-center text-center font-medium\">Description</TabsTrigger>\n              <TabsTrigger value=\"specifications\" className=\"rounded-xl h-12 flex items-center justify-center text-center font-medium\">Specifications</TabsTrigger>\n              <TabsTrigger value=\"care\" className=\"rounded-xl h-12 flex items-center justify-center text-center font-medium\">Care Guide</TabsTrigger>\n              <TabsTrigger value=\"reviews\" className=\"rounded-xl h-12 flex items-center justify-center text-center font-medium\">Reviews</TabsTrigger>\n              <TabsTrigger value=\"qna\" className=\"rounded-xl h-12 flex items-center justify-center text-center font-medium\">Q&A</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"description\" className=\"mt-8\">\n              <Card className=\"border-0 shadow-lg rounded-2xl bg-gradient-to-br from-white to-amber-50\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-display font-semibold text-darkBrown mb-6 flex items-center\">\n                    <Info className=\"mr-3 h-6 w-6 text-amber-600\" />\n                    Product Description\n                  </h3>\n                  <div className=\"prose prose-lg max-w-none\">\n                    <p className=\"text-gray-700 leading-relaxed\">\n                      {product.description || \"This premium teak wood furniture piece represents the finest in traditional Indian craftsmanship. Handcrafted by skilled artisans using sustainable teak wood, it combines timeless beauty with exceptional durability. Each piece showcases natural wood grain patterns and is finished with eco-friendly treatments for lasting protection.\"}\n                    </p>\n                    <h4 className=\"text-xl font-semibold text-darkBrown mt-8 mb-4\">Key Features:</h4>\n                    <ul className=\"space-y-3 text-gray-700\">\n                      <li className=\"flex items-start\"><Award className=\"h-5 w-5 text-amber-600 mr-3 mt-0.5\" />Premium grade teak wood construction</li>\n                      <li className=\"flex items-start\"><Check className=\"h-5 w-5 text-green-600 mr-3 mt-0.5\" />Handcrafted by master artisans</li>\n                      <li className=\"flex items-start\"><Shield className=\"h-5 w-5 text-blue-600 mr-3 mt-0.5\" />Lifetime warranty coverage</li>\n                      <li className=\"flex items-start\"><Package className=\"h-5 w-5 text-purple-600 mr-3 mt-0.5\" />Expert installation included</li>\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"specifications\" className=\"mt-8\">\n              <Card className=\"border-0 shadow-lg rounded-2xl bg-gradient-to-br from-white to-orange-50\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-display font-semibold text-darkBrown mb-6 flex items-center\">\n                    <Ruler className=\"mr-3 h-6 w-6 text-orange-600\" />\n                    Technical Specifications\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between py-3 border-b border-amber-200\">\n                        <span className=\"font-semibold text-darkBrown\">Material:</span>\n                        <span className=\"text-gray-700\">Premium Teak Wood</span>\n                      </div>\n                      <div className=\"flex justify-between py-3 border-b border-amber-200\">\n                        <span className=\"font-semibold text-darkBrown\">Finish:</span>\n                        <span className=\"text-gray-700\">Natural Oil Finish</span>\n                      </div>\n                      <div className=\"flex justify-between py-3 border-b border-amber-200\">\n                        <span className=\"font-semibold text-darkBrown\">Assembly:</span>\n                        <span className=\"text-gray-700\">Professional Required</span>\n                      </div>\n                      <div className=\"flex justify-between py-3 border-b border-amber-200\">\n                        <span className=\"font-semibold text-darkBrown\">Warranty:</span>\n                        <span className=\"text-gray-700\">Lifetime Coverage</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between py-3 border-b border-orange-200\">\n                        <span className=\"font-semibold text-darkBrown\">Origin:</span>\n                        <span className=\"text-gray-700\">Handcrafted in India</span>\n                      </div>\n                      <div className=\"flex justify-between py-3 border-b border-orange-200\">\n                        <span className=\"font-semibold text-darkBrown\">Care:</span>\n                        <span className=\"text-gray-700\">Regular dusting, polish annually</span>\n                      </div>\n                      <div className=\"flex justify-between py-3 border-b border-orange-200\">\n                        <span className=\"font-semibold text-darkBrown\">Delivery:</span>\n                        <span className=\"text-gray-700\">7-15 business days</span>\n                      </div>\n                      <div className=\"flex justify-between py-3 border-b border-orange-200\">\n                        <span className=\"font-semibold text-darkBrown\">Weight:</span>\n                        <span className=\"text-gray-700\">Varies by piece</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"care\" className=\"mt-8\">\n              <Card className=\"border-0 shadow-lg rounded-2xl bg-gradient-to-br from-white to-amber-50\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-display font-semibold text-darkBrown mb-6 flex items-center\">\n                    <Palette className=\"mr-3 h-6 w-6 text-amber-600\" />\n                    Care & Maintenance Guide\n                  </h3>\n                  <div className=\"space-y-6\">\n                    <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 p-6 rounded-xl border border-amber-200\">\n                      <h4 className=\"font-semibold text-darkBrown mb-3\">Daily Care:</h4>\n                      <ul className=\"space-y-2 text-gray-700\">\n                        <li>• Dust regularly with a soft, dry cloth</li>\n                        <li>• Wipe spills immediately with a damp cloth</li>\n                        <li>• Avoid placing hot items directly on the surface</li>\n                        <li>• Keep away from direct sunlight and moisture</li>\n                      </ul>\n                    </div>\n                    <div className=\"bg-gradient-to-r from-orange-50 to-amber-50 p-6 rounded-xl border border-orange-200\">\n                      <h4 className=\"font-semibold text-darkBrown mb-3\">Seasonal Maintenance:</h4>\n                      <ul className=\"space-y-2 text-gray-700\">\n                        <li>• Apply teak oil every 6-12 months</li>\n                        <li>• Use furniture polish for enhanced shine</li>\n                        <li>• Check and tighten joints annually</li>\n                        <li>• Professional cleaning recommended yearly</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"reviews\" className=\"mt-8\">\n              <Card className=\"border-0 shadow-lg rounded-2xl bg-gradient-to-br from-white to-orange-50\">\n                <CardContent className=\"p-8\">\n                  <h3 className=\"text-2xl font-display font-semibold text-darkBrown mb-6 flex items-center\">\n                    <Star className=\"mr-3 h-6 w-6 text-amber-500\" />\n                    Customer Reviews\n                  </h3>\n                  \n                  {/* Review Summary */}\n                  <div className=\"flex items-center justify-between mb-8 p-6 bg-gradient-to-r from-amber-50 to-orange-50 rounded-xl border border-amber-200\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl font-bold text-darkBrown\">4.9</div>\n                      <div>\n                        <div className=\"flex items-center mb-1\">\n                          {[1, 2, 3, 4, 5].map((star) => (\n                            <Star key={star} className=\"h-5 w-5 fill-current text-amber-500\" />\n                          ))}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">Based on 234 reviews</div>\n                      </div>\n                    </div>\n                    <Button \n                      className=\"wood-texture text-white\"\n                      onClick={() => setShowReviewForm(!showReviewForm)}\n                      data-testid=\"button-write-review\"\n                    >\n                      {showReviewForm ? \"Cancel Review\" : \"Write a Review\"}\n                    </Button>\n                  </div>\n\n                  {/* Review Form */}\n                  {showReviewForm && (\n                    <Card className=\"mb-8 border-2 border-amber-300 bg-gradient-to-r from-amber-50 to-orange-50\">\n                      <CardContent className=\"p-6\">\n                        <h3 className=\"text-xl font-bold text-darkBrown mb-4\">Write Your Review</h3>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label htmlFor=\"reviewName\" className=\"text-darkBrown font-medium\">Your Name</Label>\n                            <Input\n                              id=\"reviewName\"\n                              value={reviewName}\n                              onChange={(e) => setReviewName(e.target.value)}\n                              placeholder=\"Enter your name\"\n                              className=\"mt-1 border-amber-200 focus:border-amber-400\"\n                              data-testid=\"input-review-name\"\n                            />\n                          </div>\n                          \n                          <div>\n                            <Label className=\"text-darkBrown font-medium\">Rating</Label>\n                            <div className=\"flex items-center space-x-1 mt-1\">\n                              {[1, 2, 3, 4, 5].map((star) => (\n                                <button\n                                  key={star}\n                                  onClick={() => setReviewRating(star)}\n                                  className=\"focus:outline-none hover:scale-110 transition-transform\"\n                                  data-testid={`star-rating-${star}`}\n                                >\n                                  <Star \n                                    className={`h-6 w-6 ${\n                                      star <= reviewRating \n                                        ? 'fill-current text-amber-500' \n                                        : 'text-gray-300 hover:text-amber-300'\n                                    }`} \n                                  />\n                                </button>\n                              ))}\n                              <span className=\"ml-2 text-sm text-gray-600\">({reviewRating} star{reviewRating !== 1 ? 's' : ''})</span>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <Label htmlFor=\"reviewComment\" className=\"text-darkBrown font-medium\">Your Review</Label>\n                            <Textarea\n                              id=\"reviewComment\"\n                              value={reviewComment}\n                              onChange={(e) => setReviewComment(e.target.value)}\n                              placeholder=\"Share your experience with this product...\"\n                              rows={4}\n                              className=\"mt-1 border-amber-200 focus:border-amber-400 resize-none\"\n                              data-testid=\"textarea-review-comment\"\n                            />\n                          </div>\n                          \n                          {/* Image Upload Section */}\n                          <div>\n                            <Label className=\"text-darkBrown font-medium flex items-center space-x-2\">\n                              <Camera className=\"h-4 w-4\" />\n                              <span>Add Photos (Optional)</span>\n                            </Label>\n                            <p className=\"text-sm text-gray-600 mb-2\">Share photos of your purchased product (max 5 images, 5MB each)</p>\n                            \n                            <div className=\"mt-2\">\n                              <input\n                                type=\"file\"\n                                id=\"reviewImages\"\n                                multiple\n                                accept=\"image/*\"\n                                onChange={(e) => handleImageUpload(e.target.files)}\n                                className=\"hidden\"\n                              />\n                              <Label\n                                htmlFor=\"reviewImages\"\n                                className=\"inline-flex items-center justify-center px-4 py-2 border-2 border-dashed border-amber-300 rounded-lg cursor-pointer hover:border-amber-400 hover:bg-amber-50 transition-colors\"\n                              >\n                                <Camera className=\"h-5 w-5 mr-2 text-amber-600\" />\n                                Choose Images\n                              </Label>\n                            </div>\n                            \n                            {/* Image Previews */}\n                            {reviewImagePreviews.length > 0 && (\n                              <div className=\"mt-3 grid grid-cols-2 sm:grid-cols-3 gap-2\">\n                                {reviewImagePreviews.map((preview, index) => (\n                                  <div key={index} className=\"relative group\">\n                                    <img\n                                      src={preview}\n                                      alt={`Preview ${index + 1}`}\n                                      className=\"w-full h-20 object-cover rounded-lg border border-amber-200\"\n                                    />\n                                    <button\n                                      type=\"button\"\n                                      onClick={() => removeImage(index)}\n                                      className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity\"\n                                    >\n                                      <X className=\"h-3 w-3\" />\n                                    </button>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex space-x-3 pt-2\">\n                            <Button\n                              onClick={async () => {\n                                if (!reviewName.trim() || !reviewComment.trim()) {\n                                  toast({\n                                    title: \"Missing Information\",\n                                    description: \"Please fill in your name and review comment.\",\n                                    variant: \"destructive\",\n                                  });\n                                  return;\n                                }\n                                \n                                // Upload images first if any\n                                const uploadedImageUrls = await uploadImages();\n                                \n                                createReviewMutation.mutate({\n                                  userName: reviewName.trim(),\n                                  rating: reviewRating,\n                                  comment: reviewComment.trim(),\n                                  images: uploadedImageUrls\n                                });\n                              }}\n                              className=\"bg-gradient-to-r from-primary to-accent hover:from-accent hover:to-primary text-white\"\n                              data-testid=\"button-submit-review\"\n                              disabled={createReviewMutation.isPending || uploadingImages}\n                            >\n                              {uploadingImages ? \"Uploading Images...\" : \n                               createReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                            </Button>\n                            <Button\n                              onClick={() => {\n                                setShowReviewForm(false);\n                                setReviewName(\"\");\n                                setReviewComment(\"\");\n                                setReviewRating(5);\n                                setReviewImages([]);\n                                setReviewImagePreviews([]);\n                              }}\n                              variant=\"outline\"\n                              className=\"border-amber-300 text-amber-700 hover:bg-amber-50\"\n                              data-testid=\"button-cancel-review\"\n                            >\n                              Cancel\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* All Reviews (Database + Sample) */}\n                  <div className=\"space-y-6\">\n                    {[...reviews, \n                      {\n                        userName: \"Rajesh Kumar\",\n                        rating: 5,\n                        createdAt: \"2023-11-15T10:30:00Z\",\n                        comment: \"Absolutely beautiful craftsmanship! The teak wood quality is exceptional and the finish is perfect. Delivery was on time and installation was professional.\"\n                      },\n                      {\n                        userName: \"Priya Sharma\",\n                        rating: 5,\n                        createdAt: \"2023-10-20T14:45:00Z\", \n                        comment: \"Love this piece! It's exactly as described and the natural wood grain is gorgeous. Great value for money and excellent customer service.\"\n                      }\n                    ].map((review, index) => (\n                      <div key={index} className=\"border-b border-gray-200 pb-6 last:border-b-0\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-gradient-to-br from-amber-500 to-orange-600 rounded-full flex items-center justify-center text-white font-bold\">\n                              {review.userName.charAt(0)}\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-darkBrown\">{review.userName}</div>\n                              <div className=\"flex items-center space-x-2\">\n                                <div className=\"flex\">\n                                  {[1, 2, 3, 4, 5].map((star) => (\n                                    <Star \n                                      key={star} \n                                      className={`h-4 w-4 ${star <= review.rating ? 'fill-current text-amber-500' : 'text-gray-300'}`} \n                                    />\n                                  ))}\n                                </div>\n                                <span className=\"text-sm text-gray-500\">\n                                  {review.createdAt ? new Date(review.createdAt).toLocaleDateString() : review.date}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        <p className=\"text-gray-700 mb-3\">{review.comment}</p>\n                        \n                        {/* Display review images */}\n                        {review.images && review.images.length > 0 && (\n                          <div className=\"mt-3\">\n                            <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2\">\n                              {review.images.map((imageUrl: string, imgIndex: number) => (\n                                <div key={imgIndex} className=\"relative group cursor-pointer\" onClick={() => openImageModal(imageUrl)}>\n                                  <img\n                                    src={imageUrl}\n                                    alt={`Review image ${imgIndex + 1}`}\n                                    className=\"w-full h-20 sm:h-24 object-cover rounded-lg border border-gray-200 hover:border-amber-300 transition-colors\"\n                                  />\n                                  <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all rounded-lg flex items-center justify-center\">\n                                    <Eye className=\"h-5 w-5 text-white opacity-0 group-hover:opacity-100 transition-opacity\" />\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                            <p className=\"text-xs text-gray-500 mt-2\">Click images to view full size</p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"qna\" className=\"mt-8\">\n              <Card className=\"border-0 shadow-lg rounded-2xl bg-gradient-to-br from-white to-purple-50\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex justify-between items-center mb-6\">\n                    <h3 className=\"text-2xl font-display font-semibold text-darkBrown flex items-center\">\n                      <Eye className=\"mr-3 h-6 w-6 text-purple-600\" />\n                      Product Q&A\n                    </h3>\n                    <div className=\"flex space-x-3\">\n                      {/* Admin View Toggle */}\n                      <Button\n                        onClick={() => setShowAdminView(!showAdminView)}\n                        variant={showAdminView ? \"default\" : \"outline\"}\n                        className={showAdminView ? \"bg-green-600 hover:bg-green-700 text-white px-4 py-2\" : \"border-green-600 text-green-600 hover:bg-green-50 px-4 py-2\"}\n                      >\n                        {showAdminView ? \"Exit Admin\" : \"Admin Mode\"}\n                      </Button>\n                      \n                      {/* Ask Question Button */}\n                      {!showAdminView && (\n                        <Button\n                          onClick={() => setShowQuestionForm(!showQuestionForm)}\n                          className=\"wood-texture text-white px-6 py-3 font-semibold\"\n                        >\n                          {showQuestionForm ? \"Cancel\" : \"Ask a Question\"}\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Question Form */}\n                  {showQuestionForm && (\n                    <div className=\"mb-8 p-6 bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl border border-purple-200\">\n                      <h4 className=\"font-semibold text-darkBrown mb-4\">Ask Your Question</h4>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"question-name\">Your Name</Label>\n                          <Input\n                            id=\"question-name\"\n                            value={questionName}\n                            onChange={(e) => setQuestionName(e.target.value)}\n                            placeholder=\"Enter your name\"\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"question-text\">Your Question</Label>\n                          <Textarea\n                            id=\"question-text\"\n                            value={questionText}\n                            onChange={(e) => setQuestionText(e.target.value)}\n                            placeholder=\"What would you like to know about this product?\"\n                            rows={4}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div className=\"flex space-x-3\">\n                          <Button\n                            onClick={() => {\n                              if (questionName.trim() && questionText.trim()) {\n                                createQuestionMutation.mutate({\n                                  userName: questionName.trim(),\n                                  question: questionText.trim()\n                                });\n                              } else {\n                                toast({\n                                  title: \"Missing Information\",\n                                  description: \"Please fill in both your name and question.\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                            disabled={createQuestionMutation.isPending}\n                            className=\"wood-texture text-white\"\n                          >\n                            {createQuestionMutation.isPending ? \"Submitting...\" : \"Submit Question\"}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setShowQuestionForm(false);\n                              setQuestionName(\"\");\n                              setQuestionText(\"\");\n                            }}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Questions List */}\n                  <div className=\"space-y-6\">\n                    {questions.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <div className=\"text-gray-500 mb-2\">No questions yet</div>\n                        <div className=\"text-sm text-gray-400\">Be the first to ask about this product!</div>\n                      </div>\n                    ) : (\n                      questions.map((question: any, index: number) => (\n                        <div key={question.id || index} className=\"border-b border-purple-100 pb-6 last:border-b-0\">\n                          <div className=\"mb-4\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"font-medium text-darkBrown\">Q: {question.question}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                by {question.userName} • {new Date(question.createdAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          {question.answer ? (\n                            <div className=\"ml-4 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200\">\n                              <div className=\"font-medium text-amber-800 mb-2\">Answer:</div>\n                              <div className=\"text-gray-700\">{question.answer}</div>\n                              {question.answeredAt && (\n                                <div className=\"text-sm text-amber-600 mt-2\">\n                                  Answered on {new Date(question.answeredAt).toLocaleDateString()}\n                                </div>\n                              )}\n                            </div>\n                          ) : (\n                            <>\n                              {/* Customer View - Waiting for Answer */}\n                              {!showAdminView && (\n                                <div className=\"ml-4 p-3 bg-gradient-to-r from-orange-50 to-yellow-50 rounded-lg border border-orange-200\">\n                                  <div className=\"text-orange-600 text-sm\">Waiting for answer...</div>\n                                </div>\n                              )}\n                              \n                              {/* Admin View - Answer Form */}\n                              {showAdminView && (\n                                <div className=\"ml-4\">\n                                  {answeringQuestionId === question.id ? (\n                                    <div className=\"p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-lg border border-amber-200\">\n                                      <div className=\"font-medium text-amber-800 mb-3\">Provide Answer:</div>\n                                      <Textarea\n                                        value={answerText}\n                                        onChange={(e) => setAnswerText(e.target.value)}\n                                        placeholder=\"Type your detailed answer here...\"\n                                        rows={4}\n                                        className=\"mb-3\"\n                                      />\n                                      <div className=\"flex space-x-3\">\n                                        <Button\n                                          onClick={() => {\n                                            if (answerText.trim()) {\n                                              answerQuestionMutation.mutate({\n                                                questionId: question.id,\n                                                answer: answerText.trim()\n                                              });\n                                            } else {\n                                              toast({\n                                                title: \"Answer Required\",\n                                                description: \"Please provide an answer before submitting.\",\n                                                variant: \"destructive\",\n                                              });\n                                            }\n                                          }}\n                                          disabled={answerQuestionMutation.isPending}\n                                          className=\"bg-amber-600 hover:bg-amber-700 text-white\"\n                                        >\n                                          {answerQuestionMutation.isPending ? \"Submitting...\" : \"Submit Answer\"}\n                                        </Button>\n                                        <Button\n                                          variant=\"outline\"\n                                          onClick={() => {\n                                            setAnsweringQuestionId(null);\n                                            setAnswerText(\"\");\n                                          }}\n                                        >\n                                          Cancel\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  ) : (\n                                    <div className=\"p-3 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                                      <div className=\"flex justify-between items-center\">\n                                        <div className=\"text-orange-600 text-sm font-medium\">⚠️ Needs Answer</div>\n                                        <Button\n                                          size=\"sm\"\n                                          onClick={() => {\n                                            setAnsweringQuestionId(question.id);\n                                            setAnswerText(\"\");\n                                          }}\n                                          className=\"bg-orange-600 hover:bg-orange-700 text-white px-4 py-2\"\n                                        >\n                                          Answer Question\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  )}\n                                </div>\n                              )}\n                            </>\n                          )}\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Related Products */}\n        <div className=\"mt-16\">\n          <h2 className=\"text-3xl font-display font-bold text-darkBrown mb-8 text-center\">You Might Also Like</h2>\n          <div className=\"text-center\">\n            <Link href=\"/products\">\n              <Button className=\"wood-texture text-white px-8 py-3 font-semibold\">\n                View All Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Customer Details Form Modal */}\n        {showCustomerForm && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-60 z-[60] flex items-center justify-center p-4 backdrop-blur-sm pt-24\">\n            <Card className=\"w-full max-w-md max-h-[90vh] overflow-hidden rounded-2xl shadow-2xl border-0 bg-gradient-to-br from-white via-warmWhite to-white\">\n              <CardHeader className=\"flex flex-row items-center justify-between p-6 bg-gradient-to-r from-amber-50 to-orange-50 border-b border-amber-100\">\n                <div>\n                  <CardTitle className=\"text-xl text-darkBrown font-display\">Enter Your Details</CardTitle>\n                  <p className=\"text-sm text-primary mt-1\">Complete your purchase securely</p>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowCustomerForm(false)} className=\"hover:bg-amber-100 rounded-full\">\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"max-h-[60vh] overflow-y-auto px-6 py-4 space-y-4\">\n                  <form onSubmit={handleCustomerFormSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 gap-4\">\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-darkBrown\">Full Name *</label>\n                        <Input\n                          placeholder=\"Enter your full name\"\n                          value={customerDetails.name}\n                          onChange={(e) => setCustomerDetails({...customerDetails, name: e.target.value})}\n                          required\n                          className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-darkBrown\">Email Address *</label>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"Enter your email address\"\n                          value={customerDetails.email}\n                          onChange={(e) => setCustomerDetails({...customerDetails, email: e.target.value})}\n                          required\n                          className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-darkBrown\">Phone Number *</label>\n                        <Input\n                          type=\"tel\"\n                          placeholder=\"Enter your phone number\"\n                          value={customerDetails.contact}\n                          onChange={(e) => setCustomerDetails({...customerDetails, contact: e.target.value})}\n                          required\n                          className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium text-darkBrown\">Delivery Address *</label>\n                        <Input\n                          placeholder=\"Enter your complete delivery address\"\n                          value={customerDetails.address}\n                          onChange={(e) => setCustomerDetails({...customerDetails, address: e.target.value})}\n                          required\n                          className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium text-darkBrown\">City *</label>\n                          <Input\n                            placeholder=\"City\"\n                            value={customerDetails.city}\n                            onChange={(e) => setCustomerDetails({...customerDetails, city: e.target.value})}\n                            required\n                            className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium text-darkBrown\">District *</label>\n                          <Input\n                            placeholder=\"District\"\n                            value={customerDetails.district}\n                            onChange={(e) => setCustomerDetails({...customerDetails, district: e.target.value})}\n                            required\n                            className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium text-darkBrown\">State *</label>\n                          <Input\n                            placeholder=\"State\"\n                            value={customerDetails.state}\n                            onChange={(e) => setCustomerDetails({...customerDetails, state: e.target.value})}\n                            required\n                            className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium text-darkBrown\">Pincode *</label>\n                          <Input\n                            placeholder=\"Pincode\"\n                            value={customerDetails.pincode}\n                            onChange={(e) => setCustomerDetails({...customerDetails, pincode: e.target.value})}\n                            required\n                            className=\"rounded-lg border-amber-200 focus:border-amber-400 focus:ring-amber-400\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-gradient-to-r from-amber-50 to-orange-50 p-4 rounded-xl border border-amber-100 mt-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-lg font-semibold text-darkBrown\">Total Amount:</span>\n                        <span className=\"text-2xl font-bold text-primary\">₹{displayPrice}</span>\n                      </div>\n                      <p className=\"text-xs text-gray-600 mt-1\">Inclusive of all taxes</p>\n                    </div>\n                    <div className=\"pt-4 pb-2 space-y-3\">\n                      <Button type=\"submit\" className=\"w-full h-12 bg-gradient-to-r from-amber-600 via-orange-600 to-amber-700 hover:from-amber-700 hover:via-orange-700 hover:to-amber-800 text-white font-semibold shadow-lg rounded-xl transition-all duration-300\">\n                        Continue to Payment Options\n                      </Button>\n                      <Button \n                        type=\"button\"\n                        onClick={() => setShowCustomerForm(false)}\n                        className=\"w-full h-12 bg-gradient-to-r from-gray-500 via-gray-600 to-gray-700 hover:from-gray-600 hover:via-gray-700 hover:to-gray-800 text-white font-semibold shadow-lg rounded-xl transition-all duration-300\"\n                      >\n                        ← Back\n                      </Button>\n                    </div>\n                  </form>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Payment Options Modal */}\n        <RazorpayPaymentModal\n          isOpen={showPaymentOptions}\n          onClose={() => setShowPaymentOptions(false)}\n          onSelectMethod={handlePaymentMethod}\n          total={parseFloat(displayPrice) * selectedQuantity}\n          phoneNumber={customerDetails.contact}\n          customerDetails={customerDetails}\n          productDetails={product}\n        />\n\n        {/* Unified Image Gallery Modal */}\n        {selectedImageModal && allReviewImages.length > 0 && (\n          <Dialog open={!!selectedImageModal} onOpenChange={() => setSelectedImageModal(null)}>\n            <DialogContent className=\"max-w-4xl w-full p-2\">\n              <VisuallyHidden>\n                <DialogTitle>Review Image {currentImageIndex + 1} of {allReviewImages.length}</DialogTitle>\n              </VisuallyHidden>\n              <div className=\"relative\">\n                <img\n                  src={allReviewImages[currentImageIndex]}\n                  alt={`Review image ${currentImageIndex + 1} - Full size`}\n                  className=\"w-full h-auto max-h-[80vh] object-contain rounded-lg\"\n                />\n                \n                {/* Navigation Buttons */}\n                {allReviewImages.length > 1 && (\n                  <>\n                    {/* Previous Button */}\n                    <Button\n                      onClick={handlePreviousImage}\n                      className=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white border-0 rounded-full w-12 h-12 p-0 flex items-center justify-center\"\n                      data-testid=\"button-previous-image\"\n                    >\n                      <ChevronLeft className=\"h-6 w-6\" />\n                    </Button>\n                    \n                    {/* Next Button */}\n                    <Button\n                      onClick={handleNextImage}\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 hover:bg-opacity-70 text-white border-0 rounded-full w-12 h-12 p-0 flex items-center justify-center\"\n                      data-testid=\"button-next-image\"\n                    >\n                      <ChevronRight className=\"h-6 w-6\" />\n                    </Button>\n                  </>\n                )}\n                \n                {/* Image Counter */}\n                <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm\">\n                  {currentImageIndex + 1} / {allReviewImages.length}\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":86234},"client/src/hooks/use-auth-sync.ts":{"content":"import { useAuth0 } from '@auth0/auth0-react';\nimport { useEffect } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\n\nexport function useAuthSync() {\n  const { user, isAuthenticated, isLoading } = useAuth0();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const syncAuth = async () => {\n      if (isAuthenticated && user && !isLoading) {\n        try {\n          // Get localStorage cart items to migrate\n          const localCartItems = JSON.parse(localStorage.getItem('localCart') || '[]');\n          \n          const response = await fetch('/api/auth/sync', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n              user, \n              localCartItems \n            }),\n          });\n\n          if (response.ok) {\n            // Clear localStorage cart after successful migration\n            if (localCartItems.length > 0) {\n              localStorage.removeItem('localCart');\n              console.log(`Successfully migrated ${localCartItems.length} cart items to authenticated account`);\n              \n              // Dispatch cart update event to refresh UI\n              window.dispatchEvent(new Event('cartUpdated'));\n              \n              // Invalidate cart queries to refresh from database\n              queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n            }\n            \n            // Invalidate auth queries to refresh user data\n            queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n          }\n        } catch (error) {\n          console.error('Failed to sync authentication:', error);\n        }\n      }\n    };\n\n    syncAuth();\n  }, [isAuthenticated, user, isLoading, queryClient]);\n}","size_bytes":1794},"client/src/components/appointment-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, Calendar, Clock, Video, Users, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth0 } from '@auth0/auth0-react';\n\ninterface AppointmentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AppointmentModal({ isOpen, onClose }: AppointmentModalProps) {\n  const { toast } = useToast();\n  const { loginWithRedirect, isAuthenticated } = useAuth0();\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    customerEmail: \"\",\n    customerPhone: \"\",\n    appointmentDate: \"\",\n    appointmentTime: \"\",\n    meetingType: \"virtual_showroom\",\n    notes: \"\"\n  });\n  const [appointmentId, setAppointmentId] = useState<string>(\"\");\n\n  // Check if user is authenticated\n  const { data: user } = useQuery<any>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  // Pre-fill form with user data if logged in\n  useState(() => {\n    if (user) {\n      setFormData(prev => ({\n        ...prev,\n        customerName: user.name || \"\",\n        customerEmail: user.email || \"\",\n        customerPhone: user.phone || \"\",\n      }));\n    }\n  });\n\n  const bookAppointmentMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const appointmentDateTime = new Date(`${data.appointmentDate}T${data.appointmentTime}`);\n      \n      const response = await apiRequest('POST', '/api/appointments', {\n        ...data,\n        appointmentDate: appointmentDateTime.toISOString(),\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setAppointmentId(data.id);\n      setStep(3);\n      toast({\n        title: \"Appointment booked successfully!\",\n        description: `Your virtual meeting is scheduled. Check your email for confirmation.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error booking appointment\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.customerName || !formData.customerEmail || !formData.customerPhone || \n        !formData.appointmentDate || !formData.appointmentTime) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const appointmentDateTime = new Date(`${formData.appointmentDate}T${formData.appointmentTime}`);\n    const now = new Date();\n    \n    if (appointmentDateTime <= now) {\n      toast({\n        title: \"Please select a future date and time\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setStep(2);\n  };\n\n  const confirmBooking = () => {\n    if (!isAuthenticated) {\n      // Store appointment data in sessionStorage for after authentication\n      sessionStorage.setItem('pendingAction', 'book-appointment');\n      sessionStorage.setItem('pendingAppointmentData', JSON.stringify(formData));\n      \n      // Redirect to Auth0 authentication\n      loginWithRedirect({\n        appState: {\n          returnTo: '/callback'\n        }\n      });\n    } else {\n      // User is already authenticated, book directly\n      bookAppointmentMutation.mutate(formData);\n    }\n  };\n\n  const resetForm = () => {\n    setStep(1);\n    setFormData({\n      customerName: user?.name || \"\",\n      customerEmail: user?.email || \"\",\n      customerPhone: user?.phone || \"\",\n      appointmentDate: \"\",\n      appointmentTime: \"\",\n      meetingType: \"virtual_showroom\",\n      notes: \"\"\n    });\n    setAppointmentId(\"\");\n  };\n\n  const closeModal = () => {\n    resetForm();\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  // Generate time slots\n  const timeSlots = [\n    \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",\n    \"12:00\", \"12:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \n    \"16:00\", \"16:30\", \"17:00\", \"17:30\", \"18:00\"\n  ];\n\n  // Get minimum date (tomorrow)\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const minDate = tomorrow.toISOString().split('T')[0];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl animate-fadeIn\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-accent to-primary p-6 rounded-t-3xl relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent\"></div>\n          <div className=\"relative z-10 flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white/20 rounded-full p-3\">\n                <Video className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-white\">Book Virtual Meeting</h2>\n                <p className=\"text-white/90 text-sm\">Schedule a personal furniture consultation</p>\n              </div>\n            </div>\n            <Button\n              onClick={closeModal}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white/20 rounded-full w-10 h-10 p-0\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"p-6 pb-0\">\n          <div className=\"flex items-center justify-center space-x-4\">\n            <div className={`flex items-center space-x-2 ${step >= 1 ? 'text-primary' : 'text-gray-400'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step >= 1 ? 'bg-primary text-white' : 'bg-gray-200'}`}>1</div>\n              <span className=\"text-sm font-medium\">Details</span>\n            </div>\n            <div className=\"w-12 h-0.5 bg-gray-300\" />\n            <div className={`flex items-center space-x-2 ${step >= 2 ? 'text-primary' : 'text-gray-400'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step >= 2 ? 'bg-primary text-white' : 'bg-gray-200'}`}>2</div>\n              <span className=\"text-sm font-medium\">Confirm</span>\n            </div>\n            <div className=\"w-12 h-0.5 bg-gray-300\" />\n            <div className={`flex items-center space-x-2 ${step >= 3 ? 'text-primary' : 'text-gray-400'}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${step >= 3 ? 'bg-primary text-white' : 'bg-gray-200'}`}>\n                {step >= 3 ? <CheckCircle className=\"w-4 h-4\" /> : '3'}\n              </div>\n              <span className=\"text-sm font-medium\">Booked</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Step 1: Booking Form */}\n          {step === 1 && (\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              {/* Meeting Type Selection */}\n              <div>\n                <Card className=\"border-primary/20 shadow-lg h-full\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Meeting Types</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div \n                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                        formData.meetingType === 'virtual_showroom' ? 'border-primary bg-primary/5' : 'border-gray-200 hover:border-primary/50'\n                      }`}\n                      onClick={() => setFormData(prev => ({ ...prev, meetingType: 'virtual_showroom' }))}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Video className=\"w-5 h-5 text-primary\" />\n                        <div>\n                          <div className=\"font-medium text-sm\">Virtual Showroom</div>\n                          <div className=\"text-xs text-gray-600\">Live furniture tour</div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div \n                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                        formData.meetingType === 'consultation' ? 'border-primary bg-primary/5' : 'border-gray-200 hover:border-primary/50'\n                      }`}\n                      onClick={() => setFormData(prev => ({ ...prev, meetingType: 'consultation' }))}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Users className=\"w-5 h-5 text-primary\" />\n                        <div>\n                          <div className=\"font-medium text-sm\">Design Consultation</div>\n                          <div className=\"text-xs text-gray-600\">Personalized advice</div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div \n                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                        formData.meetingType === 'product_demo' ? 'border-primary bg-primary/5' : 'border-gray-200 hover:border-primary/50'\n                      }`}\n                      onClick={() => setFormData(prev => ({ ...prev, meetingType: 'product_demo' }))}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <CheckCircle className=\"w-5 h-5 text-primary\" />\n                        <div>\n                          <div className=\"font-medium text-sm\">Product Demo</div>\n                          <div className=\"text-xs text-gray-600\">Specific item showcase</div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Booking Form */}\n              <div className=\"lg:col-span-2\">\n                <Card className=\"border-primary/20 shadow-lg\">\n                  <CardHeader>\n                    <CardTitle className=\"text-xl\">Appointment Details</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleSubmit} className=\"space-y-6\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                            Your Name *\n                          </label>\n                          <Input\n                            value={formData.customerName}\n                            onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                            placeholder=\"Enter your full name\"\n                            className=\"border-primary/20 focus:border-primary\"\n                            required\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                            Email Address *\n                          </label>\n                          <Input\n                            type=\"email\"\n                            value={formData.customerEmail}\n                            onChange={(e) => setFormData(prev => ({ ...prev, customerEmail: e.target.value }))}\n                            placeholder=\"your.email@example.com\"\n                            className=\"border-primary/20 focus:border-primary\"\n                            required\n                          />\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                          Phone Number *\n                        </label>\n                        <Input\n                          value={formData.customerPhone}\n                          onChange={(e) => setFormData(prev => ({ ...prev, customerPhone: e.target.value }))}\n                          placeholder=\"+91 98765 43210\"\n                          className=\"border-primary/20 focus:border-primary\"\n                          required\n                        />\n                      </div>\n\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                            Preferred Date *\n                          </label>\n                          <Input\n                            type=\"date\"\n                            value={formData.appointmentDate}\n                            onChange={(e) => setFormData(prev => ({ ...prev, appointmentDate: e.target.value }))}\n                            min={minDate}\n                            className=\"border-primary/20 focus:border-primary\"\n                            required\n                          />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                            Preferred Time *\n                          </label>\n                          <select\n                            value={formData.appointmentTime}\n                            onChange={(e) => setFormData(prev => ({ ...prev, appointmentTime: e.target.value }))}\n                            className=\"w-full px-3 py-2 border border-primary/20 rounded-lg focus:outline-none focus:border-primary\"\n                            required\n                          >\n                            <option value=\"\">Select time</option>\n                            {timeSlots.map(time => (\n                              <option key={time} value={time}>{time}</option>\n                            ))}\n                          </select>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                          Additional Notes\n                        </label>\n                        <Textarea\n                          value={formData.notes}\n                          onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                          placeholder=\"Tell us about your furniture needs, room dimensions, or any specific requirements...\"\n                          rows={3}\n                          className=\"border-green-200 focus:border-green-500 resize-none\"\n                        />\n                      </div>\n\n                      <div className=\"flex justify-end space-x-4\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={closeModal}\n                          className=\"border-primary/20 hover:border-primary\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          className=\"bg-gradient-to-r from-accent to-primary text-white hover:shadow-lg transition-all duration-300\"\n                        >\n                          Continue\n                        </Button>\n                      </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Confirmation */}\n          {step === 2 && (\n            <div className=\"max-w-2xl mx-auto\">\n              <Card className=\"border-primary/20 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"text-xl text-center\">Confirm Your Appointment</CardTitle>\n                  <p className=\"text-center text-gray-600\">Please review your appointment details</p>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"bg-gradient-to-r from-primary/5 to-accent/5 p-6 rounded-lg\">\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-700 mb-2\">Contact Information</h4>\n                        <div className=\"space-y-1 text-sm\">\n                          <div><strong>Name:</strong> {formData.customerName}</div>\n                          <div><strong>Email:</strong> {formData.customerEmail}</div>\n                          <div><strong>Phone:</strong> {formData.customerPhone}</div>\n                        </div>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-700 mb-2\">Appointment Details</h4>\n                        <div className=\"space-y-1 text-sm\">\n                          <div><strong>Date:</strong> {new Date(formData.appointmentDate).toLocaleDateString()}</div>\n                          <div><strong>Time:</strong> {formData.appointmentTime}</div>\n                          <div><strong>Type:</strong> {formData.meetingType.replace('_', ' ').toUpperCase()}</div>\n                        </div>\n                      </div>\n                    </div>\n                    {formData.notes && (\n                      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                        <h4 className=\"font-medium text-gray-700 mb-2\">Notes</h4>\n                        <p className=\"text-sm text-gray-600\">{formData.notes}</p>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-yellow-800 mb-2\">What to Expect:</h4>\n                    <ul className=\"text-sm text-yellow-700 space-y-1\">\n                      <li>• You'll receive a confirmation email with the video call link</li>\n                      <li>• Our furniture expert will call you at the scheduled time</li>\n                      <li>• We'll provide a live virtual tour of our showroom</li>\n                      <li>• Feel free to ask questions about any furniture piece</li>\n                    </ul>\n                  </div>\n\n                  <div className=\"flex justify-center space-x-4\">\n                    <Button\n                      onClick={() => setStep(1)}\n                      variant=\"outline\"\n                      className=\"border-primary/20 hover:border-primary\"\n                    >\n                      Back to Edit\n                    </Button>\n                    <Button\n                      onClick={confirmBooking}\n                      disabled={bookAppointmentMutation.isPending}\n                      className=\"bg-gradient-to-r from-accent to-primary text-white hover:shadow-lg transition-all duration-300\"\n                    >\n                      {bookAppointmentMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\" />\n                          Booking...\n                        </>\n                      ) : (\n                        <>\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          Confirm Booking\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Step 3: Success */}\n          {step === 3 && (\n            <div className=\"max-w-2xl mx-auto text-center\">\n              <div className=\"bg-primary/5 border border-primary/20 rounded-2xl p-8\">\n                <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-6\">\n                  <CheckCircle className=\"w-8 h-8 text-white\" />\n                </div>\n                \n                <h3 className=\"text-2xl font-bold text-primary mb-4\">Appointment Confirmed!</h3>\n                <p className=\"text-primary/80 mb-6\">\n                  Your virtual meeting has been successfully booked for {new Date(formData.appointmentDate).toLocaleDateString()} at {formData.appointmentTime}.\n                </p>\n\n                <div className=\"bg-white rounded-lg p-6 text-left mb-6\">\n                  <h4 className=\"font-bold text-gray-800 mb-4\">Next Steps:</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">1</div>\n                      <div>\n                        <div className=\"font-medium\">Check Your Email</div>\n                        <div className=\"text-sm text-gray-600\">Confirmation details sent to {formData.customerEmail}</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">2</div>\n                      <div>\n                        <div className=\"font-medium\">Join the Video Call</div>\n                        <div className=\"text-sm text-gray-600\">Use the link in your email to join at the scheduled time</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"bg-primary text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">3</div>\n                      <div>\n                        <div className=\"font-medium\">Enjoy Your Virtual Tour</div>\n                        <div className=\"text-sm text-gray-600\">Our expert will show you our furniture collection live</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <Button\n                  onClick={closeModal}\n                  className=\"bg-gradient-to-r from-primary to-accent text-white hover:shadow-lg transition-all duration-300\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22731},"client/src/components/helpdesk-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, MessageCircle, Send, Phone, Mail, Clock, Headphones } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth0 } from '@auth0/auth0-react';\n\ninterface HelpdeskModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function HelpdeskModal({ isOpen, onClose }: HelpdeskModalProps) {\n  const { toast } = useToast();\n  const { loginWithRedirect, isAuthenticated } = useAuth0();\n  const [formData, setFormData] = useState({\n    customerName: \"\",\n    customerEmail: \"\",\n    customerPhone: \"\",\n    subject: \"\",\n    message: \"\",\n    priority: \"medium\"\n  });\n\n  // Check if user is authenticated\n  const { data: user } = useQuery<any>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n  });\n\n  // Pre-fill form with user data if logged in\n  useState(() => {\n    if (user) {\n      setFormData(prev => ({\n        ...prev,\n        customerName: user.name || \"\",\n        customerEmail: user.email || \"\",\n        customerPhone: user.phone || \"\",\n      }));\n    }\n  });\n\n  const submitTicketMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest('POST', '/api/support/tickets', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Support ticket created successfully!\",\n        description: `Your ticket #${data.ticketId} has been submitted. We'll respond within 24 hours.`,\n      });\n      onClose();\n      setFormData({\n        customerName: user?.name || \"\",\n        customerEmail: user?.email || \"\",\n        customerPhone: user?.phone || \"\",\n        subject: \"\",\n        message: \"\",\n        priority: \"medium\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error submitting ticket\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.customerName || !formData.customerEmail || !formData.subject || !formData.message) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isAuthenticated) {\n      // Store support ticket data in sessionStorage for after authentication\n      sessionStorage.setItem('pendingAction', 'submit-ticket');\n      sessionStorage.setItem('pendingSupportTicketData', JSON.stringify(formData));\n      \n      // Redirect to Auth0 authentication\n      loginWithRedirect({\n        appState: {\n          returnTo: '/callback'\n        }\n      });\n    } else {\n      // User is already authenticated, submit directly\n      submitTicketMutation.mutate(formData);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl animate-fadeIn\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-primary to-accent p-6 rounded-t-3xl relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-white/10 to-transparent\"></div>\n          <div className=\"relative z-10 flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white/20 rounded-full p-3\">\n                <Headphones className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-white\">Customer Support</h2>\n                <p className=\"text-white/90 text-sm\">Get help from our furniture experts</p>\n              </div>\n            </div>\n            <Button\n              onClick={onClose}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white/20 rounded-full w-10 h-10 p-0\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-6 p-6\">\n          {/* Contact Information */}\n          <div className=\"space-y-6\">\n            <Card className=\"border-primary/20 shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg flex items-center space-x-2\">\n                  <MessageCircle className=\"w-5 h-5 text-primary\" />\n                  <span>Quick Contact</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 p-3 bg-primary/5 rounded-lg\">\n                  <Phone className=\"w-4 h-4 text-primary\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Phone Support</div>\n                    <div className=\"text-xs text-gray-600\">+91 98765 43210</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-3 p-3 bg-accent/5 rounded-lg\">\n                  <Mail className=\"w-4 h-4 text-accent\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Email Support</div>\n                    <div className=\"text-xs text-gray-600\">help@indosaga.com</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3 p-3 bg-green-50 rounded-lg\">\n                  <Clock className=\"w-4 h-4 text-green-600\" />\n                  <div>\n                    <div className=\"font-medium text-sm\">Response Time</div>\n                    <div className=\"text-xs text-gray-600\">Within 24 hours</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-primary/20 shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg\">Support Hours</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Monday - Friday</span>\n                    <span className=\"font-medium\">9 AM - 8 PM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Saturday</span>\n                    <span className=\"font-medium\">10 AM - 6 PM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Sunday</span>\n                    <span className=\"font-medium\">10 AM - 4 PM</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Support Form */}\n          <div className=\"md:col-span-2\">\n            <Card className=\"border-primary/20 shadow-lg\">\n              <CardHeader>\n                <CardTitle className=\"text-xl\">Submit a Support Ticket</CardTitle>\n                <p className=\"text-gray-600 text-sm\">\n                  Tell us about your issue and we'll get back to you as soon as possible.\n                </p>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Your Name *\n                      </label>\n                      <Input\n                        value={formData.customerName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                        placeholder=\"Enter your full name\"\n                        className=\"border-primary/20 focus:border-primary\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Email Address *\n                      </label>\n                      <Input\n                        type=\"email\"\n                        value={formData.customerEmail}\n                        onChange={(e) => setFormData(prev => ({ ...prev, customerEmail: e.target.value }))}\n                        placeholder=\"your.email@example.com\"\n                        className=\"border-primary/20 focus:border-primary\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Phone Number\n                      </label>\n                      <Input\n                        value={formData.customerPhone}\n                        onChange={(e) => setFormData(prev => ({ ...prev, customerPhone: e.target.value }))}\n                        placeholder=\"+91 98765 43210\"\n                        className=\"border-primary/20 focus:border-primary\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                        Priority Level\n                      </label>\n                      <select\n                        value={formData.priority}\n                        onChange={(e) => setFormData(prev => ({ ...prev, priority: e.target.value }))}\n                        className=\"w-full px-3 py-2 border border-primary/20 rounded-lg focus:outline-none focus:border-primary\"\n                      >\n                        <option value=\"low\">Low - General inquiry</option>\n                        <option value=\"medium\">Medium - Standard support</option>\n                        <option value=\"high\">High - Urgent issue</option>\n                        <option value=\"urgent\">Urgent - Critical problem</option>\n                      </select>\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Subject *\n                    </label>\n                    <Input\n                      value={formData.subject}\n                      onChange={(e) => setFormData(prev => ({ ...prev, subject: e.target.value }))}\n                      placeholder=\"Brief description of your issue\"\n                      className=\"border-primary/20 focus:border-primary\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                      Message *\n                    </label>\n                    <Textarea\n                      value={formData.message}\n                      onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n                      placeholder=\"Please describe your issue in detail. Include any relevant order numbers or product information.\"\n                      rows={5}\n                      className=\"border-primary/20 focus:border-primary resize-none\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={onClose}\n                      className=\"border-primary/20 hover:border-primary\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={submitTicketMutation.isPending}\n                      className=\"bg-gradient-to-r from-primary to-accent text-white hover:shadow-lg transition-all duration-300\"\n                    >\n                      {submitTicketMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\" />\n                          Submitting...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"w-4 h-4 mr-2\" />\n                          Submit Ticket\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Quick Help Section */}\n        <div className=\"bg-gray-50 p-6 rounded-b-3xl\">\n          <h3 className=\"font-bold text-lg mb-4\">Common Questions</h3>\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n              <h4 className=\"font-medium text-sm mb-2\">Delivery Information</h4>\n              <p className=\"text-xs text-gray-600\">Standard delivery takes 5-7 business days</p>\n            </div>\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n              <h4 className=\"font-medium text-sm mb-2\">Return Policy</h4>\n              <p className=\"text-xs text-gray-600\">30-day return policy for all furniture</p>\n            </div>\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n              <h4 className=\"font-medium text-sm mb-2\">Assembly Service</h4>\n              <p className=\"text-xs text-gray-600\">Free assembly available in metro cities</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14097},"client/src/components/video-call-modal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, Video, VideoOff, Mic, MicOff, Phone, Camera, Monitor, Users, MessageCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VideoCallModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  appointmentId: string;\n  customerName: string;\n}\n\nexport default function VideoCallModal({ isOpen, onClose, appointmentId, customerName }: VideoCallModalProps) {\n  const { toast } = useToast();\n  const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [callStatus, setCallStatus] = useState<'waiting' | 'connecting' | 'connected' | 'ended'>('waiting');\n  const [messages, setMessages] = useState<Array<{ sender: string; message: string; time: string }>>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  \n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const remoteVideoRef = useRef<HTMLVideoElement>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      initializeCall();\n    }\n    return () => {\n      cleanupCall();\n    };\n  }, [isOpen]);\n\n  const initializeCall = async () => {\n    try {\n      setCallStatus('connecting');\n      \n      // Get user media\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: isVideoEnabled,\n        audio: isAudioEnabled\n      });\n      \n      mediaStreamRef.current = stream;\n      \n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n\n      // Simulate connection (in real implementation, this would use WebRTC)\n      setTimeout(() => {\n        setCallStatus('connected');\n        toast({\n          title: \"Connected to virtual showroom\",\n          description: \"You are now connected with our furniture expert!\",\n        });\n        \n        // Add welcome message\n        setMessages([{\n          sender: \"Expert\",\n          message: \"Welcome to IndoSaga's virtual showroom! I'm here to show you our beautiful furniture collection. What type of furniture are you looking for today?\",\n          time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n        }]);\n      }, 2000);\n      \n    } catch (error) {\n      console.error('Error initializing call:', error);\n      toast({\n        title: \"Camera access required\",\n        description: \"Please allow camera and microphone access for the video call\",\n        variant: \"destructive\",\n      });\n      setCallStatus('ended');\n    }\n  };\n\n  const cleanupCall = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n  };\n\n  const toggleVideo = async () => {\n    if (mediaStreamRef.current) {\n      const videoTrack = mediaStreamRef.current.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !isVideoEnabled;\n        setIsVideoEnabled(!isVideoEnabled);\n      }\n    }\n  };\n\n  const toggleAudio = async () => {\n    if (mediaStreamRef.current) {\n      const audioTrack = mediaStreamRef.current.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !isAudioEnabled;\n        setIsAudioEnabled(!isAudioEnabled);\n      }\n    }\n  };\n\n  const endCall = () => {\n    cleanupCall();\n    setCallStatus('ended');\n    toast({\n      title: \"Call ended\",\n      description: \"Thank you for visiting our virtual showroom!\",\n    });\n    onClose();\n  };\n\n  const sendMessage = () => {\n    if (newMessage.trim()) {\n      setMessages(prev => [...prev, {\n        sender: \"You\",\n        message: newMessage,\n        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n      }]);\n      setNewMessage(\"\");\n\n      // Simulate expert response\n      setTimeout(() => {\n        const responses = [\n          \"I can show you that piece right now! Let me walk over to it.\",\n          \"Great choice! That's one of our bestsellers. Here are the details...\",\n          \"Yes, we have that available in multiple colors. Let me show you.\",\n          \"That would look perfect in your space! Here's the pricing information.\",\n          \"I'll demonstrate the quality by showing you the construction details.\"\n        ];\n        const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n        \n        setMessages(prev => [...prev, {\n          sender: \"Expert\",\n          message: randomResponse,\n          time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n        }]);\n      }, 1000);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/90 flex items-center justify-center z-50\">\n      <div className=\"bg-gray-900 rounded-2xl max-w-7xl w-full max-h-[95vh] overflow-hidden shadow-2xl\">\n        {/* Header */}\n        <div className=\"bg-gradient-to-r from-primary to-accent p-4 flex justify-between items-center\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"bg-white/20 rounded-full p-2\">\n              <Video className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"text-white\">\n              <h2 className=\"text-lg font-bold\">Virtual Showroom</h2>\n              <p className=\"text-sm opacity-90\">\n                {callStatus === 'waiting' && \"Preparing connection...\"}\n                {callStatus === 'connecting' && \"Connecting...\"}\n                {callStatus === 'connected' && \"Connected with furniture expert\"}\n                {callStatus === 'ended' && \"Call ended\"}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n              callStatus === 'connected' ? 'bg-green-500/20 text-green-300' : \n              callStatus === 'connecting' ? 'bg-yellow-500/20 text-yellow-300' :\n              'bg-gray-500/20 text-gray-300'\n            }`}>\n              {callStatus === 'connected' && '● LIVE'}\n              {callStatus === 'connecting' && '○ CONNECTING'}\n              {callStatus === 'waiting' && '○ WAITING'}\n              {callStatus === 'ended' && '○ ENDED'}\n            </div>\n            \n            <Button\n              onClick={onClose}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white/20 rounded-full w-8 h-8 p-0\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex h-[calc(95vh-80px)]\">\n          {/* Main Video Area */}\n          <div className=\"flex-1 relative bg-black\">\n            {/* Remote Video (Shop Owner's Camera) */}\n            <div className=\"absolute inset-0\">\n              {callStatus === 'connected' ? (\n                <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center\">\n                  {/* Simulated remote video showing furniture showroom */}\n                  <div className=\"text-center text-white space-y-4\">\n                    <Monitor className=\"w-24 h-24 mx-auto opacity-50\" />\n                    <div>\n                      <h3 className=\"text-xl font-bold\">Live Virtual Showroom</h3>\n                      <p className=\"text-gray-300\">Expert is showing furniture collection via camera</p>\n                    </div>\n                    <div className=\"bg-black/30 backdrop-blur rounded-lg p-4 max-w-md\">\n                      <p className=\"text-sm\">🎥 <strong>Current View:</strong> Living Room Collection</p>\n                      <p className=\"text-xs text-gray-300 mt-1\">\n                        The shop owner is showing you sofas, coffee tables, and accent chairs in real-time\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"w-full h-full bg-gray-800 flex items-center justify-center\">\n                  <div className=\"text-center text-gray-400\">\n                    <Camera className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                    <p>Waiting for expert to join...</p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Local Video (Customer's Camera) */}\n            <div className=\"absolute bottom-4 right-4 w-48 h-36 bg-black rounded-lg overflow-hidden border-2 border-white/20\">\n              <video\n                ref={localVideoRef}\n                autoPlay\n                muted\n                playsInline\n                className=\"w-full h-full object-cover\"\n              />\n              <div className=\"absolute bottom-2 left-2 bg-black/70 text-white text-xs px-2 py-1 rounded\">\n                {customerName} (You)\n              </div>\n              {!isVideoEnabled && (\n                <div className=\"absolute inset-0 bg-gray-800 flex items-center justify-center\">\n                  <VideoOff className=\"w-8 h-8 text-gray-400\" />\n                </div>\n              )}\n            </div>\n\n            {/* Call Status Overlay */}\n            {callStatus !== 'connected' && (\n              <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                <div className=\"bg-white/10 backdrop-blur rounded-lg p-6 text-center text-white\">\n                  {callStatus === 'waiting' && (\n                    <>\n                      <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-white/20 border-t-white mx-auto mb-4\" />\n                      <p className=\"text-lg font-medium\">Preparing your virtual showroom...</p>\n                    </>\n                  )}\n                  {callStatus === 'connecting' && (\n                    <>\n                      <div className=\"animate-pulse\">\n                        <Users className=\"w-12 h-12 mx-auto mb-4\" />\n                      </div>\n                      <p className=\"text-lg font-medium\">Connecting with expert...</p>\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Chat Panel */}\n          <div className=\"w-80 bg-white border-l border-gray-200 flex flex-col\">\n            <div className=\"p-4 border-b border-gray-200\">\n              <h3 className=\"font-bold flex items-center space-x-2\">\n                <MessageCircle className=\"w-4 h-4\" />\n                <span>Chat</span>\n              </h3>\n            </div>\n            \n            <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n              {messages.map((msg, index) => (\n                <div key={index} className={`flex ${msg.sender === 'You' ? 'justify-end' : 'justify-start'}`}>\n                  <div className={`max-w-xs rounded-lg p-3 ${\n                    msg.sender === 'You' \n                      ? 'bg-primary text-white' \n                      : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    <div className=\"text-sm\">{msg.message}</div>\n                    <div className={`text-xs mt-1 ${msg.sender === 'You' ? 'text-primary-200' : 'text-gray-500'}`}>\n                      {msg.time}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"p-4 border-t border-gray-200\">\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                  placeholder=\"Ask about furniture...\"\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:border-primary\"\n                  disabled={callStatus !== 'connected'}\n                />\n                <Button\n                  onClick={sendMessage}\n                  disabled={callStatus !== 'connected' || !newMessage.trim()}\n                  size=\"sm\"\n                  className=\"px-3\"\n                >\n                  Send\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Control Panel */}\n        <div className=\"bg-gray-800 p-4 flex justify-center space-x-4\">\n          <Button\n            onClick={toggleVideo}\n            variant={isVideoEnabled ? \"default\" : \"destructive\"}\n            size=\"sm\"\n            className=\"flex items-center space-x-2\"\n          >\n            {isVideoEnabled ? <Video className=\"w-4 h-4\" /> : <VideoOff className=\"w-4 h-4\" />}\n            <span>{isVideoEnabled ? 'Video On' : 'Video Off'}</span>\n          </Button>\n          \n          <Button\n            onClick={toggleAudio}\n            variant={isAudioEnabled ? \"default\" : \"destructive\"}\n            size=\"sm\"\n            className=\"flex items-center space-x-2\"\n          >\n            {isAudioEnabled ? <Mic className=\"w-4 h-4\" /> : <MicOff className=\"w-4 h-4\" />}\n            <span>{isAudioEnabled ? 'Mic On' : 'Mic Off'}</span>\n          </Button>\n          \n          <Button\n            onClick={endCall}\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"flex items-center space-x-2\"\n          >\n            <Phone className=\"w-4 h-4\" />\n            <span>End Call</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13663},"client/src/components/order-tracking-modal.tsx":{"content":"import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, Package, Truck, MapPin, Home, Clock } from 'lucide-react';\n\ninterface TrackingStage {\n  id: string;\n  title: string;\n  description: string;\n  status: 'completed' | 'current' | 'pending';\n  date?: string;\n  location?: string;\n  icon: React.ReactNode;\n}\n\ninterface OrderTrackingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  orderData: any;\n}\n\nconst OrderTrackingModal: React.FC<OrderTrackingModalProps> = ({\n  isOpen,\n  onClose,\n  orderData\n}) => {\n  if (!orderData) return null;\n\n  // Generate tracking ID if not present\n  const trackingId = orderData.trackingId || `TR${orderData.id.slice(-8).toUpperCase()}`;\n  \n  // Calculate order progress based on status\n  const getOrderStages = (orderStatus: string): TrackingStage[] => {\n    const orderDate = new Date(orderData.createdAt);\n    const statusLower = orderStatus.toLowerCase();\n    \n    const stages: TrackingStage[] = [\n      {\n        id: 'placed',\n        title: 'Order Placed',\n        description: 'We have received your order and payment',\n        status: 'completed',\n        date: orderDate.toLocaleDateString('en-IN', { \n          day: 'numeric', \n          month: 'short', \n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        location: 'Mumbai, India',\n        icon: <Package className=\"w-5 h-5\" />\n      },\n      {\n        id: 'processing',\n        title: 'Order Processing',\n        description: 'Your order is being prepared for shipment',\n        status: statusLower === 'pending' ? 'current' : 'completed',\n        date: statusLower !== 'pending' ? new Date(orderDate.getTime() + 24 * 60 * 60 * 1000).toLocaleDateString('en-IN', { \n          day: 'numeric', \n          month: 'short', \n          hour: '2-digit',\n          minute: '2-digit'\n        }) : undefined,\n        location: 'Warehouse, Mumbai',\n        icon: <Clock className=\"w-5 h-5\" />\n      },\n      {\n        id: 'shipped',\n        title: 'Shipped',\n        description: 'Your order has been shipped and is on its way',\n        status: statusLower === 'processing' ? 'current' : statusLower === 'shipped' || statusLower === 'delivered' ? 'completed' : 'pending',\n        date: statusLower === 'shipped' || statusLower === 'delivered' ? new Date(orderDate.getTime() + 2 * 24 * 60 * 60 * 1000).toLocaleDateString('en-IN', { \n          day: 'numeric', \n          month: 'short', \n          hour: '2-digit',\n          minute: '2-digit'\n        }) : undefined,\n        location: 'In Transit',\n        icon: <Truck className=\"w-5 h-5\" />\n      },\n      {\n        id: 'out-for-delivery',\n        title: 'Out for Delivery',\n        description: 'Your package is out for delivery and will arrive today',\n        status: statusLower === 'shipped' ? 'current' : statusLower === 'delivered' ? 'completed' : 'pending',\n        date: statusLower === 'delivered' ? new Date(orderDate.getTime() + 6 * 24 * 60 * 60 * 1000).toLocaleDateString('en-IN', { \n          day: 'numeric', \n          month: 'short', \n          hour: '2-digit',\n          minute: '2-digit'\n        }) : undefined,\n        location: 'Local Delivery Hub',\n        icon: <MapPin className=\"w-5 h-5\" />\n      },\n      {\n        id: 'delivered',\n        title: 'Delivered',\n        description: 'Your order has been successfully delivered',\n        status: statusLower === 'delivered' ? 'completed' : 'pending',\n        date: statusLower === 'delivered' ? new Date(orderDate.getTime() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString('en-IN', { \n          day: 'numeric', \n          month: 'short', \n          hour: '2-digit',\n          minute: '2-digit'\n        }) : undefined,\n        location: 'Delivered to Customer',\n        icon: <Home className=\"w-5 h-5\" />\n      }\n    ];\n\n    // Handle cancelled status\n    if (statusLower === 'cancelled') {\n      return stages.map((stage, index) => ({\n        ...stage,\n        status: index === 0 ? 'completed' : 'pending' as const\n      }));\n    }\n\n    return stages;\n  };\n\n  const stages = getOrderStages(orderData.status || 'pending');\n  const currentStageIndex = stages.findIndex(stage => stage.status === 'current');\n  const progressPercentage = currentStageIndex >= 0 \n    ? ((currentStageIndex + 0.5) / stages.length) * 100 \n    : (stages.filter(s => s.status === 'completed').length / stages.length) * 100;\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'delivered': return 'bg-green-500';\n      case 'shipped': return 'bg-blue-500';\n      case 'processing': return 'bg-yellow-500';\n      case 'cancelled': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getExpectedDelivery = () => {\n    const orderDate = new Date(orderData.createdAt);\n    const deliveryDate = new Date(orderDate.getTime() + 7 * 24 * 60 * 60 * 1000);\n    return deliveryDate.toLocaleDateString('en-IN', { \n      weekday: 'long',\n      day: 'numeric', \n      month: 'long', \n      year: 'numeric'\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold flex items-center gap-2\">\n            <Package className=\"w-6 h-6 text-primary\" />\n            Track Your Order\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Order Summary */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Order ID</p>\n                <p className=\"font-semibold\">{orderData.id}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Tracking ID</p>\n                <p className=\"font-semibold text-primary\">{trackingId}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Status</p>\n                <Badge className={`${getStatusColor(orderData.status)} text-white`}>\n                  {orderData.status ? orderData.status.charAt(0).toUpperCase() + orderData.status.slice(1) : 'Pending'}\n                </Badge>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-600\">Expected Delivery</p>\n                <p className=\"font-semibold text-green-600\">{getExpectedDelivery()}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm text-gray-600\">\n              <span>Order Progress</span>\n              <span>{Math.round(progressPercentage)}% Complete</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-500 ease-in-out\"\n                style={{ width: `${progressPercentage}%` }}\n              />\n            </div>\n          </div>\n\n          {/* Tracking Timeline */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Order Journey</h3>\n            <div className=\"relative\">\n              {stages.map((stage, index) => (\n                <div key={stage.id} className=\"flex items-start gap-4 pb-6 relative\">\n                  {/* Vertical Line */}\n                  {index < stages.length - 1 && (\n                    <div \n                      className={`absolute left-6 top-12 w-0.5 h-16 ${\n                        stage.status === 'completed' ? 'bg-green-500' : 'bg-gray-300'\n                      }`}\n                    />\n                  )}\n                  \n                  {/* Icon */}\n                  <div \n                    className={`flex items-center justify-center w-12 h-12 rounded-full border-2 ${\n                      stage.status === 'completed' \n                        ? 'bg-green-500 border-green-500 text-white' \n                        : stage.status === 'current'\n                        ? 'bg-primary border-primary text-white animate-pulse'\n                        : 'bg-gray-100 border-gray-300 text-gray-500'\n                    }`}\n                  >\n                    {stage.status === 'completed' ? (\n                      <Check className=\"w-6 h-6\" />\n                    ) : (\n                      stage.icon\n                    )}\n                  </div>\n                  \n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h4 className={`font-semibold ${\n                          stage.status === 'completed' ? 'text-green-700' : \n                          stage.status === 'current' ? 'text-primary' : 'text-gray-500'\n                        }`}>\n                          {stage.title}\n                        </h4>\n                        <p className=\"text-sm text-gray-600 mt-1\">{stage.description}</p>\n                        {stage.location && (\n                          <p className=\"text-xs text-gray-500 mt-1 flex items-center gap-1\">\n                            <MapPin className=\"w-3 h-3\" />\n                            {stage.location}\n                          </p>\n                        )}\n                      </div>\n                      {stage.date && (\n                        <div className=\"text-right text-sm text-gray-500\">\n                          {stage.date}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Order Items */}\n          {orderData.orderItems && orderData.orderItems.length > 0 && (\n            <div className=\"border-t pt-4\">\n              <h3 className=\"text-lg font-semibold mb-3\">Items in this Order</h3>\n              <div className=\"space-y-2\">\n                {orderData.orderItems.map((item: any, index: number) => (\n                  <div key={index} className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                    <span className=\"font-medium\">{item.product?.name || 'Product'}</span>\n                    <span className=\"text-sm text-gray-600\">Qty: {item.quantity}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Help Section */}\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">Need Help?</h4>\n            <p className=\"text-sm text-blue-700\">\n              If you have any questions about your order, please contact our customer support at \n              <span className=\"font-semibold\"> +91 98765 43210</span> or email us at \n              <span className=\"font-semibold\"> support@indosaga.com</span>\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default OrderTrackingModal;","size_bytes":11202},"client/src/components/floating-chatbot.tsx":{"content":"import { useState } from \"react\";\nimport { MessageCircle, Calendar, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FloatingChatbotProps {\n  onSupportClick: () => void;\n  onBookCallClick: () => void;\n}\n\nexport default function FloatingChatbot({ onSupportClick, onBookCallClick }: FloatingChatbotProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <div className=\"fixed bottom-24 right-4 md:right-8 z-50 flex flex-col items-end space-y-3\">\n      {/* Quick Action Buttons - Show when expanded */}\n      {isExpanded && (\n        <div className=\"flex flex-col space-y-2 animate-fadeIn\">\n          {/* Support Button - Green */}\n          <Button\n            onClick={() => {\n              onSupportClick();\n              setIsExpanded(false);\n            }}\n            className=\"flex items-center space-x-2 bg-green-500 hover:bg-green-600 text-white px-3 py-2 md:px-4 md:py-2 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 min-w-[100px] md:min-w-[120px]\"\n            data-testid=\"floating-support-button\"\n          >\n            <span className=\"text-lg\">💬</span>\n            <span className=\"font-medium text-sm\">Support</span>\n          </Button>\n\n          {/* Book Call Button - Blue */}\n          <Button\n            onClick={() => {\n              onBookCallClick();\n              setIsExpanded(false);\n            }}\n            className=\"flex items-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 md:px-4 md:py-2 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 min-w-[100px] md:min-w-[120px]\"\n            data-testid=\"floating-book-call-button\"\n          >\n            <span className=\"text-lg\">📞</span>\n            <span className=\"font-medium text-sm\">Book Call</span>\n          </Button>\n        </div>\n      )}\n\n      {/* Main Chatbot Toggle Button */}\n      <Button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"w-14 h-14 bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 flex items-center justify-center\"\n        data-testid=\"floating-chatbot-toggle\"\n      >\n        {isExpanded ? (\n          <X className=\"w-6 h-6\" />\n        ) : (\n          <MessageCircle className=\"w-6 h-6\" />\n        )}\n      </Button>\n    </div>\n  );\n}","size_bytes":2478},"server/email-service.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  console.warn(\"SENDGRID_API_KEY environment variable is not set. Email sending will be disabled.\");\n}\n\nconst mailService = new MailService();\nif (process.env.SENDGRID_API_KEY) {\n  mailService.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.log('SendGrid API key not configured. Email would have been sent to:', params.to);\n    return false;\n  }\n\n  try {\n    await mailService.send({\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text || '',\n      html: params.html || '',\n    });\n    console.log('Email sent successfully to:', params.to);\n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}\n\n// Email templates\nexport function createAppointmentConfirmationEmail(appointmentData: any) {\n  const { customerName, customerEmail, date, time, type, id } = appointmentData;\n  \n  const appointmentDate = new Date(date);\n  const formattedDate = appointmentDate.toLocaleDateString('en-IN', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  \n  const meetingType = type.replace('_', ' ').toUpperCase();\n  \n  const subject = `✅ Appointment Confirmed - ${formattedDate} at ${time}`;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Appointment Confirmation</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 20px auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #8B4513, #CD853F); color: white; padding: 30px 20px; text-align: center; }\n            .content { padding: 30px; }\n            .appointment-details { background-color: #f8f9fa; border-left: 4px solid #8B4513; padding: 20px; margin: 20px 0; border-radius: 5px; }\n            .video-link { background-color: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; border-radius: 5px; margin: 20px 0; }\n            .footer { background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }\n            .btn { display: inline-block; padding: 12px 24px; background-color: #8B4513; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }\n            .logo { font-size: 24px; font-weight: bold; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">🪑 IndoSaga Furniture</div>\n                <h1 style=\"margin: 10px 0;\">✅ Appointment Confirmed!</h1>\n                <p>Your virtual furniture consultation is all set</p>\n            </div>\n            \n            <div class=\"content\">\n                <p>Dear ${customerName},</p>\n                \n                <p>Thank you for booking a virtual consultation with IndoSaga Furniture! We're excited to help you discover our premium teak wood furniture collection.</p>\n                \n                <div class=\"appointment-details\">\n                    <h3 style=\"margin-top: 0; color: #8B4513;\">📅 Appointment Details</h3>\n                    <table style=\"width: 100%; border-collapse: collapse;\">\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Appointment ID:</td>\n                            <td style=\"padding: 8px 0;\">${id}</td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Date:</td>\n                            <td style=\"padding: 8px 0;\">${formattedDate}</td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Time:</td>\n                            <td style=\"padding: 8px 0;\">${time} IST</td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Meeting Type:</td>\n                            <td style=\"padding: 8px 0;\">${meetingType}</td>\n                        </tr>\n                    </table>\n                </div>\n                \n                <div class=\"video-link\">\n                    <h3 style=\"margin-top: 0; color: #0066cc;\">🎥 Join Your Virtual Meeting</h3>\n                    <p>When it's time for your appointment, click the link below to join your virtual consultation:</p>\n                    <a href=\"https://meet.google.com/appointment-${id}\" class=\"btn\">Join Virtual Showroom</a>\n                    <p style=\"font-size: 12px; color: #666; margin-top: 10px;\">\n                        <strong>Note:</strong> Our furniture expert will call you 2-3 minutes before the scheduled time. Please keep your phone handy.\n                    </p>\n                </div>\n                \n                <h3 style=\"color: #8B4513;\">What to Expect:</h3>\n                <ul style=\"padding-left: 20px;\">\n                    <li>Live virtual tour of our premium teak furniture collection</li>\n                    <li>Personalized recommendations based on your needs</li>\n                    <li>Real-time Q&A with our furniture experts</li>\n                    <li>Exclusive offers and customization options</li>\n                </ul>\n                \n                <h3 style=\"color: #8B4513;\">Need to Reschedule?</h3>\n                <p>If you need to change your appointment time, please contact us at least 2 hours in advance:</p>\n                <p>📞 <strong>Phone:</strong> +91 98765 43210<br>\n                📧 <strong>Email:</strong> appointments@indosagafurniture.com</p>\n            </div>\n            \n            <div class=\"footer\">\n                <p><strong>IndoSaga Furniture</strong><br>\n                Premium Teak Wood Furniture<br>\n                📍 123 Furniture Street, Mumbai, India<br>\n                📞 +91 98765 43210 | 📧 info@indosagafurniture.com</p>\n                \n                <p style=\"margin-top: 15px;\">Thank you for choosing IndoSaga Furniture for your home furnishing needs!</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n  \n  const text = `\nAppointment Confirmed - IndoSaga Furniture\n\nDear ${customerName},\n\nYour virtual furniture consultation has been confirmed!\n\nAppointment Details:\n- ID: ${id}\n- Date: ${formattedDate}\n- Time: ${time} IST\n- Type: ${meetingType}\n\nJoin your virtual meeting: https://meet.google.com/appointment-${id}\n\nOur furniture expert will call you 2-3 minutes before the scheduled time.\n\nNeed to reschedule? Contact us at +91 98765 43210\n\nThank you for choosing IndoSaga Furniture!\n\nIndoSaga Furniture\nPremium Teak Wood Furniture\n📍 123 Furniture Street, Mumbai, India\n📞 +91 98765 43210 | 📧 info@indosagafurniture.com\n  `;\n  \n  return {\n    to: customerEmail,\n    from: 'appointments@indosagafurniture.com',\n    subject,\n    html,\n    text\n  };\n}\n\nexport function createSupportTicketConfirmationEmail(ticketData: any) {\n  const { customerName, customerEmail, subject: ticketSubject, priority, ticketId } = ticketData;\n  \n  const priorityColors = {\n    low: '#28a745',\n    medium: '#ffc107', \n    high: '#dc3545'\n  };\n  \n  const priorityColor = priorityColors[priority as keyof typeof priorityColors] || '#6c757d';\n  \n  const subject = `🎫 Support Ticket Created - ${ticketId}`;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>Support Ticket Confirmation</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 600px; margin: 20px auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #8B4513, #CD853F); color: white; padding: 30px 20px; text-align: center; }\n            .content { padding: 30px; }\n            .ticket-details { background-color: #f8f9fa; border-left: 4px solid #8B4513; padding: 20px; margin: 20px 0; border-radius: 5px; }\n            .priority-badge { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; text-transform: uppercase; color: white; }\n            .footer { background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }\n            .logo { font-size: 24px; font-weight: bold; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">🪑 IndoSaga Furniture</div>\n                <h1 style=\"margin: 10px 0;\">🎫 Support Ticket Created</h1>\n                <p>We've received your request and will respond soon</p>\n            </div>\n            \n            <div class=\"content\">\n                <p>Dear ${customerName},</p>\n                \n                <p>Thank you for contacting IndoSaga Furniture support. We have successfully received your request and created a support ticket for you.</p>\n                \n                <div class=\"ticket-details\">\n                    <h3 style=\"margin-top: 0; color: #8B4513;\">🎫 Ticket Information</h3>\n                    <table style=\"width: 100%; border-collapse: collapse;\">\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Ticket ID:</td>\n                            <td style=\"padding: 8px 0;\"><strong>${ticketId}</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Subject:</td>\n                            <td style=\"padding: 8px 0;\">${ticketSubject}</td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Priority:</td>\n                            <td style=\"padding: 8px 0;\">\n                                <span class=\"priority-badge\" style=\"background-color: ${priorityColor};\">${priority}</span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Status:</td>\n                            <td style=\"padding: 8px 0;\">Open</td>\n                        </tr>\n                    </table>\n                </div>\n                \n                <h3 style=\"color: #8B4513;\">What Happens Next?</h3>\n                <ul style=\"padding-left: 20px;\">\n                    <li><strong>Acknowledgment:</strong> You'll receive this confirmation email immediately</li>\n                    <li><strong>Assignment:</strong> Your ticket will be assigned to the appropriate team member</li>\n                    <li><strong>Response:</strong> We'll respond within 24 hours (or sooner for high priority tickets)</li>\n                    <li><strong>Resolution:</strong> We'll work with you until your issue is completely resolved</li>\n                </ul>\n                \n                <div style=\"background-color: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n                    <h4 style=\"margin-top: 0; color: #0066cc;\">📧 Keep This Email</h4>\n                    <p style=\"margin-bottom: 0; font-size: 14px;\">Please save this email for your records. When replying to any communication about this ticket, include the Ticket ID <strong>${ticketId}</strong> for faster service.</p>\n                </div>\n                \n                <h3 style=\"color: #8B4513;\">Need Immediate Help?</h3>\n                <p>For urgent matters, you can also reach us directly:</p>\n                <p>📞 <strong>Phone:</strong> +91 98765 43210 (9 AM - 6 PM IST)<br>\n                📧 <strong>Email:</strong> support@indosagafurniture.com<br>\n                💬 <strong>Live Chat:</strong> Available on our website</p>\n            </div>\n            \n            <div class=\"footer\">\n                <p><strong>IndoSaga Furniture Support Team</strong><br>\n                Premium Teak Wood Furniture<br>\n                📍 123 Furniture Street, Mumbai, India<br>\n                📞 +91 98765 43210 | 📧 support@indosagafurniture.com</p>\n                \n                <p style=\"margin-top: 15px;\">Thank you for choosing IndoSaga Furniture!</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n  \n  const text = `\nSupport Ticket Created - IndoSaga Furniture\n\nDear ${customerName},\n\nWe have received your support request and created ticket ${ticketId}.\n\nTicket Details:\n- Ticket ID: ${ticketId}\n- Subject: ${ticketSubject}\n- Priority: ${priority}\n- Status: Open\n\nWe will respond within 24 hours. For urgent matters, call +91 98765 43210.\n\nThank you for contacting IndoSaga Furniture!\n\nIndoSaga Furniture Support Team\n📍 123 Furniture Street, Mumbai, India\n📞 +91 98765 43210 | 📧 support@indosagafurniture.com\n  `;\n  \n  return {\n    to: customerEmail,\n    from: 'support@indosagafurniture.com',\n    subject,\n    html,\n    text\n  };\n}\n\nexport function createContactInquiryNotificationEmail(inquiryData: any) {\n  const { firstName, lastName, email, phone, inquiryType, message, id } = inquiryData;\n  \n  const inquiryTypeMap = {\n    'product-inquiry': 'Product Inquiry',\n    'custom-order': 'Custom Order',\n    'bulk-order': 'Bulk Order',\n    'general-question': 'General Question',\n    'complaint': 'Complaint',\n    'feedback': 'Feedback'\n  };\n  \n  const displayInquiryType = inquiryTypeMap[inquiryType as keyof typeof inquiryTypeMap] || inquiryType;\n  const customerName = `${firstName} ${lastName}`;\n  \n  const subject = `📩 New Contact Inquiry: ${displayInquiryType} from ${customerName}`;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <title>New Contact Inquiry</title>\n        <style>\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }\n            .container { max-width: 700px; margin: 20px auto; background-color: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }\n            .header { background: linear-gradient(135deg, #8B4513, #CD853F); color: white; padding: 30px 20px; text-align: center; }\n            .content { padding: 30px; }\n            .inquiry-details { background-color: #f8f9fa; border-left: 4px solid #8B4513; padding: 20px; margin: 20px 0; border-radius: 5px; }\n            .customer-message { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; margin: 20px 0; }\n            .contact-actions { background-color: #e7f3ff; border: 1px solid #b3d9ff; padding: 20px; border-radius: 5px; margin: 20px 0; }\n            .footer { background-color: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }\n            .logo { font-size: 24px; font-weight: bold; }\n            .inquiry-type { display: inline-block; padding: 4px 12px; background-color: #8B4513; color: white; border-radius: 20px; font-size: 12px; font-weight: bold; text-transform: uppercase; }\n            .btn { display: inline-block; padding: 10px 20px; background-color: #8B4513; color: white; text-decoration: none; border-radius: 5px; margin: 5px; }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <div class=\"logo\">🪑 IndoSaga Furniture</div>\n                <h1 style=\"margin: 10px 0;\">📩 New Contact Inquiry</h1>\n                <p>A customer has submitted an inquiry on your website</p>\n            </div>\n            \n            <div class=\"content\">\n                <div class=\"inquiry-details\">\n                    <h3 style=\"margin-top: 0; color: #8B4513;\">👤 Customer Information</h3>\n                    <table style=\"width: 100%; border-collapse: collapse;\">\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666; width: 30%;\">Name:</td>\n                            <td style=\"padding: 8px 0;\"><strong>${customerName}</strong></td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Email:</td>\n                            <td style=\"padding: 8px 0;\"><a href=\"mailto:${email}\" style=\"color: #8B4513;\">${email}</a></td>\n                        </tr>\n                        ${phone ? `\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Phone:</td>\n                            <td style=\"padding: 8px 0;\"><a href=\"tel:${phone}\" style=\"color: #8B4513;\">${phone}</a></td>\n                        </tr>\n                        ` : ''}\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Inquiry Type:</td>\n                            <td style=\"padding: 8px 0;\">\n                                <span class=\"inquiry-type\">${displayInquiryType}</span>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Inquiry ID:</td>\n                            <td style=\"padding: 8px 0;\">${id}</td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding: 8px 0; font-weight: bold; color: #666;\">Submitted:</td>\n                            <td style=\"padding: 8px 0;\">${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })} IST</td>\n                        </tr>\n                    </table>\n                </div>\n                \n                <div class=\"customer-message\">\n                    <h3 style=\"margin-top: 0; color: #8B4513;\">💬 Customer Message</h3>\n                    <p style=\"margin-bottom: 0; white-space: pre-wrap; font-size: 14px; line-height: 1.6;\">${message}</p>\n                </div>\n                \n                <div class=\"contact-actions\">\n                    <h3 style=\"margin-top: 0; color: #0066cc;\">📞 Quick Actions</h3>\n                    <p style=\"margin-bottom: 15px;\">Respond to this inquiry quickly to provide excellent customer service:</p>\n                    <div style=\"text-align: center;\">\n                        <a href=\"mailto:${email}?subject=Re: ${displayInquiryType} - IndoSaga Furniture&body=Dear ${customerName},%0A%0AThank you for your inquiry about ${displayInquiryType.toLowerCase()}. We appreciate your interest in IndoSaga Furniture.%0A%0A\" class=\"btn\">📧 Reply by Email</a>\n                        ${phone ? `<a href=\"tel:${phone}\" class=\"btn\">📞 Call Customer</a>` : ''}\n                    </div>\n                    <p style=\"font-size: 12px; color: #666; margin-top: 15px; text-align: center;\">\n                        <strong>Tip:</strong> Responding within 2-4 hours shows excellent customer service and increases conversion rates.\n                    </p>\n                </div>\n                \n                <h3 style=\"color: #8B4513;\">📋 Next Steps</h3>\n                <ul style=\"padding-left: 20px;\">\n                    <li><strong>Immediate Response:</strong> Send a personalized reply acknowledging their inquiry</li>\n                    <li><strong>Assessment:</strong> Review their requirements and prepare relevant product information</li>\n                    <li><strong>Follow-up:</strong> Schedule a call or showroom visit if appropriate</li>\n                    <li><strong>Documentation:</strong> Log this inquiry in your CRM system</li>\n                </ul>\n            </div>\n            \n            <div class=\"footer\">\n                <p><strong>IndoSaga Furniture - Admin Notification</strong><br>\n                This email was automatically generated when a customer submitted the contact form on your website.<br>\n                📧 kadamprajwal358@gmail.com</p>\n            </div>\n        </div>\n    </body>\n    </html>\n  `;\n  \n  const text = `\nNew Contact Inquiry - IndoSaga Furniture\n\nCustomer Information:\n- Name: ${customerName}\n- Email: ${email}\n${phone ? `- Phone: ${phone}` : ''}\n- Inquiry Type: ${displayInquiryType}\n- Inquiry ID: ${id}\n- Submitted: ${new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })} IST\n\nCustomer Message:\n${message}\n\nQuick Actions:\n- Reply by email: ${email}\n${phone ? `- Call customer: ${phone}` : ''}\n\nRespond quickly to provide excellent customer service!\n\nIndoSaga Furniture - Admin Notification\n  `;\n  \n  return {\n    to: 'kadamprajwal358@gmail.com',\n    from: 'noreply@indosagafurniture.com',\n    subject,\n    html,\n    text\n  };\n}","size_bytes":21458},"client/src/components/route-scroll-to-top.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nexport default function RouteScrollToTop() {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Scroll to top whenever the route changes\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: \"instant\" // Use instant behavior for immediate scroll\n    });\n  }, [location]);\n\n  return null; // This component doesn't render anything\n}","size_bytes":431}},"version":1}